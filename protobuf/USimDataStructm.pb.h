// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: USimDataStructm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_USimDataStructm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_USimDataStructm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_USimDataStructm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_USimDataStructm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[53]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_USimDataStructm_2eproto;
class USIM_AMPFLASHING_Proto;
class USIM_AMPFLASHING_ProtoDefaultTypeInternal;
extern USIM_AMPFLASHING_ProtoDefaultTypeInternal _USIM_AMPFLASHING_Proto_default_instance_;
class USIM_AMPHELITRANSFER_Proto;
class USIM_AMPHELITRANSFER_ProtoDefaultTypeInternal;
extern USIM_AMPHELITRANSFER_ProtoDefaultTypeInternal _USIM_AMPHELITRANSFER_Proto_default_instance_;
class USIM_AMPLANDINGUNLOAD_Proto;
class USIM_AMPLANDINGUNLOAD_ProtoDefaultTypeInternal;
extern USIM_AMPLANDINGUNLOAD_ProtoDefaultTypeInternal _USIM_AMPLANDINGUNLOAD_Proto_default_instance_;
class USIM_AMPTRANSFER_Proto;
class USIM_AMPTRANSFER_ProtoDefaultTypeInternal;
extern USIM_AMPTRANSFER_ProtoDefaultTypeInternal _USIM_AMPTRANSFER_Proto_default_instance_;
class USIM_AircraftDeckAbortEvent_Proto;
class USIM_AircraftDeckAbortEvent_ProtoDefaultTypeInternal;
extern USIM_AircraftDeckAbortEvent_ProtoDefaultTypeInternal _USIM_AircraftDeckAbortEvent_Proto_default_instance_;
class USIM_AircraftLandEvent_Proto;
class USIM_AircraftLandEvent_ProtoDefaultTypeInternal;
extern USIM_AircraftLandEvent_ProtoDefaultTypeInternal _USIM_AircraftLandEvent_Proto_default_instance_;
class USIM_AircraftReturnEvent_Proto;
class USIM_AircraftReturnEvent_ProtoDefaultTypeInternal;
extern USIM_AircraftReturnEvent_ProtoDefaultTypeInternal _USIM_AircraftReturnEvent_Proto_default_instance_;
class USIM_AircraftTakeoffEvent_Proto;
class USIM_AircraftTakeoffEvent_ProtoDefaultTypeInternal;
extern USIM_AircraftTakeoffEvent_ProtoDefaultTypeInternal _USIM_AircraftTakeoffEvent_Proto_default_instance_;
class USIM_AssociEntityLaunchEvent_Proto;
class USIM_AssociEntityLaunchEvent_ProtoDefaultTypeInternal;
extern USIM_AssociEntityLaunchEvent_ProtoDefaultTypeInternal _USIM_AssociEntityLaunchEvent_Proto_default_instance_;
class USIM_AssociEntityRecoveryEvent_Proto;
class USIM_AssociEntityRecoveryEvent_ProtoDefaultTypeInternal;
extern USIM_AssociEntityRecoveryEvent_ProtoDefaultTypeInternal _USIM_AssociEntityRecoveryEvent_Proto_default_instance_;
class USIM_BattleResultEvent_Proto;
class USIM_BattleResultEvent_ProtoDefaultTypeInternal;
extern USIM_BattleResultEvent_ProtoDefaultTypeInternal _USIM_BattleResultEvent_Proto_default_instance_;
class USIM_BuoyReleaseEvent_Proto;
class USIM_BuoyReleaseEvent_ProtoDefaultTypeInternal;
extern USIM_BuoyReleaseEvent_ProtoDefaultTypeInternal _USIM_BuoyReleaseEvent_Proto_default_instance_;
class USIM_ChargeInfo_Proto;
class USIM_ChargeInfo_ProtoDefaultTypeInternal;
extern USIM_ChargeInfo_ProtoDefaultTypeInternal _USIM_ChargeInfo_Proto_default_instance_;
class USIM_CircleBeam_Proto;
class USIM_CircleBeam_ProtoDefaultTypeInternal;
extern USIM_CircleBeam_ProtoDefaultTypeInternal _USIM_CircleBeam_Proto_default_instance_;
class USIM_CommandControlEvent_Proto;
class USIM_CommandControlEvent_ProtoDefaultTypeInternal;
extern USIM_CommandControlEvent_ProtoDefaultTypeInternal _USIM_CommandControlEvent_Proto_default_instance_;
class USIM_CommandStructInfo_Proto;
class USIM_CommandStructInfo_ProtoDefaultTypeInternal;
extern USIM_CommandStructInfo_ProtoDefaultTypeInternal _USIM_CommandStructInfo_Proto_default_instance_;
class USIM_CommandTaskCompleted_Proto;
class USIM_CommandTaskCompleted_ProtoDefaultTypeInternal;
extern USIM_CommandTaskCompleted_ProtoDefaultTypeInternal _USIM_CommandTaskCompleted_Proto_default_instance_;
class USIM_CommunicationEvent_Proto;
class USIM_CommunicationEvent_ProtoDefaultTypeInternal;
extern USIM_CommunicationEvent_ProtoDefaultTypeInternal _USIM_CommunicationEvent_Proto_default_instance_;
class USIM_ConeBeam_Proto;
class USIM_ConeBeam_ProtoDefaultTypeInternal;
extern USIM_ConeBeam_ProtoDefaultTypeInternal _USIM_ConeBeam_Proto_default_instance_;
class USIM_CylinderBeam_Proto;
class USIM_CylinderBeam_ProtoDefaultTypeInternal;
extern USIM_CylinderBeam_ProtoDefaultTypeInternal _USIM_CylinderBeam_Proto_default_instance_;
class USIM_DamageEvent_Proto;
class USIM_DamageEvent_ProtoDefaultTypeInternal;
extern USIM_DamageEvent_ProtoDefaultTypeInternal _USIM_DamageEvent_Proto_default_instance_;
class USIM_DecoyLaunchEvent_Proto;
class USIM_DecoyLaunchEvent_ProtoDefaultTypeInternal;
extern USIM_DecoyLaunchEvent_ProtoDefaultTypeInternal _USIM_DecoyLaunchEvent_Proto_default_instance_;
class USIM_DetectionEvent_Proto;
class USIM_DetectionEvent_ProtoDefaultTypeInternal;
extern USIM_DetectionEvent_ProtoDefaultTypeInternal _USIM_DetectionEvent_Proto_default_instance_;
class USIM_Detection_Proto;
class USIM_Detection_ProtoDefaultTypeInternal;
extern USIM_Detection_ProtoDefaultTypeInternal _USIM_Detection_Proto_default_instance_;
class USIM_DyamicCycle_Proto;
class USIM_DyamicCycle_ProtoDefaultTypeInternal;
extern USIM_DyamicCycle_ProtoDefaultTypeInternal _USIM_DyamicCycle_Proto_default_instance_;
class USIM_ElectronicWarEvent_Proto;
class USIM_ElectronicWarEvent_ProtoDefaultTypeInternal;
extern USIM_ElectronicWarEvent_ProtoDefaultTypeInternal _USIM_ElectronicWarEvent_Proto_default_instance_;
class USIM_EquipmentInfo_Proto;
class USIM_EquipmentInfo_ProtoDefaultTypeInternal;
extern USIM_EquipmentInfo_ProtoDefaultTypeInternal _USIM_EquipmentInfo_Proto_default_instance_;
class USIM_EquipmentLoadInfo_Proto;
class USIM_EquipmentLoadInfo_ProtoDefaultTypeInternal;
extern USIM_EquipmentLoadInfo_ProtoDefaultTypeInternal _USIM_EquipmentLoadInfo_Proto_default_instance_;
class USIM_ForceDeliveryEvent_Proto;
class USIM_ForceDeliveryEvent_ProtoDefaultTypeInternal;
extern USIM_ForceDeliveryEvent_ProtoDefaultTypeInternal _USIM_ForceDeliveryEvent_Proto_default_instance_;
class USIM_ForceReusingEvent_Proto;
class USIM_ForceReusingEvent_ProtoDefaultTypeInternal;
extern USIM_ForceReusingEvent_ProtoDefaultTypeInternal _USIM_ForceReusingEvent_Proto_default_instance_;
class USIM_FusionEvent_Proto;
class USIM_FusionEvent_ProtoDefaultTypeInternal;
extern USIM_FusionEvent_ProtoDefaultTypeInternal _USIM_FusionEvent_Proto_default_instance_;
class USIM_Fusion_Proto;
class USIM_Fusion_ProtoDefaultTypeInternal;
extern USIM_Fusion_ProtoDefaultTypeInternal _USIM_Fusion_Proto_default_instance_;
class USIM_GraphOnoff_Proto;
class USIM_GraphOnoff_ProtoDefaultTypeInternal;
extern USIM_GraphOnoff_ProtoDefaultTypeInternal _USIM_GraphOnoff_Proto_default_instance_;
class USIM_IssuingTaskAssignment_Proto;
class USIM_IssuingTaskAssignment_ProtoDefaultTypeInternal;
extern USIM_IssuingTaskAssignment_ProtoDefaultTypeInternal _USIM_IssuingTaskAssignment_Proto_default_instance_;
class USIM_Line_Proto;
class USIM_Line_ProtoDefaultTypeInternal;
extern USIM_Line_ProtoDefaultTypeInternal _USIM_Line_Proto_default_instance_;
class USIM_LodisticsEvent_Protp;
class USIM_LodisticsEvent_ProtpDefaultTypeInternal;
extern USIM_LodisticsEvent_ProtpDefaultTypeInternal _USIM_LodisticsEvent_Protp_default_instance_;
class USIM_MSLng_Lat_Proto;
class USIM_MSLng_Lat_ProtoDefaultTypeInternal;
extern USIM_MSLng_Lat_ProtoDefaultTypeInternal _USIM_MSLng_Lat_Proto_default_instance_;
class USIM_PlatInfoMessage_Proto;
class USIM_PlatInfoMessage_ProtoDefaultTypeInternal;
extern USIM_PlatInfoMessage_ProtoDefaultTypeInternal _USIM_PlatInfoMessage_Proto_default_instance_;
class USIM_PyramidBeam_Proto;
class USIM_PyramidBeam_ProtoDefaultTypeInternal;
extern USIM_PyramidBeam_ProtoDefaultTypeInternal _USIM_PyramidBeam_Proto_default_instance_;
class USIM_SIMINFO_Proto;
class USIM_SIMINFO_ProtoDefaultTypeInternal;
extern USIM_SIMINFO_ProtoDefaultTypeInternal _USIM_SIMINFO_Proto_default_instance_;
class USIM_SensorStateEvent_Proto;
class USIM_SensorStateEvent_ProtoDefaultTypeInternal;
extern USIM_SensorStateEvent_ProtoDefaultTypeInternal _USIM_SensorStateEvent_Proto_default_instance_;
class USIM_SonarDetectInfo_Proto;
class USIM_SonarDetectInfo_ProtoDefaultTypeInternal;
extern USIM_SonarDetectInfo_ProtoDefaultTypeInternal _USIM_SonarDetectInfo_Proto_default_instance_;
class USIM_SonarDropReuseEvent_Proto;
class USIM_SonarDropReuseEvent_ProtoDefaultTypeInternal;
extern USIM_SonarDropReuseEvent_ProtoDefaultTypeInternal _USIM_SonarDropReuseEvent_Proto_default_instance_;
class USIM_SonobouyDetectInfo_Proto;
class USIM_SonobouyDetectInfo_ProtoDefaultTypeInternal;
extern USIM_SonobouyDetectInfo_ProtoDefaultTypeInternal _USIM_SonobouyDetectInfo_Proto_default_instance_;
class USIM_StartAssetRecoveryEvent_Proto;
class USIM_StartAssetRecoveryEvent_ProtoDefaultTypeInternal;
extern USIM_StartAssetRecoveryEvent_ProtoDefaultTypeInternal _USIM_StartAssetRecoveryEvent_Proto_default_instance_;
class USIM_TimeStepMessage_Proto;
class USIM_TimeStepMessage_ProtoDefaultTypeInternal;
extern USIM_TimeStepMessage_ProtoDefaultTypeInternal _USIM_TimeStepMessage_Proto_default_instance_;
class USIM_TrackAreaInfo_Proto;
class USIM_TrackAreaInfo_ProtoDefaultTypeInternal;
extern USIM_TrackAreaInfo_ProtoDefaultTypeInternal _USIM_TrackAreaInfo_Proto_default_instance_;
class USIM_TransferEquip_Proto;
class USIM_TransferEquip_ProtoDefaultTypeInternal;
extern USIM_TransferEquip_ProtoDefaultTypeInternal _USIM_TransferEquip_Proto_default_instance_;
class USIM_UUVStateMessage_Proto;
class USIM_UUVStateMessage_ProtoDefaultTypeInternal;
extern USIM_UUVStateMessage_ProtoDefaultTypeInternal _USIM_UUVStateMessage_Proto_default_instance_;
class USIM_WeaponLaunchEvent_Proto;
class USIM_WeaponLaunchEvent_ProtoDefaultTypeInternal;
extern USIM_WeaponLaunchEvent_ProtoDefaultTypeInternal _USIM_WeaponLaunchEvent_Proto_default_instance_;
class USIM_WeaponSystemEvent_Proto;
class USIM_WeaponSystemEvent_ProtoDefaultTypeInternal;
extern USIM_WeaponSystemEvent_ProtoDefaultTypeInternal _USIM_WeaponSystemEvent_Proto_default_instance_;
class USIM_WedgeBeam_Proto;
class USIM_WedgeBeam_ProtoDefaultTypeInternal;
extern USIM_WedgeBeam_ProtoDefaultTypeInternal _USIM_WedgeBeam_Proto_default_instance_;
class USIN_SphereBeam_Proto;
class USIN_SphereBeam_ProtoDefaultTypeInternal;
extern USIN_SphereBeam_ProtoDefaultTypeInternal _USIN_SphereBeam_Proto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::USIM_AMPFLASHING_Proto* Arena::CreateMaybeMessage<::USIM_AMPFLASHING_Proto>(Arena*);
template<> ::USIM_AMPHELITRANSFER_Proto* Arena::CreateMaybeMessage<::USIM_AMPHELITRANSFER_Proto>(Arena*);
template<> ::USIM_AMPLANDINGUNLOAD_Proto* Arena::CreateMaybeMessage<::USIM_AMPLANDINGUNLOAD_Proto>(Arena*);
template<> ::USIM_AMPTRANSFER_Proto* Arena::CreateMaybeMessage<::USIM_AMPTRANSFER_Proto>(Arena*);
template<> ::USIM_AircraftDeckAbortEvent_Proto* Arena::CreateMaybeMessage<::USIM_AircraftDeckAbortEvent_Proto>(Arena*);
template<> ::USIM_AircraftLandEvent_Proto* Arena::CreateMaybeMessage<::USIM_AircraftLandEvent_Proto>(Arena*);
template<> ::USIM_AircraftReturnEvent_Proto* Arena::CreateMaybeMessage<::USIM_AircraftReturnEvent_Proto>(Arena*);
template<> ::USIM_AircraftTakeoffEvent_Proto* Arena::CreateMaybeMessage<::USIM_AircraftTakeoffEvent_Proto>(Arena*);
template<> ::USIM_AssociEntityLaunchEvent_Proto* Arena::CreateMaybeMessage<::USIM_AssociEntityLaunchEvent_Proto>(Arena*);
template<> ::USIM_AssociEntityRecoveryEvent_Proto* Arena::CreateMaybeMessage<::USIM_AssociEntityRecoveryEvent_Proto>(Arena*);
template<> ::USIM_BattleResultEvent_Proto* Arena::CreateMaybeMessage<::USIM_BattleResultEvent_Proto>(Arena*);
template<> ::USIM_BuoyReleaseEvent_Proto* Arena::CreateMaybeMessage<::USIM_BuoyReleaseEvent_Proto>(Arena*);
template<> ::USIM_ChargeInfo_Proto* Arena::CreateMaybeMessage<::USIM_ChargeInfo_Proto>(Arena*);
template<> ::USIM_CircleBeam_Proto* Arena::CreateMaybeMessage<::USIM_CircleBeam_Proto>(Arena*);
template<> ::USIM_CommandControlEvent_Proto* Arena::CreateMaybeMessage<::USIM_CommandControlEvent_Proto>(Arena*);
template<> ::USIM_CommandStructInfo_Proto* Arena::CreateMaybeMessage<::USIM_CommandStructInfo_Proto>(Arena*);
template<> ::USIM_CommandTaskCompleted_Proto* Arena::CreateMaybeMessage<::USIM_CommandTaskCompleted_Proto>(Arena*);
template<> ::USIM_CommunicationEvent_Proto* Arena::CreateMaybeMessage<::USIM_CommunicationEvent_Proto>(Arena*);
template<> ::USIM_ConeBeam_Proto* Arena::CreateMaybeMessage<::USIM_ConeBeam_Proto>(Arena*);
template<> ::USIM_CylinderBeam_Proto* Arena::CreateMaybeMessage<::USIM_CylinderBeam_Proto>(Arena*);
template<> ::USIM_DamageEvent_Proto* Arena::CreateMaybeMessage<::USIM_DamageEvent_Proto>(Arena*);
template<> ::USIM_DecoyLaunchEvent_Proto* Arena::CreateMaybeMessage<::USIM_DecoyLaunchEvent_Proto>(Arena*);
template<> ::USIM_DetectionEvent_Proto* Arena::CreateMaybeMessage<::USIM_DetectionEvent_Proto>(Arena*);
template<> ::USIM_Detection_Proto* Arena::CreateMaybeMessage<::USIM_Detection_Proto>(Arena*);
template<> ::USIM_DyamicCycle_Proto* Arena::CreateMaybeMessage<::USIM_DyamicCycle_Proto>(Arena*);
template<> ::USIM_ElectronicWarEvent_Proto* Arena::CreateMaybeMessage<::USIM_ElectronicWarEvent_Proto>(Arena*);
template<> ::USIM_EquipmentInfo_Proto* Arena::CreateMaybeMessage<::USIM_EquipmentInfo_Proto>(Arena*);
template<> ::USIM_EquipmentLoadInfo_Proto* Arena::CreateMaybeMessage<::USIM_EquipmentLoadInfo_Proto>(Arena*);
template<> ::USIM_ForceDeliveryEvent_Proto* Arena::CreateMaybeMessage<::USIM_ForceDeliveryEvent_Proto>(Arena*);
template<> ::USIM_ForceReusingEvent_Proto* Arena::CreateMaybeMessage<::USIM_ForceReusingEvent_Proto>(Arena*);
template<> ::USIM_FusionEvent_Proto* Arena::CreateMaybeMessage<::USIM_FusionEvent_Proto>(Arena*);
template<> ::USIM_Fusion_Proto* Arena::CreateMaybeMessage<::USIM_Fusion_Proto>(Arena*);
template<> ::USIM_GraphOnoff_Proto* Arena::CreateMaybeMessage<::USIM_GraphOnoff_Proto>(Arena*);
template<> ::USIM_IssuingTaskAssignment_Proto* Arena::CreateMaybeMessage<::USIM_IssuingTaskAssignment_Proto>(Arena*);
template<> ::USIM_Line_Proto* Arena::CreateMaybeMessage<::USIM_Line_Proto>(Arena*);
template<> ::USIM_LodisticsEvent_Protp* Arena::CreateMaybeMessage<::USIM_LodisticsEvent_Protp>(Arena*);
template<> ::USIM_MSLng_Lat_Proto* Arena::CreateMaybeMessage<::USIM_MSLng_Lat_Proto>(Arena*);
template<> ::USIM_PlatInfoMessage_Proto* Arena::CreateMaybeMessage<::USIM_PlatInfoMessage_Proto>(Arena*);
template<> ::USIM_PyramidBeam_Proto* Arena::CreateMaybeMessage<::USIM_PyramidBeam_Proto>(Arena*);
template<> ::USIM_SIMINFO_Proto* Arena::CreateMaybeMessage<::USIM_SIMINFO_Proto>(Arena*);
template<> ::USIM_SensorStateEvent_Proto* Arena::CreateMaybeMessage<::USIM_SensorStateEvent_Proto>(Arena*);
template<> ::USIM_SonarDetectInfo_Proto* Arena::CreateMaybeMessage<::USIM_SonarDetectInfo_Proto>(Arena*);
template<> ::USIM_SonarDropReuseEvent_Proto* Arena::CreateMaybeMessage<::USIM_SonarDropReuseEvent_Proto>(Arena*);
template<> ::USIM_SonobouyDetectInfo_Proto* Arena::CreateMaybeMessage<::USIM_SonobouyDetectInfo_Proto>(Arena*);
template<> ::USIM_StartAssetRecoveryEvent_Proto* Arena::CreateMaybeMessage<::USIM_StartAssetRecoveryEvent_Proto>(Arena*);
template<> ::USIM_TimeStepMessage_Proto* Arena::CreateMaybeMessage<::USIM_TimeStepMessage_Proto>(Arena*);
template<> ::USIM_TrackAreaInfo_Proto* Arena::CreateMaybeMessage<::USIM_TrackAreaInfo_Proto>(Arena*);
template<> ::USIM_TransferEquip_Proto* Arena::CreateMaybeMessage<::USIM_TransferEquip_Proto>(Arena*);
template<> ::USIM_UUVStateMessage_Proto* Arena::CreateMaybeMessage<::USIM_UUVStateMessage_Proto>(Arena*);
template<> ::USIM_WeaponLaunchEvent_Proto* Arena::CreateMaybeMessage<::USIM_WeaponLaunchEvent_Proto>(Arena*);
template<> ::USIM_WeaponSystemEvent_Proto* Arena::CreateMaybeMessage<::USIM_WeaponSystemEvent_Proto>(Arena*);
template<> ::USIM_WedgeBeam_Proto* Arena::CreateMaybeMessage<::USIM_WedgeBeam_Proto>(Arena*);
template<> ::USIN_SphereBeam_Proto* Arena::CreateMaybeMessage<::USIN_SphereBeam_Proto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum USIM_Alliance_Proto : int {
  USIM_Alliance_UNKNOW = 0,
  USIM_RED = 1,
  USIM_BLUE = 2,
  USIM_WHITE = 3,
  USIM_GREEN = 4,
  USIM_PURPLE = 5,
  USIM_ORANGE = 6,
  USIM_YELLOW = 7,
  USIM_Alliance_Proto_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  USIM_Alliance_Proto_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool USIM_Alliance_Proto_IsValid(int value);
constexpr USIM_Alliance_Proto USIM_Alliance_Proto_MIN = USIM_Alliance_UNKNOW;
constexpr USIM_Alliance_Proto USIM_Alliance_Proto_MAX = USIM_YELLOW;
constexpr int USIM_Alliance_Proto_ARRAYSIZE = USIM_Alliance_Proto_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* USIM_Alliance_Proto_descriptor();
template<typename T>
inline const std::string& USIM_Alliance_Proto_Name(T enum_t_value) {
  static_assert(::std::is_same<T, USIM_Alliance_Proto>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function USIM_Alliance_Proto_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    USIM_Alliance_Proto_descriptor(), enum_t_value);
}
inline bool USIM_Alliance_Proto_Parse(
    const std::string& name, USIM_Alliance_Proto* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<USIM_Alliance_Proto>(
    USIM_Alliance_Proto_descriptor(), name, value);
}
// ===================================================================

class USIM_TimeStepMessage_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_TimeStepMessage_Proto) */ {
 public:
  inline USIM_TimeStepMessage_Proto() : USIM_TimeStepMessage_Proto(nullptr) {};
  virtual ~USIM_TimeStepMessage_Proto();

  USIM_TimeStepMessage_Proto(const USIM_TimeStepMessage_Proto& from);
  USIM_TimeStepMessage_Proto(USIM_TimeStepMessage_Proto&& from) noexcept
    : USIM_TimeStepMessage_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_TimeStepMessage_Proto& operator=(const USIM_TimeStepMessage_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_TimeStepMessage_Proto& operator=(USIM_TimeStepMessage_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_TimeStepMessage_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_TimeStepMessage_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_TimeStepMessage_Proto*>(
               &_USIM_TimeStepMessage_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(USIM_TimeStepMessage_Proto& a, USIM_TimeStepMessage_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_TimeStepMessage_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_TimeStepMessage_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_TimeStepMessage_Proto* New() const final {
    return CreateMaybeMessage<USIM_TimeStepMessage_Proto>(nullptr);
  }

  USIM_TimeStepMessage_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_TimeStepMessage_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_TimeStepMessage_Proto& from);
  void MergeFrom(const USIM_TimeStepMessage_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_TimeStepMessage_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_TimeStepMessage_Proto";
  }
  protected:
  explicit USIM_TimeStepMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kWYearFieldNumber = 2,
    kWMonthFieldNumber = 3,
    kWDayFieldNumber = 4,
    kWHourFieldNumber = 5,
    kWMiniteFieldNumber = 6,
    kWSencondFieldNumber = 7,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 wYear = 2;
  void clear_wyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 wyear() const;
  void set_wyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wyear() const;
  void _internal_set_wyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wMonth = 3;
  void clear_wmonth();
  ::PROTOBUF_NAMESPACE_ID::uint32 wmonth() const;
  void set_wmonth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wmonth() const;
  void _internal_set_wmonth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wDay = 4;
  void clear_wday();
  ::PROTOBUF_NAMESPACE_ID::uint32 wday() const;
  void set_wday(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wday() const;
  void _internal_set_wday(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wHour = 5;
  void clear_whour();
  ::PROTOBUF_NAMESPACE_ID::uint32 whour() const;
  void set_whour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_whour() const;
  void _internal_set_whour(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wMinite = 6;
  void clear_wminite();
  ::PROTOBUF_NAMESPACE_ID::uint32 wminite() const;
  void set_wminite(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wminite() const;
  void _internal_set_wminite(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 wSencond = 7;
  void clear_wsencond();
  ::PROTOBUF_NAMESPACE_ID::uint32 wsencond() const;
  void set_wsencond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wsencond() const;
  void _internal_set_wsencond(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_TimeStepMessage_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wmonth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wday_;
  ::PROTOBUF_NAMESPACE_ID::uint32 whour_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wminite_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wsencond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_SIMINFO_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_SIMINFO_Proto) */ {
 public:
  inline USIM_SIMINFO_Proto() : USIM_SIMINFO_Proto(nullptr) {};
  virtual ~USIM_SIMINFO_Proto();

  USIM_SIMINFO_Proto(const USIM_SIMINFO_Proto& from);
  USIM_SIMINFO_Proto(USIM_SIMINFO_Proto&& from) noexcept
    : USIM_SIMINFO_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_SIMINFO_Proto& operator=(const USIM_SIMINFO_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_SIMINFO_Proto& operator=(USIM_SIMINFO_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_SIMINFO_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_SIMINFO_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_SIMINFO_Proto*>(
               &_USIM_SIMINFO_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(USIM_SIMINFO_Proto& a, USIM_SIMINFO_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_SIMINFO_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_SIMINFO_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_SIMINFO_Proto* New() const final {
    return CreateMaybeMessage<USIM_SIMINFO_Proto>(nullptr);
  }

  USIM_SIMINFO_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_SIMINFO_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_SIMINFO_Proto& from);
  void MergeFrom(const USIM_SIMINFO_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_SIMINFO_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_SIMINFO_Proto";
  }
  protected:
  explicit USIM_SIMINFO_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSScinarioNameFieldNumber = 2,
    kUSimStatusFieldNumber = 1,
  };
  // bytes sScinarioName = 2;
  void clear_sscinarioname();
  const std::string& sscinarioname() const;
  void set_sscinarioname(const std::string& value);
  void set_sscinarioname(std::string&& value);
  void set_sscinarioname(const char* value);
  void set_sscinarioname(const void* value, size_t size);
  std::string* mutable_sscinarioname();
  std::string* release_sscinarioname();
  void set_allocated_sscinarioname(std::string* sscinarioname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sscinarioname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sscinarioname(
      std::string* sscinarioname);
  private:
  const std::string& _internal_sscinarioname() const;
  void _internal_set_sscinarioname(const std::string& value);
  std::string* _internal_mutable_sscinarioname();
  public:

  // uint32 uSimStatus = 1;
  void clear_usimstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 usimstatus() const;
  void set_usimstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usimstatus() const;
  void _internal_set_usimstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_SIMINFO_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sscinarioname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usimstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CommandStructInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CommandStructInfo_Proto) */ {
 public:
  inline USIM_CommandStructInfo_Proto() : USIM_CommandStructInfo_Proto(nullptr) {};
  virtual ~USIM_CommandStructInfo_Proto();

  USIM_CommandStructInfo_Proto(const USIM_CommandStructInfo_Proto& from);
  USIM_CommandStructInfo_Proto(USIM_CommandStructInfo_Proto&& from) noexcept
    : USIM_CommandStructInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CommandStructInfo_Proto& operator=(const USIM_CommandStructInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CommandStructInfo_Proto& operator=(USIM_CommandStructInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CommandStructInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CommandStructInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CommandStructInfo_Proto*>(
               &_USIM_CommandStructInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(USIM_CommandStructInfo_Proto& a, USIM_CommandStructInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CommandStructInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CommandStructInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CommandStructInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_CommandStructInfo_Proto>(nullptr);
  }

  USIM_CommandStructInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CommandStructInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CommandStructInfo_Proto& from);
  void MergeFrom(const USIM_CommandStructInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CommandStructInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CommandStructInfo_Proto";
  }
  protected:
  explicit USIM_CommandStructInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSNodeNameFieldNumber = 3,
    kSParentNodeNameFieldNumber = 4,
    kSCenterNameFieldNumber = 5,
    kUAllianceFieldNumber = 1,
    kUTypeFieldNumber = 2,
  };
  // bytes sNodeName = 3;
  void clear_snodename();
  const std::string& snodename() const;
  void set_snodename(const std::string& value);
  void set_snodename(std::string&& value);
  void set_snodename(const char* value);
  void set_snodename(const void* value, size_t size);
  std::string* mutable_snodename();
  std::string* release_snodename();
  void set_allocated_snodename(std::string* snodename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snodename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snodename(
      std::string* snodename);
  private:
  const std::string& _internal_snodename() const;
  void _internal_set_snodename(const std::string& value);
  std::string* _internal_mutable_snodename();
  public:

  // bytes sParentNodeName = 4;
  void clear_sparentnodename();
  const std::string& sparentnodename() const;
  void set_sparentnodename(const std::string& value);
  void set_sparentnodename(std::string&& value);
  void set_sparentnodename(const char* value);
  void set_sparentnodename(const void* value, size_t size);
  std::string* mutable_sparentnodename();
  std::string* release_sparentnodename();
  void set_allocated_sparentnodename(std::string* sparentnodename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sparentnodename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sparentnodename(
      std::string* sparentnodename);
  private:
  const std::string& _internal_sparentnodename() const;
  void _internal_set_sparentnodename(const std::string& value);
  std::string* _internal_mutable_sparentnodename();
  public:

  // bytes sCenterName = 5;
  void clear_scentername();
  const std::string& scentername() const;
  void set_scentername(const std::string& value);
  void set_scentername(std::string&& value);
  void set_scentername(const char* value);
  void set_scentername(const void* value, size_t size);
  std::string* mutable_scentername();
  std::string* release_scentername();
  void set_allocated_scentername(std::string* scentername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scentername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scentername(
      std::string* scentername);
  private:
  const std::string& _internal_scentername() const;
  void _internal_set_scentername(const std::string& value);
  std::string* _internal_mutable_scentername();
  public:

  // .USIM_Alliance_Proto uAlliance = 1;
  void clear_ualliance();
  ::USIM_Alliance_Proto ualliance() const;
  void set_ualliance(::USIM_Alliance_Proto value);
  private:
  ::USIM_Alliance_Proto _internal_ualliance() const;
  void _internal_set_ualliance(::USIM_Alliance_Proto value);
  public:

  // uint32 uType = 2;
  void clear_utype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utype() const;
  void set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utype() const;
  void _internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CommandStructInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sparentnodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scentername_;
  int ualliance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_PlatInfoMessage_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_PlatInfoMessage_Proto) */ {
 public:
  inline USIM_PlatInfoMessage_Proto() : USIM_PlatInfoMessage_Proto(nullptr) {};
  virtual ~USIM_PlatInfoMessage_Proto();

  USIM_PlatInfoMessage_Proto(const USIM_PlatInfoMessage_Proto& from);
  USIM_PlatInfoMessage_Proto(USIM_PlatInfoMessage_Proto&& from) noexcept
    : USIM_PlatInfoMessage_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_PlatInfoMessage_Proto& operator=(const USIM_PlatInfoMessage_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_PlatInfoMessage_Proto& operator=(USIM_PlatInfoMessage_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_PlatInfoMessage_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_PlatInfoMessage_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_PlatInfoMessage_Proto*>(
               &_USIM_PlatInfoMessage_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(USIM_PlatInfoMessage_Proto& a, USIM_PlatInfoMessage_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_PlatInfoMessage_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_PlatInfoMessage_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_PlatInfoMessage_Proto* New() const final {
    return CreateMaybeMessage<USIM_PlatInfoMessage_Proto>(nullptr);
  }

  USIM_PlatInfoMessage_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_PlatInfoMessage_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_PlatInfoMessage_Proto& from);
  void MergeFrom(const USIM_PlatInfoMessage_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_PlatInfoMessage_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_PlatInfoMessage_Proto";
  }
  protected:
  explicit USIM_PlatInfoMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSPlatNameFieldNumber = 2,
    kSCommandNodeNameFieldNumber = 4,
    kSTypeFieldNumber = 11,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 3,
    kDfFuelFieldNumber = 5,
    kDfLifeFieldNumber = 6,
    kUAllianceFieldNumber = 7,
    kUColorFieldNumber = 8,
    kUKindFieldNumber = 9,
    kUClassFieldNumber = 10,
    kDfLonFieldNumber = 12,
    kDfLatFieldNumber = 13,
    kDfAltFieldNumber = 14,
    kDfHeadingFieldNumber = 15,
    kDfVxFieldNumber = 16,
    kDfVyFieldNumber = 17,
    kDfFieldNumber = 18,
    kDfyawFieldNumber = 19,
    kPitchFieldNumber = 20,
    kRollFieldNumber = 21,
    kDfSwayingFieldNumber = 22,
    kSurgingFieldNumber = 23,
    kHeavingFieldNumber = 24,
  };
  // bytes sPlatName = 2;
  void clear_splatname();
  const std::string& splatname() const;
  void set_splatname(const std::string& value);
  void set_splatname(std::string&& value);
  void set_splatname(const char* value);
  void set_splatname(const void* value, size_t size);
  std::string* mutable_splatname();
  std::string* release_splatname();
  void set_allocated_splatname(std::string* splatname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_splatname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_splatname(
      std::string* splatname);
  private:
  const std::string& _internal_splatname() const;
  void _internal_set_splatname(const std::string& value);
  std::string* _internal_mutable_splatname();
  public:

  // bytes sCommandNodeName = 4;
  void clear_scommandnodename();
  const std::string& scommandnodename() const;
  void set_scommandnodename(const std::string& value);
  void set_scommandnodename(std::string&& value);
  void set_scommandnodename(const char* value);
  void set_scommandnodename(const void* value, size_t size);
  std::string* mutable_scommandnodename();
  std::string* release_scommandnodename();
  void set_allocated_scommandnodename(std::string* scommandnodename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scommandnodename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scommandnodename(
      std::string* scommandnodename);
  private:
  const std::string& _internal_scommandnodename() const;
  void _internal_set_scommandnodename(const std::string& value);
  std::string* _internal_mutable_scommandnodename();
  public:

  // bytes sType = 11;
  void clear_stype();
  const std::string& stype() const;
  void set_stype(const std::string& value);
  void set_stype(std::string&& value);
  void set_stype(const char* value);
  void set_stype(const void* value, size_t size);
  std::string* mutable_stype();
  std::string* release_stype();
  void set_allocated_stype(std::string* stype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stype(
      std::string* stype);
  private:
  const std::string& _internal_stype() const;
  void _internal_set_stype(const std::string& value);
  std::string* _internal_mutable_stype();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float dfFuel = 5;
  void clear_dffuel();
  float dffuel() const;
  void set_dffuel(float value);
  private:
  float _internal_dffuel() const;
  void _internal_set_dffuel(float value);
  public:

  // float dfLife = 6;
  void clear_dflife();
  float dflife() const;
  void set_dflife(float value);
  private:
  float _internal_dflife() const;
  void _internal_set_dflife(float value);
  public:

  // .USIM_Alliance_Proto uAlliance = 7;
  void clear_ualliance();
  ::USIM_Alliance_Proto ualliance() const;
  void set_ualliance(::USIM_Alliance_Proto value);
  private:
  ::USIM_Alliance_Proto _internal_ualliance() const;
  void _internal_set_ualliance(::USIM_Alliance_Proto value);
  public:

  // uint64 uColor = 8;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 uKind = 9;
  void clear_ukind();
  ::PROTOBUF_NAMESPACE_ID::uint32 ukind() const;
  void set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ukind() const;
  void _internal_set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uClass = 10;
  void clear_uclass();
  ::PROTOBUF_NAMESPACE_ID::uint32 uclass() const;
  void set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uclass() const;
  void _internal_set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfLon = 12;
  void clear_dflon();
  double dflon() const;
  void set_dflon(double value);
  private:
  double _internal_dflon() const;
  void _internal_set_dflon(double value);
  public:

  // double dfLat = 13;
  void clear_dflat();
  double dflat() const;
  void set_dflat(double value);
  private:
  double _internal_dflat() const;
  void _internal_set_dflat(double value);
  public:

  // double dfAlt = 14;
  void clear_dfalt();
  double dfalt() const;
  void set_dfalt(double value);
  private:
  double _internal_dfalt() const;
  void _internal_set_dfalt(double value);
  public:

  // float dfHeading = 15;
  void clear_dfheading();
  float dfheading() const;
  void set_dfheading(float value);
  private:
  float _internal_dfheading() const;
  void _internal_set_dfheading(float value);
  public:

  // float dfVx = 16;
  void clear_dfvx();
  float dfvx() const;
  void set_dfvx(float value);
  private:
  float _internal_dfvx() const;
  void _internal_set_dfvx(float value);
  public:

  // float dfVy = 17;
  void clear_dfvy();
  float dfvy() const;
  void set_dfvy(float value);
  private:
  float _internal_dfvy() const;
  void _internal_set_dfvy(float value);
  public:

  // float df = 18;
  void clear_df();
  float df() const;
  void set_df(float value);
  private:
  float _internal_df() const;
  void _internal_set_df(float value);
  public:

  // float dfyaw = 19;
  void clear_dfyaw();
  float dfyaw() const;
  void set_dfyaw(float value);
  private:
  float _internal_dfyaw() const;
  void _internal_set_dfyaw(float value);
  public:

  // float pitch = 20;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float roll = 21;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float dfSwaying = 22;
  void clear_dfswaying();
  float dfswaying() const;
  void set_dfswaying(float value);
  private:
  float _internal_dfswaying() const;
  void _internal_set_dfswaying(float value);
  public:

  // float surging = 23;
  void clear_surging();
  float surging() const;
  void set_surging(float value);
  private:
  float _internal_surging() const;
  void _internal_set_surging(float value);
  public:

  // float heaving = 24;
  void clear_heaving();
  float heaving() const;
  void set_heaving(float value);
  private:
  float _internal_heaving() const;
  void _internal_set_heaving(float value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_PlatInfoMessage_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splatname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scommandnodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stype_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  float dffuel_;
  float dflife_;
  int ualliance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ukind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uclass_;
  double dflon_;
  double dflat_;
  double dfalt_;
  float dfheading_;
  float dfvx_;
  float dfvy_;
  float df_;
  float dfyaw_;
  float pitch_;
  float roll_;
  float dfswaying_;
  float surging_;
  float heaving_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_EquipmentInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_EquipmentInfo_Proto) */ {
 public:
  inline USIM_EquipmentInfo_Proto() : USIM_EquipmentInfo_Proto(nullptr) {};
  virtual ~USIM_EquipmentInfo_Proto();

  USIM_EquipmentInfo_Proto(const USIM_EquipmentInfo_Proto& from);
  USIM_EquipmentInfo_Proto(USIM_EquipmentInfo_Proto&& from) noexcept
    : USIM_EquipmentInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_EquipmentInfo_Proto& operator=(const USIM_EquipmentInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_EquipmentInfo_Proto& operator=(USIM_EquipmentInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_EquipmentInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_EquipmentInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_EquipmentInfo_Proto*>(
               &_USIM_EquipmentInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(USIM_EquipmentInfo_Proto& a, USIM_EquipmentInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_EquipmentInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_EquipmentInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_EquipmentInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_EquipmentInfo_Proto>(nullptr);
  }

  USIM_EquipmentInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_EquipmentInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_EquipmentInfo_Proto& from);
  void MergeFrom(const USIM_EquipmentInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_EquipmentInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_EquipmentInfo_Proto";
  }
  protected:
  explicit USIM_EquipmentInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSEquipmentNameFieldNumber = 1,
    kSTargetTypeFieldNumber = 10,
    kDfMaxRangeFieldNumber = 2,
    kDfMinRangeFieldNumber = 3,
    kDfCenterHeadingFieldNumber = 5,
    kUWeaponNumFieldNumber = 4,
    kIsRelativeFieldNumber = 6,
    kBAliveFieldNumber = 9,
    kDfWidthBFieldNumber = 7,
    kDfMaxElevationFieldNumber = 11,
    kDfMinElevationFieldNumber = 12,
    kUBeamTypeFieldNumber = 8,
  };
  // bytes sEquipmentName = 1;
  void clear_sequipmentname();
  const std::string& sequipmentname() const;
  void set_sequipmentname(const std::string& value);
  void set_sequipmentname(std::string&& value);
  void set_sequipmentname(const char* value);
  void set_sequipmentname(const void* value, size_t size);
  std::string* mutable_sequipmentname();
  std::string* release_sequipmentname();
  void set_allocated_sequipmentname(std::string* sequipmentname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sequipmentname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sequipmentname(
      std::string* sequipmentname);
  private:
  const std::string& _internal_sequipmentname() const;
  void _internal_set_sequipmentname(const std::string& value);
  std::string* _internal_mutable_sequipmentname();
  public:

  // bytes sTargetType = 10;
  void clear_stargettype();
  const std::string& stargettype() const;
  void set_stargettype(const std::string& value);
  void set_stargettype(std::string&& value);
  void set_stargettype(const char* value);
  void set_stargettype(const void* value, size_t size);
  std::string* mutable_stargettype();
  std::string* release_stargettype();
  void set_allocated_stargettype(std::string* stargettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stargettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stargettype(
      std::string* stargettype);
  private:
  const std::string& _internal_stargettype() const;
  void _internal_set_stargettype(const std::string& value);
  std::string* _internal_mutable_stargettype();
  public:

  // double dfMaxRange = 2;
  void clear_dfmaxrange();
  double dfmaxrange() const;
  void set_dfmaxrange(double value);
  private:
  double _internal_dfmaxrange() const;
  void _internal_set_dfmaxrange(double value);
  public:

  // double dfMinRange = 3;
  void clear_dfminrange();
  double dfminrange() const;
  void set_dfminrange(double value);
  private:
  double _internal_dfminrange() const;
  void _internal_set_dfminrange(double value);
  public:

  // double dfCenterHeading = 5;
  void clear_dfcenterheading();
  double dfcenterheading() const;
  void set_dfcenterheading(double value);
  private:
  double _internal_dfcenterheading() const;
  void _internal_set_dfcenterheading(double value);
  public:

  // uint32 uWeaponNum = 4;
  void clear_uweaponnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponnum() const;
  void set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uweaponnum() const;
  void _internal_set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isRelative = 6;
  void clear_isrelative();
  bool isrelative() const;
  void set_isrelative(bool value);
  private:
  bool _internal_isrelative() const;
  void _internal_set_isrelative(bool value);
  public:

  // bool bAlive = 9;
  void clear_balive();
  bool balive() const;
  void set_balive(bool value);
  private:
  bool _internal_balive() const;
  void _internal_set_balive(bool value);
  public:

  // double dfWidthB = 7;
  void clear_dfwidthb();
  double dfwidthb() const;
  void set_dfwidthb(double value);
  private:
  double _internal_dfwidthb() const;
  void _internal_set_dfwidthb(double value);
  public:

  // double dfMaxElevation = 11;
  void clear_dfmaxelevation();
  double dfmaxelevation() const;
  void set_dfmaxelevation(double value);
  private:
  double _internal_dfmaxelevation() const;
  void _internal_set_dfmaxelevation(double value);
  public:

  // double dfMinElevation = 12;
  void clear_dfminelevation();
  double dfminelevation() const;
  void set_dfminelevation(double value);
  private:
  double _internal_dfminelevation() const;
  void _internal_set_dfminelevation(double value);
  public:

  // uint32 uBeamType = 8;
  void clear_ubeamtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ubeamtype() const;
  void set_ubeamtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ubeamtype() const;
  void _internal_set_ubeamtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_EquipmentInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequipmentname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stargettype_;
  double dfmaxrange_;
  double dfminrange_;
  double dfcenterheading_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponnum_;
  bool isrelative_;
  bool balive_;
  double dfwidthb_;
  double dfmaxelevation_;
  double dfminelevation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ubeamtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_EquipmentLoadInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_EquipmentLoadInfo_Proto) */ {
 public:
  inline USIM_EquipmentLoadInfo_Proto() : USIM_EquipmentLoadInfo_Proto(nullptr) {};
  virtual ~USIM_EquipmentLoadInfo_Proto();

  USIM_EquipmentLoadInfo_Proto(const USIM_EquipmentLoadInfo_Proto& from);
  USIM_EquipmentLoadInfo_Proto(USIM_EquipmentLoadInfo_Proto&& from) noexcept
    : USIM_EquipmentLoadInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_EquipmentLoadInfo_Proto& operator=(const USIM_EquipmentLoadInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_EquipmentLoadInfo_Proto& operator=(USIM_EquipmentLoadInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_EquipmentLoadInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_EquipmentLoadInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_EquipmentLoadInfo_Proto*>(
               &_USIM_EquipmentLoadInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(USIM_EquipmentLoadInfo_Proto& a, USIM_EquipmentLoadInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_EquipmentLoadInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_EquipmentLoadInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_EquipmentLoadInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_EquipmentLoadInfo_Proto>(nullptr);
  }

  USIM_EquipmentLoadInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_EquipmentLoadInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_EquipmentLoadInfo_Proto& from);
  void MergeFrom(const USIM_EquipmentLoadInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_EquipmentLoadInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_EquipmentLoadInfo_Proto";
  }
  protected:
  explicit USIM_EquipmentLoadInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecEquipmentInfoListFieldNumber = 4,
    kSplatnameFieldNumber = 2,
    kUIDFieldNumber = 1,
    kUEquipmentTypeFieldNumber = 3,
  };
  // repeated .USIM_EquipmentInfo_Proto vecEquipmentInfoList = 4;
  int vecequipmentinfolist_size() const;
  private:
  int _internal_vecequipmentinfolist_size() const;
  public:
  void clear_vecequipmentinfolist();
  ::USIM_EquipmentInfo_Proto* mutable_vecequipmentinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_EquipmentInfo_Proto >*
      mutable_vecequipmentinfolist();
  private:
  const ::USIM_EquipmentInfo_Proto& _internal_vecequipmentinfolist(int index) const;
  ::USIM_EquipmentInfo_Proto* _internal_add_vecequipmentinfolist();
  public:
  const ::USIM_EquipmentInfo_Proto& vecequipmentinfolist(int index) const;
  ::USIM_EquipmentInfo_Proto* add_vecequipmentinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_EquipmentInfo_Proto >&
      vecequipmentinfolist() const;

  // bytes splatname = 2;
  void clear_splatname();
  const std::string& splatname() const;
  void set_splatname(const std::string& value);
  void set_splatname(std::string&& value);
  void set_splatname(const char* value);
  void set_splatname(const void* value, size_t size);
  std::string* mutable_splatname();
  std::string* release_splatname();
  void set_allocated_splatname(std::string* splatname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_splatname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_splatname(
      std::string* splatname);
  private:
  const std::string& _internal_splatname() const;
  void _internal_set_splatname(const std::string& value);
  std::string* _internal_mutable_splatname();
  public:

  // uint32 uID = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEquipmentType = 3;
  void clear_uequipmenttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 uequipmenttype() const;
  void set_uequipmenttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uequipmenttype() const;
  void _internal_set_uequipmenttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_EquipmentLoadInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_EquipmentInfo_Proto > vecequipmentinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splatname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uequipmenttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_Detection_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_Detection_Proto) */ {
 public:
  inline USIM_Detection_Proto() : USIM_Detection_Proto(nullptr) {};
  virtual ~USIM_Detection_Proto();

  USIM_Detection_Proto(const USIM_Detection_Proto& from);
  USIM_Detection_Proto(USIM_Detection_Proto&& from) noexcept
    : USIM_Detection_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_Detection_Proto& operator=(const USIM_Detection_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_Detection_Proto& operator=(USIM_Detection_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_Detection_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_Detection_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_Detection_Proto*>(
               &_USIM_Detection_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(USIM_Detection_Proto& a, USIM_Detection_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_Detection_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_Detection_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_Detection_Proto* New() const final {
    return CreateMaybeMessage<USIM_Detection_Proto>(nullptr);
  }

  USIM_Detection_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_Detection_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_Detection_Proto& from);
  void MergeFrom(const USIM_Detection_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_Detection_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_Detection_Proto";
  }
  protected:
  explicit USIM_Detection_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCSensorNameFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 4,
    kUTargetNumberFieldNumber = 5,
    kUAttributeFieldNumber = 6,
    kUKindFieldNumber = 7,
    kUClassFieldNumber = 8,
    kDfDistanceFieldNumber = 10,
    kDfOrientationFieldNumber = 11,
    kUTypeFieldNumber = 9,
  };
  // bytes cSensorName = 3;
  void clear_csensorname();
  const std::string& csensorname() const;
  void set_csensorname(const std::string& value);
  void set_csensorname(std::string&& value);
  void set_csensorname(const char* value);
  void set_csensorname(const void* value, size_t size);
  std::string* mutable_csensorname();
  std::string* release_csensorname();
  void set_allocated_csensorname(std::string* csensorname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_csensorname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_csensorname(
      std::string* csensorname);
  private:
  const std::string& _internal_csensorname() const;
  void _internal_set_csensorname(const std::string& value);
  std::string* _internal_mutable_csensorname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 4;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetNumber = 5;
  void clear_utargetnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetnumber() const;
  void set_utargetnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetnumber() const;
  void _internal_set_utargetnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uAttribute = 6;
  void clear_uattribute();
  ::PROTOBUF_NAMESPACE_ID::uint32 uattribute() const;
  void set_uattribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uattribute() const;
  void _internal_set_uattribute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uKind = 7;
  void clear_ukind();
  ::PROTOBUF_NAMESPACE_ID::uint32 ukind() const;
  void set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ukind() const;
  void _internal_set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uClass = 8;
  void clear_uclass();
  ::PROTOBUF_NAMESPACE_ID::uint32 uclass() const;
  void set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uclass() const;
  void _internal_set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfDistance = 10;
  void clear_dfdistance();
  double dfdistance() const;
  void set_dfdistance(double value);
  private:
  double _internal_dfdistance() const;
  void _internal_set_dfdistance(double value);
  public:

  // double dfOrientation = 11;
  void clear_dforientation();
  double dforientation() const;
  void set_dforientation(double value);
  private:
  double _internal_dforientation() const;
  void _internal_set_dforientation(double value);
  public:

  // uint32 uType = 9;
  void clear_utype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utype() const;
  void set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utype() const;
  void _internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_Detection_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csensorname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uattribute_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ukind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uclass_;
  double dfdistance_;
  double dforientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_Fusion_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_Fusion_Proto) */ {
 public:
  inline USIM_Fusion_Proto() : USIM_Fusion_Proto(nullptr) {};
  virtual ~USIM_Fusion_Proto();

  USIM_Fusion_Proto(const USIM_Fusion_Proto& from);
  USIM_Fusion_Proto(USIM_Fusion_Proto&& from) noexcept
    : USIM_Fusion_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_Fusion_Proto& operator=(const USIM_Fusion_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_Fusion_Proto& operator=(USIM_Fusion_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_Fusion_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_Fusion_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_Fusion_Proto*>(
               &_USIM_Fusion_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(USIM_Fusion_Proto& a, USIM_Fusion_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_Fusion_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_Fusion_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_Fusion_Proto* New() const final {
    return CreateMaybeMessage<USIM_Fusion_Proto>(nullptr);
  }

  USIM_Fusion_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_Fusion_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_Fusion_Proto& from);
  void MergeFrom(const USIM_Fusion_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_Fusion_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_Fusion_Proto";
  }
  protected:
  explicit USIM_Fusion_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTrackNumberFieldNumber = 3,
    kUTargetAffinityFieldNumber = 4,
    kCTargetTypeFieldNumber = 5,
    kDfTargetLonFieldNumber = 6,
    kDfTargetLatFieldNumber = 7,
    kDfTargetAltFieldNumber = 8,
    kDfTargetHeadingFieldNumber = 9,
    kDfTargetSpeedFieldNumber = 10,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTrackNumber = 3;
  void clear_utracknumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 utracknumber() const;
  void set_utracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utracknumber() const;
  void _internal_set_utracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetAffinity = 4;
  void clear_utargetaffinity();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetaffinity() const;
  void set_utargetaffinity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetaffinity() const;
  void _internal_set_utargetaffinity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cTargetType = 5;
  void clear_ctargettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctargettype() const;
  void set_ctargettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctargettype() const;
  void _internal_set_ctargettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfTargetLon = 6;
  void clear_dftargetlon();
  double dftargetlon() const;
  void set_dftargetlon(double value);
  private:
  double _internal_dftargetlon() const;
  void _internal_set_dftargetlon(double value);
  public:

  // double dfTargetLat = 7;
  void clear_dftargetlat();
  double dftargetlat() const;
  void set_dftargetlat(double value);
  private:
  double _internal_dftargetlat() const;
  void _internal_set_dftargetlat(double value);
  public:

  // double dfTargetAlt = 8;
  void clear_dftargetalt();
  double dftargetalt() const;
  void set_dftargetalt(double value);
  private:
  double _internal_dftargetalt() const;
  void _internal_set_dftargetalt(double value);
  public:

  // double dfTargetHeading = 9;
  void clear_dftargetheading();
  double dftargetheading() const;
  void set_dftargetheading(double value);
  private:
  double _internal_dftargetheading() const;
  void _internal_set_dftargetheading(double value);
  public:

  // double dfTargetSpeed = 10;
  void clear_dftargetspeed();
  double dftargetspeed() const;
  void set_dftargetspeed(double value);
  private:
  double _internal_dftargetspeed() const;
  void _internal_set_dftargetspeed(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_Fusion_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utracknumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetaffinity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctargettype_;
  double dftargetlon_;
  double dftargetlat_;
  double dftargetalt_;
  double dftargetheading_;
  double dftargetspeed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_DetectionEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_DetectionEvent_Proto) */ {
 public:
  inline USIM_DetectionEvent_Proto() : USIM_DetectionEvent_Proto(nullptr) {};
  virtual ~USIM_DetectionEvent_Proto();

  USIM_DetectionEvent_Proto(const USIM_DetectionEvent_Proto& from);
  USIM_DetectionEvent_Proto(USIM_DetectionEvent_Proto&& from) noexcept
    : USIM_DetectionEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_DetectionEvent_Proto& operator=(const USIM_DetectionEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_DetectionEvent_Proto& operator=(USIM_DetectionEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_DetectionEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_DetectionEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_DetectionEvent_Proto*>(
               &_USIM_DetectionEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(USIM_DetectionEvent_Proto& a, USIM_DetectionEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_DetectionEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_DetectionEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_DetectionEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_DetectionEvent_Proto>(nullptr);
  }

  USIM_DetectionEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_DetectionEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_DetectionEvent_Proto& from);
  void MergeFrom(const USIM_DetectionEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_DetectionEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_DetectionEvent_Proto";
  }
  protected:
  explicit USIM_DetectionEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCSensorNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUPlatIDFieldNumber = 2,
    kUTargetPlatIDFieldNumber = 3,
    kUEventTypeFieldNumber = 5,
  };
  // bytes cSensorName = 4;
  void clear_csensorname();
  const std::string& csensorname() const;
  void set_csensorname(const std::string& value);
  void set_csensorname(std::string&& value);
  void set_csensorname(const char* value);
  void set_csensorname(const void* value, size_t size);
  std::string* mutable_csensorname();
  std::string* release_csensorname();
  void set_allocated_csensorname(std::string* csensorname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_csensorname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_csensorname(
      std::string* csensorname);
  private:
  const std::string& _internal_csensorname() const;
  void _internal_set_csensorname(const std::string& value);
  std::string* _internal_mutable_csensorname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlatID = 2;
  void clear_uplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid() const;
  void set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplatid() const;
  void _internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetPlatID = 3;
  void clear_utargetplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetplatid() const;
  void set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetplatid() const;
  void _internal_set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 5;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_DetectionEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csensorname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_FusionEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_FusionEvent_Proto) */ {
 public:
  inline USIM_FusionEvent_Proto() : USIM_FusionEvent_Proto(nullptr) {};
  virtual ~USIM_FusionEvent_Proto();

  USIM_FusionEvent_Proto(const USIM_FusionEvent_Proto& from);
  USIM_FusionEvent_Proto(USIM_FusionEvent_Proto&& from) noexcept
    : USIM_FusionEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_FusionEvent_Proto& operator=(const USIM_FusionEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_FusionEvent_Proto& operator=(USIM_FusionEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_FusionEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_FusionEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_FusionEvent_Proto*>(
               &_USIM_FusionEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(USIM_FusionEvent_Proto& a, USIM_FusionEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_FusionEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_FusionEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_FusionEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_FusionEvent_Proto>(nullptr);
  }

  USIM_FusionEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_FusionEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_FusionEvent_Proto& from);
  void MergeFrom(const USIM_FusionEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_FusionEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_FusionEvent_Proto";
  }
  protected:
  explicit USIM_FusionEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 3,
    kUTargetPlatIDFieldNumber = 4,
    kUEventTypeFieldNumber = 5,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 3;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetPlatID = 4;
  void clear_utargetplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetplatid() const;
  void set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetplatid() const;
  void _internal_set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 5;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_FusionEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CommunicationEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CommunicationEvent_Proto) */ {
 public:
  inline USIM_CommunicationEvent_Proto() : USIM_CommunicationEvent_Proto(nullptr) {};
  virtual ~USIM_CommunicationEvent_Proto();

  USIM_CommunicationEvent_Proto(const USIM_CommunicationEvent_Proto& from);
  USIM_CommunicationEvent_Proto(USIM_CommunicationEvent_Proto&& from) noexcept
    : USIM_CommunicationEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CommunicationEvent_Proto& operator=(const USIM_CommunicationEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CommunicationEvent_Proto& operator=(USIM_CommunicationEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CommunicationEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CommunicationEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CommunicationEvent_Proto*>(
               &_USIM_CommunicationEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(USIM_CommunicationEvent_Proto& a, USIM_CommunicationEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CommunicationEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CommunicationEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CommunicationEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_CommunicationEvent_Proto>(nullptr);
  }

  USIM_CommunicationEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CommunicationEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CommunicationEvent_Proto& from);
  void MergeFrom(const USIM_CommunicationEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CommunicationEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CommunicationEvent_Proto";
  }
  protected:
  explicit USIM_CommunicationEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUReceiverIDFieldNumber = 3,
    kUTargetIDFieldNumber = 4,
    kUEventTypeFieldNumber = 5,
    kUframeNoFieldNumber = 6,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uReceiverID = 3;
  void clear_ureceiverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ureceiverid() const;
  void set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ureceiverid() const;
  void _internal_set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 4;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 5;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uframeNo = 6;
  void clear_uframeno();
  ::PROTOBUF_NAMESPACE_ID::uint32 uframeno() const;
  void set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uframeno() const;
  void _internal_set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CommunicationEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ureceiverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uframeno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CommandControlEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CommandControlEvent_Proto) */ {
 public:
  inline USIM_CommandControlEvent_Proto() : USIM_CommandControlEvent_Proto(nullptr) {};
  virtual ~USIM_CommandControlEvent_Proto();

  USIM_CommandControlEvent_Proto(const USIM_CommandControlEvent_Proto& from);
  USIM_CommandControlEvent_Proto(USIM_CommandControlEvent_Proto&& from) noexcept
    : USIM_CommandControlEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CommandControlEvent_Proto& operator=(const USIM_CommandControlEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CommandControlEvent_Proto& operator=(USIM_CommandControlEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CommandControlEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CommandControlEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CommandControlEvent_Proto*>(
               &_USIM_CommandControlEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(USIM_CommandControlEvent_Proto& a, USIM_CommandControlEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CommandControlEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CommandControlEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CommandControlEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_CommandControlEvent_Proto>(nullptr);
  }

  USIM_CommandControlEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CommandControlEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CommandControlEvent_Proto& from);
  void MergeFrom(const USIM_CommandControlEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CommandControlEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CommandControlEvent_Proto";
  }
  protected:
  explicit USIM_CommandControlEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSlaveEquipmentNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUHostIDFieldNumber = 2,
    kSSlaveIDFieldNumber = 3,
    kUTargetTypeFieldNumber = 5,
    kUTargetIDFieldNumber = 6,
    kDfLonFieldNumber = 7,
    kDfLatFieldNumber = 8,
    kDfAltFieldNumber = 9,
    kUCommandTypeFieldNumber = 10,
    kUEventTypeFieldNumber = 11,
    kUframeNoFieldNumber = 12,
  };
  // bytes sSlaveEquipmentName = 4;
  void clear_sslaveequipmentname();
  const std::string& sslaveequipmentname() const;
  void set_sslaveequipmentname(const std::string& value);
  void set_sslaveequipmentname(std::string&& value);
  void set_sslaveequipmentname(const char* value);
  void set_sslaveequipmentname(const void* value, size_t size);
  std::string* mutable_sslaveequipmentname();
  std::string* release_sslaveequipmentname();
  void set_allocated_sslaveequipmentname(std::string* sslaveequipmentname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sslaveequipmentname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sslaveequipmentname(
      std::string* sslaveequipmentname);
  private:
  const std::string& _internal_sslaveequipmentname() const;
  void _internal_set_sslaveequipmentname(const std::string& value);
  std::string* _internal_mutable_sslaveequipmentname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uHostID = 2;
  void clear_uhostid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uhostid() const;
  void set_uhostid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uhostid() const;
  void _internal_set_uhostid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sSlaveID = 3;
  void clear_sslaveid();
  ::PROTOBUF_NAMESPACE_ID::uint32 sslaveid() const;
  void set_sslaveid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sslaveid() const;
  void _internal_set_sslaveid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetType = 5;
  void clear_utargettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargettype() const;
  void set_utargettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargettype() const;
  void _internal_set_utargettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 6;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfLon = 7;
  void clear_dflon();
  double dflon() const;
  void set_dflon(double value);
  private:
  double _internal_dflon() const;
  void _internal_set_dflon(double value);
  public:

  // double dfLat = 8;
  void clear_dflat();
  double dflat() const;
  void set_dflat(double value);
  private:
  double _internal_dflat() const;
  void _internal_set_dflat(double value);
  public:

  // double dfAlt = 9;
  void clear_dfalt();
  double dfalt() const;
  void set_dfalt(double value);
  private:
  double _internal_dfalt() const;
  void _internal_set_dfalt(double value);
  public:

  // uint32 uCommandType = 10;
  void clear_ucommandtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ucommandtype() const;
  void set_ucommandtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ucommandtype() const;
  void _internal_set_ucommandtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 11;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uframeNo = 12;
  void clear_uframeno();
  ::PROTOBUF_NAMESPACE_ID::uint32 uframeno() const;
  void set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uframeno() const;
  void _internal_set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CommandControlEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sslaveequipmentname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uhostid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sslaveid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargettype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  double dflon_;
  double dflat_;
  double dfalt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ucommandtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uframeno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_WeaponSystemEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_WeaponSystemEvent_Proto) */ {
 public:
  inline USIM_WeaponSystemEvent_Proto() : USIM_WeaponSystemEvent_Proto(nullptr) {};
  virtual ~USIM_WeaponSystemEvent_Proto();

  USIM_WeaponSystemEvent_Proto(const USIM_WeaponSystemEvent_Proto& from);
  USIM_WeaponSystemEvent_Proto(USIM_WeaponSystemEvent_Proto&& from) noexcept
    : USIM_WeaponSystemEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_WeaponSystemEvent_Proto& operator=(const USIM_WeaponSystemEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_WeaponSystemEvent_Proto& operator=(USIM_WeaponSystemEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_WeaponSystemEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_WeaponSystemEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_WeaponSystemEvent_Proto*>(
               &_USIM_WeaponSystemEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(USIM_WeaponSystemEvent_Proto& a, USIM_WeaponSystemEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_WeaponSystemEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_WeaponSystemEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_WeaponSystemEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_WeaponSystemEvent_Proto>(nullptr);
  }

  USIM_WeaponSystemEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_WeaponSystemEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_WeaponSystemEvent_Proto& from);
  void MergeFrom(const USIM_WeaponSystemEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_WeaponSystemEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_WeaponSystemEvent_Proto";
  }
  protected:
  explicit USIM_WeaponSystemEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCWeaponNameFieldNumber = 5,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kCTargetIDFieldNumber = 3,
    kUWeaponSystemEventTypeFieldNumber = 4,
  };
  // bytes cWeaponName = 5;
  void clear_cweaponname();
  const std::string& cweaponname() const;
  void set_cweaponname(const std::string& value);
  void set_cweaponname(std::string&& value);
  void set_cweaponname(const char* value);
  void set_cweaponname(const void* value, size_t size);
  std::string* mutable_cweaponname();
  std::string* release_cweaponname();
  void set_allocated_cweaponname(std::string* cweaponname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cweaponname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cweaponname(
      std::string* cweaponname);
  private:
  const std::string& _internal_cweaponname() const;
  void _internal_set_cweaponname(const std::string& value);
  std::string* _internal_mutable_cweaponname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cTargetID = 3;
  void clear_ctargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ctargetid() const;
  void set_ctargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ctargetid() const;
  void _internal_set_ctargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uWeaponSystemEventType = 4;
  void clear_uweaponsystemeventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponsystemeventtype() const;
  void set_uweaponsystemeventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uweaponsystemeventtype() const;
  void _internal_set_uweaponsystemeventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_WeaponSystemEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cweaponname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ctargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponsystemeventtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_WeaponLaunchEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_WeaponLaunchEvent_Proto) */ {
 public:
  inline USIM_WeaponLaunchEvent_Proto() : USIM_WeaponLaunchEvent_Proto(nullptr) {};
  virtual ~USIM_WeaponLaunchEvent_Proto();

  USIM_WeaponLaunchEvent_Proto(const USIM_WeaponLaunchEvent_Proto& from);
  USIM_WeaponLaunchEvent_Proto(USIM_WeaponLaunchEvent_Proto&& from) noexcept
    : USIM_WeaponLaunchEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_WeaponLaunchEvent_Proto& operator=(const USIM_WeaponLaunchEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_WeaponLaunchEvent_Proto& operator=(USIM_WeaponLaunchEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_WeaponLaunchEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_WeaponLaunchEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_WeaponLaunchEvent_Proto*>(
               &_USIM_WeaponLaunchEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(USIM_WeaponLaunchEvent_Proto& a, USIM_WeaponLaunchEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_WeaponLaunchEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_WeaponLaunchEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_WeaponLaunchEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_WeaponLaunchEvent_Proto>(nullptr);
  }

  USIM_WeaponLaunchEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_WeaponLaunchEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_WeaponLaunchEvent_Proto& from);
  void MergeFrom(const USIM_WeaponLaunchEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_WeaponLaunchEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_WeaponLaunchEvent_Proto";
  }
  protected:
  explicit USIM_WeaponLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCWeaponNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 3,
    kUWeaponNumFieldNumber = 5,
  };
  // bytes cWeaponName = 4;
  void clear_cweaponname();
  const std::string& cweaponname() const;
  void set_cweaponname(const std::string& value);
  void set_cweaponname(std::string&& value);
  void set_cweaponname(const char* value);
  void set_cweaponname(const void* value, size_t size);
  std::string* mutable_cweaponname();
  std::string* release_cweaponname();
  void set_allocated_cweaponname(std::string* cweaponname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cweaponname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cweaponname(
      std::string* cweaponname);
  private:
  const std::string& _internal_cweaponname() const;
  void _internal_set_cweaponname(const std::string& value);
  std::string* _internal_mutable_cweaponname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 3;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uWeaponNum = 5;
  void clear_uweaponnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponnum() const;
  void set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uweaponnum() const;
  void _internal_set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_WeaponLaunchEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cweaponname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uweaponnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_DecoyLaunchEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_DecoyLaunchEvent_Proto) */ {
 public:
  inline USIM_DecoyLaunchEvent_Proto() : USIM_DecoyLaunchEvent_Proto(nullptr) {};
  virtual ~USIM_DecoyLaunchEvent_Proto();

  USIM_DecoyLaunchEvent_Proto(const USIM_DecoyLaunchEvent_Proto& from);
  USIM_DecoyLaunchEvent_Proto(USIM_DecoyLaunchEvent_Proto&& from) noexcept
    : USIM_DecoyLaunchEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_DecoyLaunchEvent_Proto& operator=(const USIM_DecoyLaunchEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_DecoyLaunchEvent_Proto& operator=(USIM_DecoyLaunchEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_DecoyLaunchEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_DecoyLaunchEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_DecoyLaunchEvent_Proto*>(
               &_USIM_DecoyLaunchEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(USIM_DecoyLaunchEvent_Proto& a, USIM_DecoyLaunchEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_DecoyLaunchEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_DecoyLaunchEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_DecoyLaunchEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_DecoyLaunchEvent_Proto>(nullptr);
  }

  USIM_DecoyLaunchEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_DecoyLaunchEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_DecoyLaunchEvent_Proto& from);
  void MergeFrom(const USIM_DecoyLaunchEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_DecoyLaunchEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_DecoyLaunchEvent_Proto";
  }
  protected:
  explicit USIM_DecoyLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCBaitNameFieldNumber = 3,
    kDfSiTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUBaitNumFieldNumber = 4,
  };
  // bytes cBaitName = 3;
  void clear_cbaitname();
  const std::string& cbaitname() const;
  void set_cbaitname(const std::string& value);
  void set_cbaitname(std::string&& value);
  void set_cbaitname(const char* value);
  void set_cbaitname(const void* value, size_t size);
  std::string* mutable_cbaitname();
  std::string* release_cbaitname();
  void set_allocated_cbaitname(std::string* cbaitname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cbaitname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cbaitname(
      std::string* cbaitname);
  private:
  const std::string& _internal_cbaitname() const;
  void _internal_set_cbaitname(const std::string& value);
  std::string* _internal_mutable_cbaitname();
  public:

  // double dfSiTime = 1;
  void clear_dfsitime();
  double dfsitime() const;
  void set_dfsitime(double value);
  private:
  double _internal_dfsitime() const;
  void _internal_set_dfsitime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uBaitNum = 4;
  void clear_ubaitnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaitnum() const;
  void set_ubaitnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ubaitnum() const;
  void _internal_set_ubaitnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_DecoyLaunchEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cbaitname_;
  double dfsitime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaitnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_ElectronicWarEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_ElectronicWarEvent_Proto) */ {
 public:
  inline USIM_ElectronicWarEvent_Proto() : USIM_ElectronicWarEvent_Proto(nullptr) {};
  virtual ~USIM_ElectronicWarEvent_Proto();

  USIM_ElectronicWarEvent_Proto(const USIM_ElectronicWarEvent_Proto& from);
  USIM_ElectronicWarEvent_Proto(USIM_ElectronicWarEvent_Proto&& from) noexcept
    : USIM_ElectronicWarEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_ElectronicWarEvent_Proto& operator=(const USIM_ElectronicWarEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_ElectronicWarEvent_Proto& operator=(USIM_ElectronicWarEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_ElectronicWarEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_ElectronicWarEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_ElectronicWarEvent_Proto*>(
               &_USIM_ElectronicWarEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(USIM_ElectronicWarEvent_Proto& a, USIM_ElectronicWarEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_ElectronicWarEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_ElectronicWarEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_ElectronicWarEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_ElectronicWarEvent_Proto>(nullptr);
  }

  USIM_ElectronicWarEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_ElectronicWarEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_ElectronicWarEvent_Proto& from);
  void MergeFrom(const USIM_ElectronicWarEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_ElectronicWarEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_ElectronicWarEvent_Proto";
  }
  protected:
  explicit USIM_ElectronicWarEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCJammingSystemNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 3,
    kUEventTypeFieldNumber = 5,
  };
  // bytes cJammingSystemName = 4;
  void clear_cjammingsystemname();
  const std::string& cjammingsystemname() const;
  void set_cjammingsystemname(const std::string& value);
  void set_cjammingsystemname(std::string&& value);
  void set_cjammingsystemname(const char* value);
  void set_cjammingsystemname(const void* value, size_t size);
  std::string* mutable_cjammingsystemname();
  std::string* release_cjammingsystemname();
  void set_allocated_cjammingsystemname(std::string* cjammingsystemname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cjammingsystemname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cjammingsystemname(
      std::string* cjammingsystemname);
  private:
  const std::string& _internal_cjammingsystemname() const;
  void _internal_set_cjammingsystemname(const std::string& value);
  std::string* _internal_mutable_cjammingsystemname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 3;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 5;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_ElectronicWarEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cjammingsystemname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_SensorStateEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_SensorStateEvent_Proto) */ {
 public:
  inline USIM_SensorStateEvent_Proto() : USIM_SensorStateEvent_Proto(nullptr) {};
  virtual ~USIM_SensorStateEvent_Proto();

  USIM_SensorStateEvent_Proto(const USIM_SensorStateEvent_Proto& from);
  USIM_SensorStateEvent_Proto(USIM_SensorStateEvent_Proto&& from) noexcept
    : USIM_SensorStateEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_SensorStateEvent_Proto& operator=(const USIM_SensorStateEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_SensorStateEvent_Proto& operator=(USIM_SensorStateEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_SensorStateEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_SensorStateEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_SensorStateEvent_Proto*>(
               &_USIM_SensorStateEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(USIM_SensorStateEvent_Proto& a, USIM_SensorStateEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_SensorStateEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_SensorStateEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_SensorStateEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_SensorStateEvent_Proto>(nullptr);
  }

  USIM_SensorStateEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_SensorStateEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_SensorStateEvent_Proto& from);
  void MergeFrom(const USIM_SensorStateEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_SensorStateEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_SensorStateEvent_Proto";
  }
  protected:
  explicit USIM_SensorStateEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSensorNameFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUSensorActionFieldNumber = 4,
  };
  // bytes sSensorName = 3;
  void clear_ssensorname();
  const std::string& ssensorname() const;
  void set_ssensorname(const std::string& value);
  void set_ssensorname(std::string&& value);
  void set_ssensorname(const char* value);
  void set_ssensorname(const void* value, size_t size);
  std::string* mutable_ssensorname();
  std::string* release_ssensorname();
  void set_allocated_ssensorname(std::string* ssensorname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ssensorname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ssensorname(
      std::string* ssensorname);
  private:
  const std::string& _internal_ssensorname() const;
  void _internal_set_ssensorname(const std::string& value);
  std::string* _internal_mutable_ssensorname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uSensorAction = 4;
  void clear_usensoraction();
  ::PROTOBUF_NAMESPACE_ID::uint32 usensoraction() const;
  void set_usensoraction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usensoraction() const;
  void _internal_set_usensoraction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_SensorStateEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssensorname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usensoraction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_BattleResultEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_BattleResultEvent_Proto) */ {
 public:
  inline USIM_BattleResultEvent_Proto() : USIM_BattleResultEvent_Proto(nullptr) {};
  virtual ~USIM_BattleResultEvent_Proto();

  USIM_BattleResultEvent_Proto(const USIM_BattleResultEvent_Proto& from);
  USIM_BattleResultEvent_Proto(USIM_BattleResultEvent_Proto&& from) noexcept
    : USIM_BattleResultEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_BattleResultEvent_Proto& operator=(const USIM_BattleResultEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_BattleResultEvent_Proto& operator=(USIM_BattleResultEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_BattleResultEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_BattleResultEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_BattleResultEvent_Proto*>(
               &_USIM_BattleResultEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(USIM_BattleResultEvent_Proto& a, USIM_BattleResultEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_BattleResultEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_BattleResultEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_BattleResultEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_BattleResultEvent_Proto>(nullptr);
  }

  USIM_BattleResultEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_BattleResultEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_BattleResultEvent_Proto& from);
  void MergeFrom(const USIM_BattleResultEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_BattleResultEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_BattleResultEvent_Proto";
  }
  protected:
  explicit USIM_BattleResultEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSWeaponNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 3,
    kUEngageResultFieldNumber = 5,
  };
  // bytes sWeaponName = 4;
  void clear_sweaponname();
  const std::string& sweaponname() const;
  void set_sweaponname(const std::string& value);
  void set_sweaponname(std::string&& value);
  void set_sweaponname(const char* value);
  void set_sweaponname(const void* value, size_t size);
  std::string* mutable_sweaponname();
  std::string* release_sweaponname();
  void set_allocated_sweaponname(std::string* sweaponname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sweaponname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sweaponname(
      std::string* sweaponname);
  private:
  const std::string& _internal_sweaponname() const;
  void _internal_set_sweaponname(const std::string& value);
  std::string* _internal_mutable_sweaponname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 3;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEngageResult = 5;
  void clear_uengageresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 uengageresult() const;
  void set_uengageresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uengageresult() const;
  void _internal_set_uengageresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_BattleResultEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sweaponname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uengageresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_DamageEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_DamageEvent_Proto) */ {
 public:
  inline USIM_DamageEvent_Proto() : USIM_DamageEvent_Proto(nullptr) {};
  virtual ~USIM_DamageEvent_Proto();

  USIM_DamageEvent_Proto(const USIM_DamageEvent_Proto& from);
  USIM_DamageEvent_Proto(USIM_DamageEvent_Proto&& from) noexcept
    : USIM_DamageEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_DamageEvent_Proto& operator=(const USIM_DamageEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_DamageEvent_Proto& operator=(USIM_DamageEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_DamageEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_DamageEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_DamageEvent_Proto*>(
               &_USIM_DamageEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(USIM_DamageEvent_Proto& a, USIM_DamageEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_DamageEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_DamageEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_DamageEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_DamageEvent_Proto>(nullptr);
  }

  USIM_DamageEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_DamageEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_DamageEvent_Proto& from);
  void MergeFrom(const USIM_DamageEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_DamageEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_DamageEvent_Proto";
  }
  protected:
  explicit USIM_DamageEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSWeaponNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUAttackerIDFieldNumber = 2,
    kUDamagePlatIDFieldNumber = 3,
    kUDamageResultFieldNumber = 5,
  };
  // bytes sWeaponName = 4;
  void clear_sweaponname();
  const std::string& sweaponname() const;
  void set_sweaponname(const std::string& value);
  void set_sweaponname(std::string&& value);
  void set_sweaponname(const char* value);
  void set_sweaponname(const void* value, size_t size);
  std::string* mutable_sweaponname();
  std::string* release_sweaponname();
  void set_allocated_sweaponname(std::string* sweaponname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sweaponname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sweaponname(
      std::string* sweaponname);
  private:
  const std::string& _internal_sweaponname() const;
  void _internal_set_sweaponname(const std::string& value);
  std::string* _internal_mutable_sweaponname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uAttackerID = 2;
  void clear_uattackerid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uattackerid() const;
  void set_uattackerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uattackerid() const;
  void _internal_set_uattackerid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uDamagePlatID = 3;
  void clear_udamageplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 udamageplatid() const;
  void set_udamageplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udamageplatid() const;
  void _internal_set_udamageplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uDamageResult = 5;
  void clear_udamageresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 udamageresult() const;
  void set_udamageresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udamageresult() const;
  void _internal_set_udamageresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_DamageEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sweaponname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uattackerid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udamageplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udamageresult_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_LodisticsEvent_Protp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_LodisticsEvent_Protp) */ {
 public:
  inline USIM_LodisticsEvent_Protp() : USIM_LodisticsEvent_Protp(nullptr) {};
  virtual ~USIM_LodisticsEvent_Protp();

  USIM_LodisticsEvent_Protp(const USIM_LodisticsEvent_Protp& from);
  USIM_LodisticsEvent_Protp(USIM_LodisticsEvent_Protp&& from) noexcept
    : USIM_LodisticsEvent_Protp() {
    *this = ::std::move(from);
  }

  inline USIM_LodisticsEvent_Protp& operator=(const USIM_LodisticsEvent_Protp& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_LodisticsEvent_Protp& operator=(USIM_LodisticsEvent_Protp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_LodisticsEvent_Protp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_LodisticsEvent_Protp* internal_default_instance() {
    return reinterpret_cast<const USIM_LodisticsEvent_Protp*>(
               &_USIM_LodisticsEvent_Protp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(USIM_LodisticsEvent_Protp& a, USIM_LodisticsEvent_Protp& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_LodisticsEvent_Protp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_LodisticsEvent_Protp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_LodisticsEvent_Protp* New() const final {
    return CreateMaybeMessage<USIM_LodisticsEvent_Protp>(nullptr);
  }

  USIM_LodisticsEvent_Protp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_LodisticsEvent_Protp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_LodisticsEvent_Protp& from);
  void MergeFrom(const USIM_LodisticsEvent_Protp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_LodisticsEvent_Protp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_LodisticsEvent_Protp";
  }
  protected:
  explicit USIM_LodisticsEvent_Protp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUSenderIDFieldNumber = 2,
    kUReceiverIDFieldNumber = 3,
    kCSupplyTypeFieldNumber = 4,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uSenderID = 2;
  void clear_usenderid();
  ::PROTOBUF_NAMESPACE_ID::uint32 usenderid() const;
  void set_usenderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usenderid() const;
  void _internal_set_usenderid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uReceiverID = 3;
  void clear_ureceiverid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ureceiverid() const;
  void set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ureceiverid() const;
  void _internal_set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cSupplyType = 4;
  void clear_csupplytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 csupplytype() const;
  void set_csupplytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_csupplytype() const;
  void _internal_set_csupplytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_LodisticsEvent_Protp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usenderid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ureceiverid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 csupplytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AssociEntityLaunchEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AssociEntityLaunchEvent_Proto) */ {
 public:
  inline USIM_AssociEntityLaunchEvent_Proto() : USIM_AssociEntityLaunchEvent_Proto(nullptr) {};
  virtual ~USIM_AssociEntityLaunchEvent_Proto();

  USIM_AssociEntityLaunchEvent_Proto(const USIM_AssociEntityLaunchEvent_Proto& from);
  USIM_AssociEntityLaunchEvent_Proto(USIM_AssociEntityLaunchEvent_Proto&& from) noexcept
    : USIM_AssociEntityLaunchEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AssociEntityLaunchEvent_Proto& operator=(const USIM_AssociEntityLaunchEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AssociEntityLaunchEvent_Proto& operator=(USIM_AssociEntityLaunchEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AssociEntityLaunchEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AssociEntityLaunchEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AssociEntityLaunchEvent_Proto*>(
               &_USIM_AssociEntityLaunchEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(USIM_AssociEntityLaunchEvent_Proto& a, USIM_AssociEntityLaunchEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AssociEntityLaunchEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AssociEntityLaunchEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AssociEntityLaunchEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AssociEntityLaunchEvent_Proto>(nullptr);
  }

  USIM_AssociEntityLaunchEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AssociEntityLaunchEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AssociEntityLaunchEvent_Proto& from);
  void MergeFrom(const USIM_AssociEntityLaunchEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AssociEntityLaunchEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AssociEntityLaunchEvent_Proto";
  }
  protected:
  explicit USIM_AssociEntityLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSPlatNameFieldNumber = 2,
    kDfSimTimeFieldNumber = 1,
    kUPlatIDFieldNumber = 3,
    kUbaseIDFieldNumber = 4,
  };
  // bytes sPlatName = 2;
  void clear_splatname();
  const std::string& splatname() const;
  void set_splatname(const std::string& value);
  void set_splatname(std::string&& value);
  void set_splatname(const char* value);
  void set_splatname(const void* value, size_t size);
  std::string* mutable_splatname();
  std::string* release_splatname();
  void set_allocated_splatname(std::string* splatname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_splatname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_splatname(
      std::string* splatname);
  private:
  const std::string& _internal_splatname() const;
  void _internal_set_splatname(const std::string& value);
  std::string* _internal_mutable_splatname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlatID = 3;
  void clear_uplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid() const;
  void set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplatid() const;
  void _internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ubaseID = 4;
  void clear_ubaseid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaseid() const;
  void set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ubaseid() const;
  void _internal_set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AssociEntityLaunchEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splatname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AssociEntityRecoveryEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AssociEntityRecoveryEvent_Proto) */ {
 public:
  inline USIM_AssociEntityRecoveryEvent_Proto() : USIM_AssociEntityRecoveryEvent_Proto(nullptr) {};
  virtual ~USIM_AssociEntityRecoveryEvent_Proto();

  USIM_AssociEntityRecoveryEvent_Proto(const USIM_AssociEntityRecoveryEvent_Proto& from);
  USIM_AssociEntityRecoveryEvent_Proto(USIM_AssociEntityRecoveryEvent_Proto&& from) noexcept
    : USIM_AssociEntityRecoveryEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AssociEntityRecoveryEvent_Proto& operator=(const USIM_AssociEntityRecoveryEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AssociEntityRecoveryEvent_Proto& operator=(USIM_AssociEntityRecoveryEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AssociEntityRecoveryEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AssociEntityRecoveryEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AssociEntityRecoveryEvent_Proto*>(
               &_USIM_AssociEntityRecoveryEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(USIM_AssociEntityRecoveryEvent_Proto& a, USIM_AssociEntityRecoveryEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AssociEntityRecoveryEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AssociEntityRecoveryEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AssociEntityRecoveryEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AssociEntityRecoveryEvent_Proto>(nullptr);
  }

  USIM_AssociEntityRecoveryEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AssociEntityRecoveryEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AssociEntityRecoveryEvent_Proto& from);
  void MergeFrom(const USIM_AssociEntityRecoveryEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AssociEntityRecoveryEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AssociEntityRecoveryEvent_Proto";
  }
  protected:
  explicit USIM_AssociEntityRecoveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUPlatIDFieldNumber = 2,
    kUbaseIDFieldNumber = 3,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlatID = 2;
  void clear_uplatid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid() const;
  void set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplatid() const;
  void _internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ubaseID = 3;
  void clear_ubaseid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaseid() const;
  void set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ubaseid() const;
  void _internal_set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AssociEntityRecoveryEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplatid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ubaseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_StartAssetRecoveryEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_StartAssetRecoveryEvent_Proto) */ {
 public:
  inline USIM_StartAssetRecoveryEvent_Proto() : USIM_StartAssetRecoveryEvent_Proto(nullptr) {};
  virtual ~USIM_StartAssetRecoveryEvent_Proto();

  USIM_StartAssetRecoveryEvent_Proto(const USIM_StartAssetRecoveryEvent_Proto& from);
  USIM_StartAssetRecoveryEvent_Proto(USIM_StartAssetRecoveryEvent_Proto&& from) noexcept
    : USIM_StartAssetRecoveryEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_StartAssetRecoveryEvent_Proto& operator=(const USIM_StartAssetRecoveryEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_StartAssetRecoveryEvent_Proto& operator=(USIM_StartAssetRecoveryEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_StartAssetRecoveryEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_StartAssetRecoveryEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_StartAssetRecoveryEvent_Proto*>(
               &_USIM_StartAssetRecoveryEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(USIM_StartAssetRecoveryEvent_Proto& a, USIM_StartAssetRecoveryEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_StartAssetRecoveryEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_StartAssetRecoveryEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_StartAssetRecoveryEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_StartAssetRecoveryEvent_Proto>(nullptr);
  }

  USIM_StartAssetRecoveryEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_StartAssetRecoveryEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_StartAssetRecoveryEvent_Proto& from);
  void MergeFrom(const USIM_StartAssetRecoveryEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_StartAssetRecoveryEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_StartAssetRecoveryEvent_Proto";
  }
  protected:
  explicit USIM_StartAssetRecoveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecoveryAssetFieldNumber = 1,
    kRecoveryAssetPrenameFieldNumber = 2,
    kBaseAssetFieldNumber = 3,
    kTurnaroundTimeFieldNumber = 4,
    kAvailableTimeFieldNumber = 5,
    kMaintainDelayFieldNumber = 6,
    kMaintainTimeFieldNumber = 7,
    kRecoveryBeginTimeFieldNumber = 8,
    kDfSimTimeFieldNumber = 9,
  };
  // bytes recovery_Asset = 1;
  void clear_recovery_asset();
  const std::string& recovery_asset() const;
  void set_recovery_asset(const std::string& value);
  void set_recovery_asset(std::string&& value);
  void set_recovery_asset(const char* value);
  void set_recovery_asset(const void* value, size_t size);
  std::string* mutable_recovery_asset();
  std::string* release_recovery_asset();
  void set_allocated_recovery_asset(std::string* recovery_asset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recovery_asset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recovery_asset(
      std::string* recovery_asset);
  private:
  const std::string& _internal_recovery_asset() const;
  void _internal_set_recovery_asset(const std::string& value);
  std::string* _internal_mutable_recovery_asset();
  public:

  // bytes recovery_Asset_prename = 2;
  void clear_recovery_asset_prename();
  const std::string& recovery_asset_prename() const;
  void set_recovery_asset_prename(const std::string& value);
  void set_recovery_asset_prename(std::string&& value);
  void set_recovery_asset_prename(const char* value);
  void set_recovery_asset_prename(const void* value, size_t size);
  std::string* mutable_recovery_asset_prename();
  std::string* release_recovery_asset_prename();
  void set_allocated_recovery_asset_prename(std::string* recovery_asset_prename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_recovery_asset_prename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_recovery_asset_prename(
      std::string* recovery_asset_prename);
  private:
  const std::string& _internal_recovery_asset_prename() const;
  void _internal_set_recovery_asset_prename(const std::string& value);
  std::string* _internal_mutable_recovery_asset_prename();
  public:

  // bytes BaseAsset = 3;
  void clear_baseasset();
  const std::string& baseasset() const;
  void set_baseasset(const std::string& value);
  void set_baseasset(std::string&& value);
  void set_baseasset(const char* value);
  void set_baseasset(const void* value, size_t size);
  std::string* mutable_baseasset();
  std::string* release_baseasset();
  void set_allocated_baseasset(std::string* baseasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_baseasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_baseasset(
      std::string* baseasset);
  private:
  const std::string& _internal_baseasset() const;
  void _internal_set_baseasset(const std::string& value);
  std::string* _internal_mutable_baseasset();
  public:

  // double TurnaroundTime = 4;
  void clear_turnaroundtime();
  double turnaroundtime() const;
  void set_turnaroundtime(double value);
  private:
  double _internal_turnaroundtime() const;
  void _internal_set_turnaroundtime(double value);
  public:

  // double AvailableTime = 5;
  void clear_availabletime();
  double availabletime() const;
  void set_availabletime(double value);
  private:
  double _internal_availabletime() const;
  void _internal_set_availabletime(double value);
  public:

  // double MaintainDelay = 6;
  void clear_maintaindelay();
  double maintaindelay() const;
  void set_maintaindelay(double value);
  private:
  double _internal_maintaindelay() const;
  void _internal_set_maintaindelay(double value);
  public:

  // double MaintainTime = 7;
  void clear_maintaintime();
  double maintaintime() const;
  void set_maintaintime(double value);
  private:
  double _internal_maintaintime() const;
  void _internal_set_maintaintime(double value);
  public:

  // double recovery_begin_time = 8;
  void clear_recovery_begin_time();
  double recovery_begin_time() const;
  void set_recovery_begin_time(double value);
  private:
  double _internal_recovery_begin_time() const;
  void _internal_set_recovery_begin_time(double value);
  public:

  // double dfSimTime = 9;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_StartAssetRecoveryEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recovery_asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recovery_asset_prename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseasset_;
  double turnaroundtime_;
  double availabletime_;
  double maintaindelay_;
  double maintaintime_;
  double recovery_begin_time_;
  double dfsimtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AircraftTakeoffEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AircraftTakeoffEvent_Proto) */ {
 public:
  inline USIM_AircraftTakeoffEvent_Proto() : USIM_AircraftTakeoffEvent_Proto(nullptr) {};
  virtual ~USIM_AircraftTakeoffEvent_Proto();

  USIM_AircraftTakeoffEvent_Proto(const USIM_AircraftTakeoffEvent_Proto& from);
  USIM_AircraftTakeoffEvent_Proto(USIM_AircraftTakeoffEvent_Proto&& from) noexcept
    : USIM_AircraftTakeoffEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AircraftTakeoffEvent_Proto& operator=(const USIM_AircraftTakeoffEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AircraftTakeoffEvent_Proto& operator=(USIM_AircraftTakeoffEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AircraftTakeoffEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AircraftTakeoffEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AircraftTakeoffEvent_Proto*>(
               &_USIM_AircraftTakeoffEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(USIM_AircraftTakeoffEvent_Proto& a, USIM_AircraftTakeoffEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AircraftTakeoffEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AircraftTakeoffEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AircraftTakeoffEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AircraftTakeoffEvent_Proto>(nullptr);
  }

  USIM_AircraftTakeoffEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AircraftTakeoffEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AircraftTakeoffEvent_Proto& from);
  void MergeFrom(const USIM_AircraftTakeoffEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AircraftTakeoffEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AircraftTakeoffEvent_Proto";
  }
  protected:
  explicit USIM_AircraftTakeoffEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSPlaneNameFieldNumber = 2,
    kDfSimTimeFieldNumber = 1,
    kUPlaneIDFieldNumber = 3,
    kUAirbaseIDFieldNumber = 4,
  };
  // bytes sPlaneName = 2;
  void clear_splanename();
  const std::string& splanename() const;
  void set_splanename(const std::string& value);
  void set_splanename(std::string&& value);
  void set_splanename(const char* value);
  void set_splanename(const void* value, size_t size);
  std::string* mutable_splanename();
  std::string* release_splanename();
  void set_allocated_splanename(std::string* splanename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_splanename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_splanename(
      std::string* splanename);
  private:
  const std::string& _internal_splanename() const;
  void _internal_set_splanename(const std::string& value);
  std::string* _internal_mutable_splanename();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlaneID = 3;
  void clear_uplaneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid() const;
  void set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplaneid() const;
  void _internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uAirbaseID = 4;
  void clear_uairbaseid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid() const;
  void set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uairbaseid() const;
  void _internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AircraftTakeoffEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr splanename_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AircraftLandEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AircraftLandEvent_Proto) */ {
 public:
  inline USIM_AircraftLandEvent_Proto() : USIM_AircraftLandEvent_Proto(nullptr) {};
  virtual ~USIM_AircraftLandEvent_Proto();

  USIM_AircraftLandEvent_Proto(const USIM_AircraftLandEvent_Proto& from);
  USIM_AircraftLandEvent_Proto(USIM_AircraftLandEvent_Proto&& from) noexcept
    : USIM_AircraftLandEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AircraftLandEvent_Proto& operator=(const USIM_AircraftLandEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AircraftLandEvent_Proto& operator=(USIM_AircraftLandEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AircraftLandEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AircraftLandEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AircraftLandEvent_Proto*>(
               &_USIM_AircraftLandEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(USIM_AircraftLandEvent_Proto& a, USIM_AircraftLandEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AircraftLandEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AircraftLandEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AircraftLandEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AircraftLandEvent_Proto>(nullptr);
  }

  USIM_AircraftLandEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AircraftLandEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AircraftLandEvent_Proto& from);
  void MergeFrom(const USIM_AircraftLandEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AircraftLandEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AircraftLandEvent_Proto";
  }
  protected:
  explicit USIM_AircraftLandEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUPlaneIDFieldNumber = 2,
    kUAirbaseIDFieldNumber = 3,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlaneID = 2;
  void clear_uplaneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid() const;
  void set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplaneid() const;
  void _internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uAirbaseID = 3;
  void clear_uairbaseid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid() const;
  void set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uairbaseid() const;
  void _internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AircraftLandEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AircraftReturnEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AircraftReturnEvent_Proto) */ {
 public:
  inline USIM_AircraftReturnEvent_Proto() : USIM_AircraftReturnEvent_Proto(nullptr) {};
  virtual ~USIM_AircraftReturnEvent_Proto();

  USIM_AircraftReturnEvent_Proto(const USIM_AircraftReturnEvent_Proto& from);
  USIM_AircraftReturnEvent_Proto(USIM_AircraftReturnEvent_Proto&& from) noexcept
    : USIM_AircraftReturnEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AircraftReturnEvent_Proto& operator=(const USIM_AircraftReturnEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AircraftReturnEvent_Proto& operator=(USIM_AircraftReturnEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AircraftReturnEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AircraftReturnEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AircraftReturnEvent_Proto*>(
               &_USIM_AircraftReturnEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(USIM_AircraftReturnEvent_Proto& a, USIM_AircraftReturnEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AircraftReturnEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AircraftReturnEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AircraftReturnEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AircraftReturnEvent_Proto>(nullptr);
  }

  USIM_AircraftReturnEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AircraftReturnEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AircraftReturnEvent_Proto& from);
  void MergeFrom(const USIM_AircraftReturnEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AircraftReturnEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AircraftReturnEvent_Proto";
  }
  protected:
  explicit USIM_AircraftReturnEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUPlaneIDFieldNumber = 2,
    kUAirbaseIDFieldNumber = 3,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uPlaneID = 2;
  void clear_uplaneid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid() const;
  void set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplaneid() const;
  void _internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uAirbaseID = 3;
  void clear_uairbaseid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid() const;
  void set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uairbaseid() const;
  void _internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AircraftReturnEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplaneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uairbaseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_BuoyReleaseEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_BuoyReleaseEvent_Proto) */ {
 public:
  inline USIM_BuoyReleaseEvent_Proto() : USIM_BuoyReleaseEvent_Proto(nullptr) {};
  virtual ~USIM_BuoyReleaseEvent_Proto();

  USIM_BuoyReleaseEvent_Proto(const USIM_BuoyReleaseEvent_Proto& from);
  USIM_BuoyReleaseEvent_Proto(USIM_BuoyReleaseEvent_Proto&& from) noexcept
    : USIM_BuoyReleaseEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_BuoyReleaseEvent_Proto& operator=(const USIM_BuoyReleaseEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_BuoyReleaseEvent_Proto& operator=(USIM_BuoyReleaseEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_BuoyReleaseEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_BuoyReleaseEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_BuoyReleaseEvent_Proto*>(
               &_USIM_BuoyReleaseEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(USIM_BuoyReleaseEvent_Proto& a, USIM_BuoyReleaseEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_BuoyReleaseEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_BuoyReleaseEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_BuoyReleaseEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_BuoyReleaseEvent_Proto>(nullptr);
  }

  USIM_BuoyReleaseEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_BuoyReleaseEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_BuoyReleaseEvent_Proto& from);
  void MergeFrom(const USIM_BuoyReleaseEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_BuoyReleaseEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_BuoyReleaseEvent_Proto";
  }
  protected:
  explicit USIM_BuoyReleaseEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSBuoyFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUBuoyIDFieldNumber = 3,
  };
  // bytes sBuoy = 4;
  void clear_sbuoy();
  const std::string& sbuoy() const;
  void set_sbuoy(const std::string& value);
  void set_sbuoy(std::string&& value);
  void set_sbuoy(const char* value);
  void set_sbuoy(const void* value, size_t size);
  std::string* mutable_sbuoy();
  std::string* release_sbuoy();
  void set_allocated_sbuoy(std::string* sbuoy);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sbuoy();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sbuoy(
      std::string* sbuoy);
  private:
  const std::string& _internal_sbuoy() const;
  void _internal_set_sbuoy(const std::string& value);
  std::string* _internal_mutable_sbuoy();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uBuoyID = 3;
  void clear_ubuoyid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ubuoyid() const;
  void set_ubuoyid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ubuoyid() const;
  void _internal_set_ubuoyid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_BuoyReleaseEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sbuoy_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ubuoyid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_SonarDropReuseEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_SonarDropReuseEvent_Proto) */ {
 public:
  inline USIM_SonarDropReuseEvent_Proto() : USIM_SonarDropReuseEvent_Proto(nullptr) {};
  virtual ~USIM_SonarDropReuseEvent_Proto();

  USIM_SonarDropReuseEvent_Proto(const USIM_SonarDropReuseEvent_Proto& from);
  USIM_SonarDropReuseEvent_Proto(USIM_SonarDropReuseEvent_Proto&& from) noexcept
    : USIM_SonarDropReuseEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_SonarDropReuseEvent_Proto& operator=(const USIM_SonarDropReuseEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_SonarDropReuseEvent_Proto& operator=(USIM_SonarDropReuseEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_SonarDropReuseEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_SonarDropReuseEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_SonarDropReuseEvent_Proto*>(
               &_USIM_SonarDropReuseEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(USIM_SonarDropReuseEvent_Proto& a, USIM_SonarDropReuseEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_SonarDropReuseEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_SonarDropReuseEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_SonarDropReuseEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_SonarDropReuseEvent_Proto>(nullptr);
  }

  USIM_SonarDropReuseEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_SonarDropReuseEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_SonarDropReuseEvent_Proto& from);
  void MergeFrom(const USIM_SonarDropReuseEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_SonarDropReuseEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_SonarDropReuseEvent_Proto";
  }
  protected:
  explicit USIM_SonarDropReuseEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSSonarNameFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUSonarIDFieldNumber = 3,
    kUEventTypeFieldNumber = 5,
  };
  // bytes sSonarName = 4;
  void clear_ssonarname();
  const std::string& ssonarname() const;
  void set_ssonarname(const std::string& value);
  void set_ssonarname(std::string&& value);
  void set_ssonarname(const char* value);
  void set_ssonarname(const void* value, size_t size);
  std::string* mutable_ssonarname();
  std::string* release_ssonarname();
  void set_allocated_ssonarname(std::string* ssonarname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ssonarname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ssonarname(
      std::string* ssonarname);
  private:
  const std::string& _internal_ssonarname() const;
  void _internal_set_ssonarname(const std::string& value);
  std::string* _internal_mutable_ssonarname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uSonarID = 3;
  void clear_usonarid();
  ::PROTOBUF_NAMESPACE_ID::uint32 usonarid() const;
  void set_usonarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usonarid() const;
  void _internal_set_usonarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uEventType = 5;
  void clear_ueventtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype() const;
  void set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ueventtype() const;
  void _internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_SonarDropReuseEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssonarname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usonarid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ueventtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_ForceDeliveryEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_ForceDeliveryEvent_Proto) */ {
 public:
  inline USIM_ForceDeliveryEvent_Proto() : USIM_ForceDeliveryEvent_Proto(nullptr) {};
  virtual ~USIM_ForceDeliveryEvent_Proto();

  USIM_ForceDeliveryEvent_Proto(const USIM_ForceDeliveryEvent_Proto& from);
  USIM_ForceDeliveryEvent_Proto(USIM_ForceDeliveryEvent_Proto&& from) noexcept
    : USIM_ForceDeliveryEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_ForceDeliveryEvent_Proto& operator=(const USIM_ForceDeliveryEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_ForceDeliveryEvent_Proto& operator=(USIM_ForceDeliveryEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_ForceDeliveryEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_ForceDeliveryEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_ForceDeliveryEvent_Proto*>(
               &_USIM_ForceDeliveryEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(USIM_ForceDeliveryEvent_Proto& a, USIM_ForceDeliveryEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_ForceDeliveryEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_ForceDeliveryEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_ForceDeliveryEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_ForceDeliveryEvent_Proto>(nullptr);
  }

  USIM_ForceDeliveryEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_ForceDeliveryEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_ForceDeliveryEvent_Proto& from);
  void MergeFrom(const USIM_ForceDeliveryEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_ForceDeliveryEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_ForceDeliveryEvent_Proto";
  }
  protected:
  explicit USIM_ForceDeliveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCForceNameFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
  };
  // bytes cForceName = 3;
  void clear_cforcename();
  const std::string& cforcename() const;
  void set_cforcename(const std::string& value);
  void set_cforcename(std::string&& value);
  void set_cforcename(const char* value);
  void set_cforcename(const void* value, size_t size);
  std::string* mutable_cforcename();
  std::string* release_cforcename();
  void set_allocated_cforcename(std::string* cforcename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cforcename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cforcename(
      std::string* cforcename);
  private:
  const std::string& _internal_cforcename() const;
  void _internal_set_cforcename(const std::string& value);
  std::string* _internal_mutable_cforcename();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_ForceDeliveryEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cforcename_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_ForceReusingEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_ForceReusingEvent_Proto) */ {
 public:
  inline USIM_ForceReusingEvent_Proto() : USIM_ForceReusingEvent_Proto(nullptr) {};
  virtual ~USIM_ForceReusingEvent_Proto();

  USIM_ForceReusingEvent_Proto(const USIM_ForceReusingEvent_Proto& from);
  USIM_ForceReusingEvent_Proto(USIM_ForceReusingEvent_Proto&& from) noexcept
    : USIM_ForceReusingEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_ForceReusingEvent_Proto& operator=(const USIM_ForceReusingEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_ForceReusingEvent_Proto& operator=(USIM_ForceReusingEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_ForceReusingEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_ForceReusingEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_ForceReusingEvent_Proto*>(
               &_USIM_ForceReusingEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(USIM_ForceReusingEvent_Proto& a, USIM_ForceReusingEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_ForceReusingEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_ForceReusingEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_ForceReusingEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_ForceReusingEvent_Proto>(nullptr);
  }

  USIM_ForceReusingEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_ForceReusingEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_ForceReusingEvent_Proto& from);
  void MergeFrom(const USIM_ForceReusingEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_ForceReusingEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_ForceReusingEvent_Proto";
  }
  protected:
  explicit USIM_ForceReusingEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUForceIDFieldNumber = 3,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uForceID = 3;
  void clear_uforceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uforceid() const;
  void set_uforceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uforceid() const;
  void _internal_set_uforceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_ForceReusingEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uforceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_IssuingTaskAssignment_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_IssuingTaskAssignment_Proto) */ {
 public:
  inline USIM_IssuingTaskAssignment_Proto() : USIM_IssuingTaskAssignment_Proto(nullptr) {};
  virtual ~USIM_IssuingTaskAssignment_Proto();

  USIM_IssuingTaskAssignment_Proto(const USIM_IssuingTaskAssignment_Proto& from);
  USIM_IssuingTaskAssignment_Proto(USIM_IssuingTaskAssignment_Proto&& from) noexcept
    : USIM_IssuingTaskAssignment_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_IssuingTaskAssignment_Proto& operator=(const USIM_IssuingTaskAssignment_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_IssuingTaskAssignment_Proto& operator=(USIM_IssuingTaskAssignment_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_IssuingTaskAssignment_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_IssuingTaskAssignment_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_IssuingTaskAssignment_Proto*>(
               &_USIM_IssuingTaskAssignment_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(USIM_IssuingTaskAssignment_Proto& a, USIM_IssuingTaskAssignment_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_IssuingTaskAssignment_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_IssuingTaskAssignment_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_IssuingTaskAssignment_Proto* New() const final {
    return CreateMaybeMessage<USIM_IssuingTaskAssignment_Proto>(nullptr);
  }

  USIM_IssuingTaskAssignment_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_IssuingTaskAssignment_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_IssuingTaskAssignment_Proto& from);
  void MergeFrom(const USIM_IssuingTaskAssignment_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_IssuingTaskAssignment_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_IssuingTaskAssignment_Proto";
  }
  protected:
  explicit USIM_IssuingTaskAssignment_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTheWarfareCommanderFieldNumber = 3,
    kCommanderOrderIDFieldNumber = 5,
    kTaskedAssetFieldNumber = 6,
    kTargetOperatingMediumFieldNumber = 7,
    kTargetIDFieldNumber = 8,
    kTargetClassificationFieldNumber = 9,
    kOrderTypeFieldNumber = 11,
    kMotionTypeFieldNumber = 12,
    kActualTargetFieldNumber = 13,
    kCommanderTacticsTableFieldNumber = 14,
    kTriggeredTacticFieldNumber = 15,
    kTimeFieldNumber = 1,
    kGroupTrackPFieldNumber = 2,
    kCommanderTrackIDFieldNumber = 4,
    kGroupTrackComponentCountFieldNumber = 10,
  };
  // bytes TheWarfareCommander = 3;
  void clear_thewarfarecommander();
  const std::string& thewarfarecommander() const;
  void set_thewarfarecommander(const std::string& value);
  void set_thewarfarecommander(std::string&& value);
  void set_thewarfarecommander(const char* value);
  void set_thewarfarecommander(const void* value, size_t size);
  std::string* mutable_thewarfarecommander();
  std::string* release_thewarfarecommander();
  void set_allocated_thewarfarecommander(std::string* thewarfarecommander);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thewarfarecommander();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thewarfarecommander(
      std::string* thewarfarecommander);
  private:
  const std::string& _internal_thewarfarecommander() const;
  void _internal_set_thewarfarecommander(const std::string& value);
  std::string* _internal_mutable_thewarfarecommander();
  public:

  // bytes CommanderOrderID = 5;
  void clear_commanderorderid();
  const std::string& commanderorderid() const;
  void set_commanderorderid(const std::string& value);
  void set_commanderorderid(std::string&& value);
  void set_commanderorderid(const char* value);
  void set_commanderorderid(const void* value, size_t size);
  std::string* mutable_commanderorderid();
  std::string* release_commanderorderid();
  void set_allocated_commanderorderid(std::string* commanderorderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_commanderorderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_commanderorderid(
      std::string* commanderorderid);
  private:
  const std::string& _internal_commanderorderid() const;
  void _internal_set_commanderorderid(const std::string& value);
  std::string* _internal_mutable_commanderorderid();
  public:

  // bytes TaskedAsset = 6;
  void clear_taskedasset();
  const std::string& taskedasset() const;
  void set_taskedasset(const std::string& value);
  void set_taskedasset(std::string&& value);
  void set_taskedasset(const char* value);
  void set_taskedasset(const void* value, size_t size);
  std::string* mutable_taskedasset();
  std::string* release_taskedasset();
  void set_allocated_taskedasset(std::string* taskedasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_taskedasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_taskedasset(
      std::string* taskedasset);
  private:
  const std::string& _internal_taskedasset() const;
  void _internal_set_taskedasset(const std::string& value);
  std::string* _internal_mutable_taskedasset();
  public:

  // bytes TargetOperatingMedium = 7;
  void clear_targetoperatingmedium();
  const std::string& targetoperatingmedium() const;
  void set_targetoperatingmedium(const std::string& value);
  void set_targetoperatingmedium(std::string&& value);
  void set_targetoperatingmedium(const char* value);
  void set_targetoperatingmedium(const void* value, size_t size);
  std::string* mutable_targetoperatingmedium();
  std::string* release_targetoperatingmedium();
  void set_allocated_targetoperatingmedium(std::string* targetoperatingmedium);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetoperatingmedium();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetoperatingmedium(
      std::string* targetoperatingmedium);
  private:
  const std::string& _internal_targetoperatingmedium() const;
  void _internal_set_targetoperatingmedium(const std::string& value);
  std::string* _internal_mutable_targetoperatingmedium();
  public:

  // bytes TargetID = 8;
  void clear_targetid();
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const void* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetid(
      std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // bytes TargetClassification = 9;
  void clear_targetclassification();
  const std::string& targetclassification() const;
  void set_targetclassification(const std::string& value);
  void set_targetclassification(std::string&& value);
  void set_targetclassification(const char* value);
  void set_targetclassification(const void* value, size_t size);
  std::string* mutable_targetclassification();
  std::string* release_targetclassification();
  void set_allocated_targetclassification(std::string* targetclassification);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetclassification();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetclassification(
      std::string* targetclassification);
  private:
  const std::string& _internal_targetclassification() const;
  void _internal_set_targetclassification(const std::string& value);
  std::string* _internal_mutable_targetclassification();
  public:

  // bytes OrderType = 11;
  void clear_ordertype();
  const std::string& ordertype() const;
  void set_ordertype(const std::string& value);
  void set_ordertype(std::string&& value);
  void set_ordertype(const char* value);
  void set_ordertype(const void* value, size_t size);
  std::string* mutable_ordertype();
  std::string* release_ordertype();
  void set_allocated_ordertype(std::string* ordertype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordertype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordertype(
      std::string* ordertype);
  private:
  const std::string& _internal_ordertype() const;
  void _internal_set_ordertype(const std::string& value);
  std::string* _internal_mutable_ordertype();
  public:

  // bytes MotionType = 12;
  void clear_motiontype();
  const std::string& motiontype() const;
  void set_motiontype(const std::string& value);
  void set_motiontype(std::string&& value);
  void set_motiontype(const char* value);
  void set_motiontype(const void* value, size_t size);
  std::string* mutable_motiontype();
  std::string* release_motiontype();
  void set_allocated_motiontype(std::string* motiontype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_motiontype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_motiontype(
      std::string* motiontype);
  private:
  const std::string& _internal_motiontype() const;
  void _internal_set_motiontype(const std::string& value);
  std::string* _internal_mutable_motiontype();
  public:

  // bytes ActualTarget = 13;
  void clear_actualtarget();
  const std::string& actualtarget() const;
  void set_actualtarget(const std::string& value);
  void set_actualtarget(std::string&& value);
  void set_actualtarget(const char* value);
  void set_actualtarget(const void* value, size_t size);
  std::string* mutable_actualtarget();
  std::string* release_actualtarget();
  void set_allocated_actualtarget(std::string* actualtarget);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actualtarget();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actualtarget(
      std::string* actualtarget);
  private:
  const std::string& _internal_actualtarget() const;
  void _internal_set_actualtarget(const std::string& value);
  std::string* _internal_mutable_actualtarget();
  public:

  // bytes CommanderTacticsTable = 14;
  void clear_commandertacticstable();
  const std::string& commandertacticstable() const;
  void set_commandertacticstable(const std::string& value);
  void set_commandertacticstable(std::string&& value);
  void set_commandertacticstable(const char* value);
  void set_commandertacticstable(const void* value, size_t size);
  std::string* mutable_commandertacticstable();
  std::string* release_commandertacticstable();
  void set_allocated_commandertacticstable(std::string* commandertacticstable);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_commandertacticstable();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_commandertacticstable(
      std::string* commandertacticstable);
  private:
  const std::string& _internal_commandertacticstable() const;
  void _internal_set_commandertacticstable(const std::string& value);
  std::string* _internal_mutable_commandertacticstable();
  public:

  // bytes TriggeredTactic = 15;
  void clear_triggeredtactic();
  const std::string& triggeredtactic() const;
  void set_triggeredtactic(const std::string& value);
  void set_triggeredtactic(std::string&& value);
  void set_triggeredtactic(const char* value);
  void set_triggeredtactic(const void* value, size_t size);
  std::string* mutable_triggeredtactic();
  std::string* release_triggeredtactic();
  void set_allocated_triggeredtactic(std::string* triggeredtactic);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_triggeredtactic();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_triggeredtactic(
      std::string* triggeredtactic);
  private:
  const std::string& _internal_triggeredtactic() const;
  void _internal_set_triggeredtactic(const std::string& value);
  std::string* _internal_mutable_triggeredtactic();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint32 GroupTrack_p = 2;
  void clear_grouptrack_p();
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrack_p() const;
  void set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grouptrack_p() const;
  void _internal_set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CommanderTrackID = 4;
  void clear_commandertrackid();
  ::PROTOBUF_NAMESPACE_ID::uint32 commandertrackid() const;
  void set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_commandertrackid() const;
  void _internal_set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 GroupTrackComponentCount = 10;
  void clear_grouptrackcomponentcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrackcomponentcount() const;
  void set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grouptrackcomponentcount() const;
  void _internal_set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_IssuingTaskAssignment_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thewarfarecommander_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commanderorderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskedasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetoperatingmedium_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetclassification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actualtarget_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandertacticstable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr triggeredtactic_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrack_p_;
  ::PROTOBUF_NAMESPACE_ID::uint32 commandertrackid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrackcomponentcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CommandTaskCompleted_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CommandTaskCompleted_Proto) */ {
 public:
  inline USIM_CommandTaskCompleted_Proto() : USIM_CommandTaskCompleted_Proto(nullptr) {};
  virtual ~USIM_CommandTaskCompleted_Proto();

  USIM_CommandTaskCompleted_Proto(const USIM_CommandTaskCompleted_Proto& from);
  USIM_CommandTaskCompleted_Proto(USIM_CommandTaskCompleted_Proto&& from) noexcept
    : USIM_CommandTaskCompleted_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CommandTaskCompleted_Proto& operator=(const USIM_CommandTaskCompleted_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CommandTaskCompleted_Proto& operator=(USIM_CommandTaskCompleted_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CommandTaskCompleted_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CommandTaskCompleted_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CommandTaskCompleted_Proto*>(
               &_USIM_CommandTaskCompleted_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(USIM_CommandTaskCompleted_Proto& a, USIM_CommandTaskCompleted_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CommandTaskCompleted_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CommandTaskCompleted_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CommandTaskCompleted_Proto* New() const final {
    return CreateMaybeMessage<USIM_CommandTaskCompleted_Proto>(nullptr);
  }

  USIM_CommandTaskCompleted_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CommandTaskCompleted_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CommandTaskCompleted_Proto& from);
  void MergeFrom(const USIM_CommandTaskCompleted_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CommandTaskCompleted_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CommandTaskCompleted_Proto";
  }
  protected:
  explicit USIM_CommandTaskCompleted_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTheWarfareCommanderFieldNumber = 3,
    kCommanderOrderIDFieldNumber = 5,
    kTaskedAssetFieldNumber = 6,
    kTargetOperatingMediumFieldNumber = 7,
    kTargetIDFieldNumber = 8,
    kTargetClassificationFieldNumber = 9,
    kOrderTypeFieldNumber = 11,
    kActualTargetFieldNumber = 12,
    kTimeFieldNumber = 1,
    kGroupTrackPFieldNumber = 2,
    kCommanderTrackIDFieldNumber = 4,
    kGroupTrackComponentCountFieldNumber = 10,
  };
  // bytes TheWarfareCommander = 3;
  void clear_thewarfarecommander();
  const std::string& thewarfarecommander() const;
  void set_thewarfarecommander(const std::string& value);
  void set_thewarfarecommander(std::string&& value);
  void set_thewarfarecommander(const char* value);
  void set_thewarfarecommander(const void* value, size_t size);
  std::string* mutable_thewarfarecommander();
  std::string* release_thewarfarecommander();
  void set_allocated_thewarfarecommander(std::string* thewarfarecommander);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_thewarfarecommander();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_thewarfarecommander(
      std::string* thewarfarecommander);
  private:
  const std::string& _internal_thewarfarecommander() const;
  void _internal_set_thewarfarecommander(const std::string& value);
  std::string* _internal_mutable_thewarfarecommander();
  public:

  // bytes CommanderOrderID = 5;
  void clear_commanderorderid();
  const std::string& commanderorderid() const;
  void set_commanderorderid(const std::string& value);
  void set_commanderorderid(std::string&& value);
  void set_commanderorderid(const char* value);
  void set_commanderorderid(const void* value, size_t size);
  std::string* mutable_commanderorderid();
  std::string* release_commanderorderid();
  void set_allocated_commanderorderid(std::string* commanderorderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_commanderorderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_commanderorderid(
      std::string* commanderorderid);
  private:
  const std::string& _internal_commanderorderid() const;
  void _internal_set_commanderorderid(const std::string& value);
  std::string* _internal_mutable_commanderorderid();
  public:

  // bytes TaskedAsset = 6;
  void clear_taskedasset();
  const std::string& taskedasset() const;
  void set_taskedasset(const std::string& value);
  void set_taskedasset(std::string&& value);
  void set_taskedasset(const char* value);
  void set_taskedasset(const void* value, size_t size);
  std::string* mutable_taskedasset();
  std::string* release_taskedasset();
  void set_allocated_taskedasset(std::string* taskedasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_taskedasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_taskedasset(
      std::string* taskedasset);
  private:
  const std::string& _internal_taskedasset() const;
  void _internal_set_taskedasset(const std::string& value);
  std::string* _internal_mutable_taskedasset();
  public:

  // bytes TargetOperatingMedium = 7;
  void clear_targetoperatingmedium();
  const std::string& targetoperatingmedium() const;
  void set_targetoperatingmedium(const std::string& value);
  void set_targetoperatingmedium(std::string&& value);
  void set_targetoperatingmedium(const char* value);
  void set_targetoperatingmedium(const void* value, size_t size);
  std::string* mutable_targetoperatingmedium();
  std::string* release_targetoperatingmedium();
  void set_allocated_targetoperatingmedium(std::string* targetoperatingmedium);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetoperatingmedium();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetoperatingmedium(
      std::string* targetoperatingmedium);
  private:
  const std::string& _internal_targetoperatingmedium() const;
  void _internal_set_targetoperatingmedium(const std::string& value);
  std::string* _internal_mutable_targetoperatingmedium();
  public:

  // bytes TargetID = 8;
  void clear_targetid();
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const void* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetid(
      std::string* targetid);
  private:
  const std::string& _internal_targetid() const;
  void _internal_set_targetid(const std::string& value);
  std::string* _internal_mutable_targetid();
  public:

  // bytes TargetClassification = 9;
  void clear_targetclassification();
  const std::string& targetclassification() const;
  void set_targetclassification(const std::string& value);
  void set_targetclassification(std::string&& value);
  void set_targetclassification(const char* value);
  void set_targetclassification(const void* value, size_t size);
  std::string* mutable_targetclassification();
  std::string* release_targetclassification();
  void set_allocated_targetclassification(std::string* targetclassification);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_targetclassification();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_targetclassification(
      std::string* targetclassification);
  private:
  const std::string& _internal_targetclassification() const;
  void _internal_set_targetclassification(const std::string& value);
  std::string* _internal_mutable_targetclassification();
  public:

  // bytes OrderType = 11;
  void clear_ordertype();
  const std::string& ordertype() const;
  void set_ordertype(const std::string& value);
  void set_ordertype(std::string&& value);
  void set_ordertype(const char* value);
  void set_ordertype(const void* value, size_t size);
  std::string* mutable_ordertype();
  std::string* release_ordertype();
  void set_allocated_ordertype(std::string* ordertype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordertype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordertype(
      std::string* ordertype);
  private:
  const std::string& _internal_ordertype() const;
  void _internal_set_ordertype(const std::string& value);
  std::string* _internal_mutable_ordertype();
  public:

  // bytes ActualTarget = 12;
  void clear_actualtarget();
  const std::string& actualtarget() const;
  void set_actualtarget(const std::string& value);
  void set_actualtarget(std::string&& value);
  void set_actualtarget(const char* value);
  void set_actualtarget(const void* value, size_t size);
  std::string* mutable_actualtarget();
  std::string* release_actualtarget();
  void set_allocated_actualtarget(std::string* actualtarget);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_actualtarget();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_actualtarget(
      std::string* actualtarget);
  private:
  const std::string& _internal_actualtarget() const;
  void _internal_set_actualtarget(const std::string& value);
  std::string* _internal_mutable_actualtarget();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // uint32 GroupTrack_p = 2;
  void clear_grouptrack_p();
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrack_p() const;
  void set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grouptrack_p() const;
  void _internal_set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CommanderTrackID = 4;
  void clear_commandertrackid();
  ::PROTOBUF_NAMESPACE_ID::uint32 commandertrackid() const;
  void set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_commandertrackid() const;
  void _internal_set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 GroupTrackComponentCount = 10;
  void clear_grouptrackcomponentcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrackcomponentcount() const;
  void set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grouptrackcomponentcount() const;
  void _internal_set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CommandTaskCompleted_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thewarfarecommander_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commanderorderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskedasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetoperatingmedium_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetclassification_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordertype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actualtarget_;
  double time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrack_p_;
  ::PROTOBUF_NAMESPACE_ID::uint32 commandertrackid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grouptrackcomponentcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AircraftDeckAbortEvent_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AircraftDeckAbortEvent_Proto) */ {
 public:
  inline USIM_AircraftDeckAbortEvent_Proto() : USIM_AircraftDeckAbortEvent_Proto(nullptr) {};
  virtual ~USIM_AircraftDeckAbortEvent_Proto();

  USIM_AircraftDeckAbortEvent_Proto(const USIM_AircraftDeckAbortEvent_Proto& from);
  USIM_AircraftDeckAbortEvent_Proto(USIM_AircraftDeckAbortEvent_Proto&& from) noexcept
    : USIM_AircraftDeckAbortEvent_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AircraftDeckAbortEvent_Proto& operator=(const USIM_AircraftDeckAbortEvent_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AircraftDeckAbortEvent_Proto& operator=(USIM_AircraftDeckAbortEvent_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AircraftDeckAbortEvent_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AircraftDeckAbortEvent_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AircraftDeckAbortEvent_Proto*>(
               &_USIM_AircraftDeckAbortEvent_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(USIM_AircraftDeckAbortEvent_Proto& a, USIM_AircraftDeckAbortEvent_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AircraftDeckAbortEvent_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AircraftDeckAbortEvent_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AircraftDeckAbortEvent_Proto* New() const final {
    return CreateMaybeMessage<USIM_AircraftDeckAbortEvent_Proto>(nullptr);
  }

  USIM_AircraftDeckAbortEvent_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AircraftDeckAbortEvent_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AircraftDeckAbortEvent_Proto& from);
  void MergeFrom(const USIM_AircraftDeckAbortEvent_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AircraftDeckAbortEvent_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AircraftDeckAbortEvent_Proto";
  }
  protected:
  explicit USIM_AircraftDeckAbortEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirbaseFieldNumber = 2,
    kAircraftFieldNumber = 3,
    kSortieTypeFieldNumber = 4,
    kCallSignFieldNumber = 5,
    kWarfareCommanderNameFieldNumber = 6,
    kOrderIdFieldNumber = 7,
    kMissionTypeFieldNumber = 8,
    kMissionPlannameFieldNumber = 9,
    kIntentionsFieldNumber = 10,
    kTimeFieldNumber = 1,
    kMaintainDelayFieldNumber = 12,
    kMaintainTimeFieldNumber = 13,
    kTurnarundTimeFieldNumber = 14,
    kAvailableTimeFieldNumber = 15,
    kMajorPFieldNumber = 11,
  };
  // bytes Airbase = 2;
  void clear_airbase();
  const std::string& airbase() const;
  void set_airbase(const std::string& value);
  void set_airbase(std::string&& value);
  void set_airbase(const char* value);
  void set_airbase(const void* value, size_t size);
  std::string* mutable_airbase();
  std::string* release_airbase();
  void set_allocated_airbase(std::string* airbase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_airbase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_airbase(
      std::string* airbase);
  private:
  const std::string& _internal_airbase() const;
  void _internal_set_airbase(const std::string& value);
  std::string* _internal_mutable_airbase();
  public:

  // bytes Aircraft = 3;
  void clear_aircraft();
  const std::string& aircraft() const;
  void set_aircraft(const std::string& value);
  void set_aircraft(std::string&& value);
  void set_aircraft(const char* value);
  void set_aircraft(const void* value, size_t size);
  std::string* mutable_aircraft();
  std::string* release_aircraft();
  void set_allocated_aircraft(std::string* aircraft);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aircraft();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aircraft(
      std::string* aircraft);
  private:
  const std::string& _internal_aircraft() const;
  void _internal_set_aircraft(const std::string& value);
  std::string* _internal_mutable_aircraft();
  public:

  // bytes SortieType = 4;
  void clear_sortietype();
  const std::string& sortietype() const;
  void set_sortietype(const std::string& value);
  void set_sortietype(std::string&& value);
  void set_sortietype(const char* value);
  void set_sortietype(const void* value, size_t size);
  std::string* mutable_sortietype();
  std::string* release_sortietype();
  void set_allocated_sortietype(std::string* sortietype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sortietype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sortietype(
      std::string* sortietype);
  private:
  const std::string& _internal_sortietype() const;
  void _internal_set_sortietype(const std::string& value);
  std::string* _internal_mutable_sortietype();
  public:

  // bytes CallSign = 5;
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const void* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_callsign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_callsign(
      std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // bytes WarfareCommanderName = 6;
  void clear_warfarecommandername();
  const std::string& warfarecommandername() const;
  void set_warfarecommandername(const std::string& value);
  void set_warfarecommandername(std::string&& value);
  void set_warfarecommandername(const char* value);
  void set_warfarecommandername(const void* value, size_t size);
  std::string* mutable_warfarecommandername();
  std::string* release_warfarecommandername();
  void set_allocated_warfarecommandername(std::string* warfarecommandername);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_warfarecommandername();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_warfarecommandername(
      std::string* warfarecommandername);
  private:
  const std::string& _internal_warfarecommandername() const;
  void _internal_set_warfarecommandername(const std::string& value);
  std::string* _internal_mutable_warfarecommandername();
  public:

  // bytes OrderId = 7;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const void* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_orderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_orderid(
      std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // bytes MissionType = 8;
  void clear_missiontype();
  const std::string& missiontype() const;
  void set_missiontype(const std::string& value);
  void set_missiontype(std::string&& value);
  void set_missiontype(const char* value);
  void set_missiontype(const void* value, size_t size);
  std::string* mutable_missiontype();
  std::string* release_missiontype();
  void set_allocated_missiontype(std::string* missiontype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_missiontype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_missiontype(
      std::string* missiontype);
  private:
  const std::string& _internal_missiontype() const;
  void _internal_set_missiontype(const std::string& value);
  std::string* _internal_mutable_missiontype();
  public:

  // bytes MissionPlanname = 9;
  void clear_missionplanname();
  const std::string& missionplanname() const;
  void set_missionplanname(const std::string& value);
  void set_missionplanname(std::string&& value);
  void set_missionplanname(const char* value);
  void set_missionplanname(const void* value, size_t size);
  std::string* mutable_missionplanname();
  std::string* release_missionplanname();
  void set_allocated_missionplanname(std::string* missionplanname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_missionplanname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_missionplanname(
      std::string* missionplanname);
  private:
  const std::string& _internal_missionplanname() const;
  void _internal_set_missionplanname(const std::string& value);
  std::string* _internal_mutable_missionplanname();
  public:

  // bytes Intentions = 10;
  void clear_intentions();
  const std::string& intentions() const;
  void set_intentions(const std::string& value);
  void set_intentions(std::string&& value);
  void set_intentions(const char* value);
  void set_intentions(const void* value, size_t size);
  std::string* mutable_intentions();
  std::string* release_intentions();
  void set_allocated_intentions(std::string* intentions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_intentions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_intentions(
      std::string* intentions);
  private:
  const std::string& _internal_intentions() const;
  void _internal_set_intentions(const std::string& value);
  std::string* _internal_mutable_intentions();
  public:

  // double time = 1;
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // double MaintainDelay = 12;
  void clear_maintaindelay();
  double maintaindelay() const;
  void set_maintaindelay(double value);
  private:
  double _internal_maintaindelay() const;
  void _internal_set_maintaindelay(double value);
  public:

  // double MaintainTime = 13;
  void clear_maintaintime();
  double maintaintime() const;
  void set_maintaintime(double value);
  private:
  double _internal_maintaintime() const;
  void _internal_set_maintaintime(double value);
  public:

  // double TurnarundTime = 14;
  void clear_turnarundtime();
  double turnarundtime() const;
  void set_turnarundtime(double value);
  private:
  double _internal_turnarundtime() const;
  void _internal_set_turnarundtime(double value);
  public:

  // double AvailableTime = 15;
  void clear_availabletime();
  double availabletime() const;
  void set_availabletime(double value);
  private:
  double _internal_availabletime() const;
  void _internal_set_availabletime(double value);
  public:

  // uint32 Major_p = 11;
  void clear_major_p();
  ::PROTOBUF_NAMESPACE_ID::uint32 major_p() const;
  void set_major_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major_p() const;
  void _internal_set_major_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AircraftDeckAbortEvent_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr airbase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aircraft_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sortietype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warfarecommandername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr missiontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr missionplanname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr intentions_;
  double time_;
  double maintaindelay_;
  double maintaintime_;
  double turnarundtime_;
  double availabletime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_p_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_DyamicCycle_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_DyamicCycle_Proto) */ {
 public:
  inline USIM_DyamicCycle_Proto() : USIM_DyamicCycle_Proto(nullptr) {};
  virtual ~USIM_DyamicCycle_Proto();

  USIM_DyamicCycle_Proto(const USIM_DyamicCycle_Proto& from);
  USIM_DyamicCycle_Proto(USIM_DyamicCycle_Proto&& from) noexcept
    : USIM_DyamicCycle_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_DyamicCycle_Proto& operator=(const USIM_DyamicCycle_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_DyamicCycle_Proto& operator=(USIM_DyamicCycle_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_DyamicCycle_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_DyamicCycle_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_DyamicCycle_Proto*>(
               &_USIM_DyamicCycle_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(USIM_DyamicCycle_Proto& a, USIM_DyamicCycle_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_DyamicCycle_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_DyamicCycle_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_DyamicCycle_Proto* New() const final {
    return CreateMaybeMessage<USIM_DyamicCycle_Proto>(nullptr);
  }

  USIM_DyamicCycle_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_DyamicCycle_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_DyamicCycle_Proto& from);
  void MergeFrom(const USIM_DyamicCycle_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_DyamicCycle_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_DyamicCycle_Proto";
  }
  protected:
  explicit USIM_DyamicCycle_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTargetIDFieldNumber = 3,
    kUColorFieldNumber = 5,
  };
  // bytes sUuid = 4;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTargetID = 3;
  void clear_utargetid();
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid() const;
  void set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utargetid() const;
  void _internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uColor = 5;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_DyamicCycle_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utargetid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_WedgeBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_WedgeBeam_Proto) */ {
 public:
  inline USIM_WedgeBeam_Proto() : USIM_WedgeBeam_Proto(nullptr) {};
  virtual ~USIM_WedgeBeam_Proto();

  USIM_WedgeBeam_Proto(const USIM_WedgeBeam_Proto& from);
  USIM_WedgeBeam_Proto(USIM_WedgeBeam_Proto&& from) noexcept
    : USIM_WedgeBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_WedgeBeam_Proto& operator=(const USIM_WedgeBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_WedgeBeam_Proto& operator=(USIM_WedgeBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_WedgeBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_WedgeBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_WedgeBeam_Proto*>(
               &_USIM_WedgeBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(USIM_WedgeBeam_Proto& a, USIM_WedgeBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_WedgeBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_WedgeBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_WedgeBeam_Proto* New() const final {
    return CreateMaybeMessage<USIM_WedgeBeam_Proto>(nullptr);
  }

  USIM_WedgeBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_WedgeBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_WedgeBeam_Proto& from);
  void MergeFrom(const USIM_WedgeBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_WedgeBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_WedgeBeam_Proto";
  }
  protected:
  explicit USIM_WedgeBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTypeFieldNumber = 4,
    kUColorFieldNumber = 6,
    kBFiledFieldNumber = 5,
    kUDisplayTypeFieldNumber = 7,
    kDfAzimuthAngleFieldNumber = 8,
    kDfPitchAngleFieldNumber = 9,
    kDfLROpeningAngleFieldNumber = 10,
    kDfUDOpeningAngleFieldNumber = 11,
    kDfCloseCutDistanceFieldNumber = 12,
    kDfLengthFieldNumber = 13,
  };
  // bytes sUuid = 3;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uType = 4;
  void clear_utype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utype() const;
  void set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utype() const;
  void _internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uColor = 6;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool bFiled = 5;
  void clear_bfiled();
  bool bfiled() const;
  void set_bfiled(bool value);
  private:
  bool _internal_bfiled() const;
  void _internal_set_bfiled(bool value);
  public:

  // uint32 uDisplayType = 7;
  void clear_udisplaytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype() const;
  void set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udisplaytype() const;
  void _internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float dfAzimuthAngle = 8;
  void clear_dfazimuthangle();
  float dfazimuthangle() const;
  void set_dfazimuthangle(float value);
  private:
  float _internal_dfazimuthangle() const;
  void _internal_set_dfazimuthangle(float value);
  public:

  // float dfPitchAngle = 9;
  void clear_dfpitchangle();
  float dfpitchangle() const;
  void set_dfpitchangle(float value);
  private:
  float _internal_dfpitchangle() const;
  void _internal_set_dfpitchangle(float value);
  public:

  // float dfLROpeningAngle = 10;
  void clear_dflropeningangle();
  float dflropeningangle() const;
  void set_dflropeningangle(float value);
  private:
  float _internal_dflropeningangle() const;
  void _internal_set_dflropeningangle(float value);
  public:

  // float dfUDOpeningAngle = 11;
  void clear_dfudopeningangle();
  float dfudopeningangle() const;
  void set_dfudopeningangle(float value);
  private:
  float _internal_dfudopeningangle() const;
  void _internal_set_dfudopeningangle(float value);
  public:

  // double dfCloseCutDistance = 12;
  void clear_dfclosecutdistance();
  double dfclosecutdistance() const;
  void set_dfclosecutdistance(double value);
  private:
  double _internal_dfclosecutdistance() const;
  void _internal_set_dfclosecutdistance(double value);
  public:

  // double dfLength = 13;
  void clear_dflength();
  double dflength() const;
  void set_dflength(double value);
  private:
  double _internal_dflength() const;
  void _internal_set_dflength(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_WedgeBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  bool bfiled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype_;
  float dfazimuthangle_;
  float dfpitchangle_;
  float dflropeningangle_;
  float dfudopeningangle_;
  double dfclosecutdistance_;
  double dflength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIN_SphereBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIN_SphereBeam_Proto) */ {
 public:
  inline USIN_SphereBeam_Proto() : USIN_SphereBeam_Proto(nullptr) {};
  virtual ~USIN_SphereBeam_Proto();

  USIN_SphereBeam_Proto(const USIN_SphereBeam_Proto& from);
  USIN_SphereBeam_Proto(USIN_SphereBeam_Proto&& from) noexcept
    : USIN_SphereBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIN_SphereBeam_Proto& operator=(const USIN_SphereBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIN_SphereBeam_Proto& operator=(USIN_SphereBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIN_SphereBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIN_SphereBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIN_SphereBeam_Proto*>(
               &_USIN_SphereBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(USIN_SphereBeam_Proto& a, USIN_SphereBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIN_SphereBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIN_SphereBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIN_SphereBeam_Proto* New() const final {
    return CreateMaybeMessage<USIN_SphereBeam_Proto>(nullptr);
  }

  USIN_SphereBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIN_SphereBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIN_SphereBeam_Proto& from);
  void MergeFrom(const USIN_SphereBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIN_SphereBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIN_SphereBeam_Proto";
  }
  protected:
  explicit USIN_SphereBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kTypeFieldNumber = 4,
    kDfradiusFieldNumber = 5,
  };
  // bytes sUuid = 3;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfradius = 5;
  void clear_dfradius();
  double dfradius() const;
  void set_dfradius(double value);
  private:
  double _internal_dfradius() const;
  void _internal_set_dfradius(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIN_SphereBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  double dfradius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CircleBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CircleBeam_Proto) */ {
 public:
  inline USIM_CircleBeam_Proto() : USIM_CircleBeam_Proto(nullptr) {};
  virtual ~USIM_CircleBeam_Proto();

  USIM_CircleBeam_Proto(const USIM_CircleBeam_Proto& from);
  USIM_CircleBeam_Proto(USIM_CircleBeam_Proto&& from) noexcept
    : USIM_CircleBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CircleBeam_Proto& operator=(const USIM_CircleBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CircleBeam_Proto& operator=(USIM_CircleBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CircleBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CircleBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CircleBeam_Proto*>(
               &_USIM_CircleBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(USIM_CircleBeam_Proto& a, USIM_CircleBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CircleBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CircleBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CircleBeam_Proto* New() const final {
    return CreateMaybeMessage<USIM_CircleBeam_Proto>(nullptr);
  }

  USIM_CircleBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CircleBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CircleBeam_Proto& from);
  void MergeFrom(const USIM_CircleBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CircleBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CircleBeam_Proto";
  }
  protected:
  explicit USIM_CircleBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kDfUDOpeningAngleFieldNumber = 4,
    kDfLengthFieldNumber = 5,
    kUIDFieldNumber = 2,
  };
  // bytes sUuid = 3;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // double dfUDOpeningAngle = 4;
  void clear_dfudopeningangle();
  double dfudopeningangle() const;
  void set_dfudopeningangle(double value);
  private:
  double _internal_dfudopeningangle() const;
  void _internal_set_dfudopeningangle(double value);
  public:

  // double dfLength = 5;
  void clear_dflength();
  double dflength() const;
  void set_dflength(double value);
  private:
  double _internal_dflength() const;
  void _internal_set_dflength(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CircleBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  double dfudopeningangle_;
  double dflength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_ConeBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_ConeBeam_Proto) */ {
 public:
  inline USIM_ConeBeam_Proto() : USIM_ConeBeam_Proto(nullptr) {};
  virtual ~USIM_ConeBeam_Proto();

  USIM_ConeBeam_Proto(const USIM_ConeBeam_Proto& from);
  USIM_ConeBeam_Proto(USIM_ConeBeam_Proto&& from) noexcept
    : USIM_ConeBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_ConeBeam_Proto& operator=(const USIM_ConeBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_ConeBeam_Proto& operator=(USIM_ConeBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_ConeBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_ConeBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_ConeBeam_Proto*>(
               &_USIM_ConeBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(USIM_ConeBeam_Proto& a, USIM_ConeBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_ConeBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_ConeBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_ConeBeam_Proto* New() const final {
    return CreateMaybeMessage<USIM_ConeBeam_Proto>(nullptr);
  }

  USIM_ConeBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_ConeBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_ConeBeam_Proto& from);
  void MergeFrom(const USIM_ConeBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_ConeBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_ConeBeam_Proto";
  }
  protected:
  explicit USIM_ConeBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTerminalIDFieldNumber = 3,
    kDfradiusFieldNumber = 5,
    kDfAzimuthAngleFieldNumber = 6,
    kDfPitchAngleFieldNumber = 7,
    kDfOpeningAngleFieldNumber = 8,
  };
  // bytes sUuid = 4;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTerminalID = 3;
  void clear_uterminalid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid() const;
  void set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uterminalid() const;
  void _internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double dfradius = 5;
  void clear_dfradius();
  double dfradius() const;
  void set_dfradius(double value);
  private:
  double _internal_dfradius() const;
  void _internal_set_dfradius(double value);
  public:

  // double dfAzimuthAngle = 6;
  void clear_dfazimuthangle();
  double dfazimuthangle() const;
  void set_dfazimuthangle(double value);
  private:
  double _internal_dfazimuthangle() const;
  void _internal_set_dfazimuthangle(double value);
  public:

  // double dfPitchAngle = 7;
  void clear_dfpitchangle();
  double dfpitchangle() const;
  void set_dfpitchangle(double value);
  private:
  double _internal_dfpitchangle() const;
  void _internal_set_dfpitchangle(double value);
  public:

  // double dfOpeningAngle = 8;
  void clear_dfopeningangle();
  double dfopeningangle() const;
  void set_dfopeningangle(double value);
  private:
  double _internal_dfopeningangle() const;
  void _internal_set_dfopeningangle(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_ConeBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid_;
  double dfradius_;
  double dfazimuthangle_;
  double dfpitchangle_;
  double dfopeningangle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_PyramidBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_PyramidBeam_Proto) */ {
 public:
  inline USIM_PyramidBeam_Proto() : USIM_PyramidBeam_Proto(nullptr) {};
  virtual ~USIM_PyramidBeam_Proto();

  USIM_PyramidBeam_Proto(const USIM_PyramidBeam_Proto& from);
  USIM_PyramidBeam_Proto(USIM_PyramidBeam_Proto&& from) noexcept
    : USIM_PyramidBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_PyramidBeam_Proto& operator=(const USIM_PyramidBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_PyramidBeam_Proto& operator=(USIM_PyramidBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_PyramidBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_PyramidBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_PyramidBeam_Proto*>(
               &_USIM_PyramidBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(USIM_PyramidBeam_Proto& a, USIM_PyramidBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_PyramidBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_PyramidBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_PyramidBeam_Proto* New() const final {
    return CreateMaybeMessage<USIM_PyramidBeam_Proto>(nullptr);
  }

  USIM_PyramidBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_PyramidBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_PyramidBeam_Proto& from);
  void MergeFrom(const USIM_PyramidBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_PyramidBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_PyramidBeam_Proto";
  }
  protected:
  explicit USIM_PyramidBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTerminalIDFieldNumber = 3,
    kUTypeFieldNumber = 5,
    kBFiledFieldNumber = 6,
    kUColorFieldNumber = 7,
    kDfAzimuthAngleFieldNumber = 9,
    kDfPitchAngleFieldNumber = 10,
    kDfLROpeningAngleFieldNumber = 11,
    kDfUDOpeningAngleFieldNumber = 12,
    kDfradiusFieldNumber = 13,
    kDfLengthFieldNumber = 14,
    kUDisplayTypeFieldNumber = 8,
  };
  // bytes sUuid = 4;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTerminalID = 3;
  void clear_uterminalid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid() const;
  void set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uterminalid() const;
  void _internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uType = 5;
  void clear_utype();
  ::PROTOBUF_NAMESPACE_ID::uint32 utype() const;
  void set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_utype() const;
  void _internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bFiled = 6;
  void clear_bfiled();
  bool bfiled() const;
  void set_bfiled(bool value);
  private:
  bool _internal_bfiled() const;
  void _internal_set_bfiled(bool value);
  public:

  // uint64 uColor = 7;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double dfAzimuthAngle = 9;
  void clear_dfazimuthangle();
  double dfazimuthangle() const;
  void set_dfazimuthangle(double value);
  private:
  double _internal_dfazimuthangle() const;
  void _internal_set_dfazimuthangle(double value);
  public:

  // double dfPitchAngle = 10;
  void clear_dfpitchangle();
  double dfpitchangle() const;
  void set_dfpitchangle(double value);
  private:
  double _internal_dfpitchangle() const;
  void _internal_set_dfpitchangle(double value);
  public:

  // double dfLROpeningAngle = 11;
  void clear_dflropeningangle();
  double dflropeningangle() const;
  void set_dflropeningangle(double value);
  private:
  double _internal_dflropeningangle() const;
  void _internal_set_dflropeningangle(double value);
  public:

  // double dfUDOpeningAngle = 12;
  void clear_dfudopeningangle();
  double dfudopeningangle() const;
  void set_dfudopeningangle(double value);
  private:
  double _internal_dfudopeningangle() const;
  void _internal_set_dfudopeningangle(double value);
  public:

  // double dfradius = 13;
  void clear_dfradius();
  double dfradius() const;
  void set_dfradius(double value);
  private:
  double _internal_dfradius() const;
  void _internal_set_dfradius(double value);
  public:

  // double dfLength = 14;
  void clear_dflength();
  double dflength() const;
  void set_dflength(double value);
  private:
  double _internal_dflength() const;
  void _internal_set_dflength(double value);
  public:

  // uint32 uDisplayType = 8;
  void clear_udisplaytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype() const;
  void set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udisplaytype() const;
  void _internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_PyramidBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 utype_;
  bool bfiled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  double dfazimuthangle_;
  double dfpitchangle_;
  double dflropeningangle_;
  double dfudopeningangle_;
  double dfradius_;
  double dflength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_CylinderBeam_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_CylinderBeam_Proto) */ {
 public:
  inline USIM_CylinderBeam_Proto() : USIM_CylinderBeam_Proto(nullptr) {};
  virtual ~USIM_CylinderBeam_Proto();

  USIM_CylinderBeam_Proto(const USIM_CylinderBeam_Proto& from);
  USIM_CylinderBeam_Proto(USIM_CylinderBeam_Proto&& from) noexcept
    : USIM_CylinderBeam_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_CylinderBeam_Proto& operator=(const USIM_CylinderBeam_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_CylinderBeam_Proto& operator=(USIM_CylinderBeam_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_CylinderBeam_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_CylinderBeam_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_CylinderBeam_Proto*>(
               &_USIM_CylinderBeam_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(USIM_CylinderBeam_Proto& a, USIM_CylinderBeam_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_CylinderBeam_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_CylinderBeam_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_CylinderBeam_Proto* New() const final {
    return CreateMaybeMessage<USIM_CylinderBeam_Proto>(nullptr);
  }

  USIM_CylinderBeam_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_CylinderBeam_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_CylinderBeam_Proto& from);
  void MergeFrom(const USIM_CylinderBeam_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_CylinderBeam_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_CylinderBeam_Proto";
  }
  protected:
  explicit USIM_CylinderBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kBFiledFieldNumber = 4,
    kUColorFieldNumber = 5,
    kDfAzimuthAngleFieldNumber = 7,
    kDfPitchAngleFieldNumber = 8,
    kDfradiusFieldNumber = 9,
    kDfLengthFieldNumber = 10,
    kUDisplayTypeFieldNumber = 6,
  };
  // bytes sUuid = 3;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bFiled = 4;
  void clear_bfiled();
  bool bfiled() const;
  void set_bfiled(bool value);
  private:
  bool _internal_bfiled() const;
  void _internal_set_bfiled(bool value);
  public:

  // uint64 uColor = 5;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double dfAzimuthAngle = 7;
  void clear_dfazimuthangle();
  double dfazimuthangle() const;
  void set_dfazimuthangle(double value);
  private:
  double _internal_dfazimuthangle() const;
  void _internal_set_dfazimuthangle(double value);
  public:

  // double dfPitchAngle = 8;
  void clear_dfpitchangle();
  double dfpitchangle() const;
  void set_dfpitchangle(double value);
  private:
  double _internal_dfpitchangle() const;
  void _internal_set_dfpitchangle(double value);
  public:

  // double dfradius = 9;
  void clear_dfradius();
  double dfradius() const;
  void set_dfradius(double value);
  private:
  double _internal_dfradius() const;
  void _internal_set_dfradius(double value);
  public:

  // double dfLength = 10;
  void clear_dflength();
  double dflength() const;
  void set_dflength(double value);
  private:
  double _internal_dflength() const;
  void _internal_set_dflength(double value);
  public:

  // uint32 uDisplayType = 6;
  void clear_udisplaytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype() const;
  void set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_udisplaytype() const;
  void _internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_CylinderBeam_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  bool bfiled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  double dfazimuthangle_;
  double dfpitchangle_;
  double dfradius_;
  double dflength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 udisplaytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_Line_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_Line_Proto) */ {
 public:
  inline USIM_Line_Proto() : USIM_Line_Proto(nullptr) {};
  virtual ~USIM_Line_Proto();

  USIM_Line_Proto(const USIM_Line_Proto& from);
  USIM_Line_Proto(USIM_Line_Proto&& from) noexcept
    : USIM_Line_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_Line_Proto& operator=(const USIM_Line_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_Line_Proto& operator=(USIM_Line_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_Line_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_Line_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_Line_Proto*>(
               &_USIM_Line_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(USIM_Line_Proto& a, USIM_Line_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_Line_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_Line_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_Line_Proto* New() const final {
    return CreateMaybeMessage<USIM_Line_Proto>(nullptr);
  }

  USIM_Line_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_Line_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_Line_Proto& from);
  void MergeFrom(const USIM_Line_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_Line_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_Line_Proto";
  }
  protected:
  explicit USIM_Line_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kUTerminalIDFieldNumber = 3,
    kUColorFieldNumber = 6,
    kULineTypeFieldNumber = 5,
  };
  // bytes sUuid = 4;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 uTerminalID = 3;
  void clear_uterminalid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid() const;
  void set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uterminalid() const;
  void _internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uColor = 6;
  void clear_ucolor();
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor() const;
  void set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ucolor() const;
  void _internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 uLineType = 5;
  void clear_ulinetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 ulinetype() const;
  void set_ulinetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ulinetype() const;
  void _internal_set_ulinetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_Line_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uterminalid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ucolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ulinetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_GraphOnoff_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_GraphOnoff_Proto) */ {
 public:
  inline USIM_GraphOnoff_Proto() : USIM_GraphOnoff_Proto(nullptr) {};
  virtual ~USIM_GraphOnoff_Proto();

  USIM_GraphOnoff_Proto(const USIM_GraphOnoff_Proto& from);
  USIM_GraphOnoff_Proto(USIM_GraphOnoff_Proto&& from) noexcept
    : USIM_GraphOnoff_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_GraphOnoff_Proto& operator=(const USIM_GraphOnoff_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_GraphOnoff_Proto& operator=(USIM_GraphOnoff_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_GraphOnoff_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_GraphOnoff_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_GraphOnoff_Proto*>(
               &_USIM_GraphOnoff_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(USIM_GraphOnoff_Proto& a, USIM_GraphOnoff_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_GraphOnoff_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_GraphOnoff_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_GraphOnoff_Proto* New() const final {
    return CreateMaybeMessage<USIM_GraphOnoff_Proto>(nullptr);
  }

  USIM_GraphOnoff_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_GraphOnoff_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_GraphOnoff_Proto& from);
  void MergeFrom(const USIM_GraphOnoff_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_GraphOnoff_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_GraphOnoff_Proto";
  }
  protected:
  explicit USIM_GraphOnoff_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSUuidFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
  };
  // bytes sUuid = 3;
  void clear_suuid();
  const std::string& suuid() const;
  void set_suuid(const std::string& value);
  void set_suuid(std::string&& value);
  void set_suuid(const char* value);
  void set_suuid(const void* value, size_t size);
  std::string* mutable_suuid();
  std::string* release_suuid();
  void set_allocated_suuid(std::string* suuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suuid(
      std::string* suuid);
  private:
  const std::string& _internal_suuid() const;
  void _internal_set_suuid(const std::string& value);
  std::string* _internal_mutable_suuid();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_GraphOnoff_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suuid_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_SonarDetectInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_SonarDetectInfo_Proto) */ {
 public:
  inline USIM_SonarDetectInfo_Proto() : USIM_SonarDetectInfo_Proto(nullptr) {};
  virtual ~USIM_SonarDetectInfo_Proto();

  USIM_SonarDetectInfo_Proto(const USIM_SonarDetectInfo_Proto& from);
  USIM_SonarDetectInfo_Proto(USIM_SonarDetectInfo_Proto&& from) noexcept
    : USIM_SonarDetectInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_SonarDetectInfo_Proto& operator=(const USIM_SonarDetectInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_SonarDetectInfo_Proto& operator=(USIM_SonarDetectInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_SonarDetectInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_SonarDetectInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_SonarDetectInfo_Proto*>(
               &_USIM_SonarDetectInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(USIM_SonarDetectInfo_Proto& a, USIM_SonarDetectInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_SonarDetectInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_SonarDetectInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_SonarDetectInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_SonarDetectInfo_Proto>(nullptr);
  }

  USIM_SonarDetectInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_SonarDetectInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_SonarDetectInfo_Proto& from);
  void MergeFrom(const USIM_SonarDetectInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_SonarDetectInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_SonarDetectInfo_Proto";
  }
  protected:
  explicit USIM_SonarDetectInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaTargetIDFieldNumber = 4,
    kParaRSLPassiveFieldNumber = 5,
    kParaRSLActiveFieldNumber = 6,
    kParaTSFieldNumber = 7,
    kParaRNRFieldNumber = 8,
    kParaGainFieldNumber = 9,
    kParaPdFieldNumber = 10,
    kParaTltFieldNumber = 11,
    kPlatnameFieldNumber = 2,
    kDetectorFieldNumber = 3,
    kPlatIdFieldNumber = 1,
  };
  // repeated uint32 para_targetID = 4;
  int para_targetid_size() const;
  private:
  int _internal_para_targetid_size() const;
  public:
  void clear_para_targetid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_para_targetid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_para_targetid() const;
  void _internal_add_para_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_para_targetid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 para_targetid(int index) const;
  void set_para_targetid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_para_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      para_targetid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_para_targetid();

  // repeated double para_RSL_passive = 5;
  int para_rsl_passive_size() const;
  private:
  int _internal_para_rsl_passive_size() const;
  public:
  void clear_para_rsl_passive();
  private:
  double _internal_para_rsl_passive(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_rsl_passive() const;
  void _internal_add_para_rsl_passive(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_rsl_passive();
  public:
  double para_rsl_passive(int index) const;
  void set_para_rsl_passive(int index, double value);
  void add_para_rsl_passive(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_rsl_passive() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_rsl_passive();

  // repeated double para_RSL_active = 6;
  int para_rsl_active_size() const;
  private:
  int _internal_para_rsl_active_size() const;
  public:
  void clear_para_rsl_active();
  private:
  double _internal_para_rsl_active(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_rsl_active() const;
  void _internal_add_para_rsl_active(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_rsl_active();
  public:
  double para_rsl_active(int index) const;
  void set_para_rsl_active(int index, double value);
  void add_para_rsl_active(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_rsl_active() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_rsl_active();

  // repeated double para_TS = 7;
  int para_ts_size() const;
  private:
  int _internal_para_ts_size() const;
  public:
  void clear_para_ts();
  private:
  double _internal_para_ts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_ts() const;
  void _internal_add_para_ts(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_ts();
  public:
  double para_ts(int index) const;
  void set_para_ts(int index, double value);
  void add_para_ts(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_ts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_ts();

  // repeated double para_RNR = 8;
  int para_rnr_size() const;
  private:
  int _internal_para_rnr_size() const;
  public:
  void clear_para_rnr();
  private:
  double _internal_para_rnr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_rnr() const;
  void _internal_add_para_rnr(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_rnr();
  public:
  double para_rnr(int index) const;
  void set_para_rnr(int index, double value);
  void add_para_rnr(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_rnr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_rnr();

  // repeated double para_gain = 9;
  int para_gain_size() const;
  private:
  int _internal_para_gain_size() const;
  public:
  void clear_para_gain();
  private:
  double _internal_para_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_gain() const;
  void _internal_add_para_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_gain();
  public:
  double para_gain(int index) const;
  void set_para_gain(int index, double value);
  void add_para_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_gain();

  // repeated double para_pd = 10;
  int para_pd_size() const;
  private:
  int _internal_para_pd_size() const;
  public:
  void clear_para_pd();
  private:
  double _internal_para_pd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_pd() const;
  void _internal_add_para_pd(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_pd();
  public:
  double para_pd(int index) const;
  void set_para_pd(int index, double value);
  void add_para_pd(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_pd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_pd();

  // repeated double para_tlt = 11;
  int para_tlt_size() const;
  private:
  int _internal_para_tlt_size() const;
  public:
  void clear_para_tlt();
  private:
  double _internal_para_tlt(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_para_tlt() const;
  void _internal_add_para_tlt(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_para_tlt();
  public:
  double para_tlt(int index) const;
  void set_para_tlt(int index, double value);
  void add_para_tlt(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      para_tlt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_para_tlt();

  // bytes platname = 2;
  void clear_platname();
  const std::string& platname() const;
  void set_platname(const std::string& value);
  void set_platname(std::string&& value);
  void set_platname(const char* value);
  void set_platname(const void* value, size_t size);
  std::string* mutable_platname();
  std::string* release_platname();
  void set_allocated_platname(std::string* platname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_platname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_platname(
      std::string* platname);
  private:
  const std::string& _internal_platname() const;
  void _internal_set_platname(const std::string& value);
  std::string* _internal_mutable_platname();
  public:

  // bytes detector = 3;
  void clear_detector();
  const std::string& detector() const;
  void set_detector(const std::string& value);
  void set_detector(std::string&& value);
  void set_detector(const char* value);
  void set_detector(const void* value, size_t size);
  std::string* mutable_detector();
  std::string* release_detector();
  void set_allocated_detector(std::string* detector);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_detector();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_detector(
      std::string* detector);
  private:
  const std::string& _internal_detector() const;
  void _internal_set_detector(const std::string& value);
  std::string* _internal_mutable_detector();
  public:

  // uint32 plat_id = 1;
  void clear_plat_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 plat_id() const;
  void set_plat_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_plat_id() const;
  void _internal_set_plat_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_SonarDetectInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > para_targetid_;
  mutable std::atomic<int> _para_targetid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_rsl_passive_;
  mutable std::atomic<int> _para_rsl_passive_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_rsl_active_;
  mutable std::atomic<int> _para_rsl_active_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_ts_;
  mutable std::atomic<int> _para_ts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_rnr_;
  mutable std::atomic<int> _para_rnr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_gain_;
  mutable std::atomic<int> _para_gain_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_pd_;
  mutable std::atomic<int> _para_pd_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > para_tlt_;
  mutable std::atomic<int> _para_tlt_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 plat_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_SonobouyDetectInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_SonobouyDetectInfo_Proto) */ {
 public:
  inline USIM_SonobouyDetectInfo_Proto() : USIM_SonobouyDetectInfo_Proto(nullptr) {};
  virtual ~USIM_SonobouyDetectInfo_Proto();

  USIM_SonobouyDetectInfo_Proto(const USIM_SonobouyDetectInfo_Proto& from);
  USIM_SonobouyDetectInfo_Proto(USIM_SonobouyDetectInfo_Proto&& from) noexcept
    : USIM_SonobouyDetectInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_SonobouyDetectInfo_Proto& operator=(const USIM_SonobouyDetectInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_SonobouyDetectInfo_Proto& operator=(USIM_SonobouyDetectInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_SonobouyDetectInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_SonobouyDetectInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_SonobouyDetectInfo_Proto*>(
               &_USIM_SonobouyDetectInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(USIM_SonobouyDetectInfo_Proto& a, USIM_SonobouyDetectInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_SonobouyDetectInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_SonobouyDetectInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_SonobouyDetectInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_SonobouyDetectInfo_Proto>(nullptr);
  }

  USIM_SonobouyDetectInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_SonobouyDetectInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_SonobouyDetectInfo_Proto& from);
  void MergeFrom(const USIM_SonobouyDetectInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_SonobouyDetectInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_SonobouyDetectInfo_Proto";
  }
  protected:
  explicit USIM_SonobouyDetectInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParaDetectInfoFieldNumber = 1,
  };
  // repeated .USIM_SonarDetectInfo_Proto para_DetectInfo = 1;
  int para_detectinfo_size() const;
  private:
  int _internal_para_detectinfo_size() const;
  public:
  void clear_para_detectinfo();
  ::USIM_SonarDetectInfo_Proto* mutable_para_detectinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_SonarDetectInfo_Proto >*
      mutable_para_detectinfo();
  private:
  const ::USIM_SonarDetectInfo_Proto& _internal_para_detectinfo(int index) const;
  ::USIM_SonarDetectInfo_Proto* _internal_add_para_detectinfo();
  public:
  const ::USIM_SonarDetectInfo_Proto& para_detectinfo(int index) const;
  ::USIM_SonarDetectInfo_Proto* add_para_detectinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_SonarDetectInfo_Proto >&
      para_detectinfo() const;

  // @@protoc_insertion_point(class_scope:USIM_SonobouyDetectInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_SonarDetectInfo_Proto > para_detectinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_ChargeInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_ChargeInfo_Proto) */ {
 public:
  inline USIM_ChargeInfo_Proto() : USIM_ChargeInfo_Proto(nullptr) {};
  virtual ~USIM_ChargeInfo_Proto();

  USIM_ChargeInfo_Proto(const USIM_ChargeInfo_Proto& from);
  USIM_ChargeInfo_Proto(USIM_ChargeInfo_Proto&& from) noexcept
    : USIM_ChargeInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_ChargeInfo_Proto& operator=(const USIM_ChargeInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_ChargeInfo_Proto& operator=(USIM_ChargeInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_ChargeInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_ChargeInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_ChargeInfo_Proto*>(
               &_USIM_ChargeInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(USIM_ChargeInfo_Proto& a, USIM_ChargeInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_ChargeInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_ChargeInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_ChargeInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_ChargeInfo_Proto>(nullptr);
  }

  USIM_ChargeInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_ChargeInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_ChargeInfo_Proto& from);
  void MergeFrom(const USIM_ChargeInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_ChargeInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_ChargeInfo_Proto";
  }
  protected:
  explicit USIM_ChargeInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUTargetNameFieldNumber = 3,
    kDfSimTimeFieldNumber = 1,
    kUIDFieldNumber = 2,
    kDfchargePercentFieldNumber = 4,
  };
  // bytes uTargetName = 3;
  void clear_utargetname();
  const std::string& utargetname() const;
  void set_utargetname(const std::string& value);
  void set_utargetname(std::string&& value);
  void set_utargetname(const char* value);
  void set_utargetname(const void* value, size_t size);
  std::string* mutable_utargetname();
  std::string* release_utargetname();
  void set_allocated_utargetname(std::string* utargetname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_utargetname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_utargetname(
      std::string* utargetname);
  private:
  const std::string& _internal_utargetname() const;
  void _internal_set_utargetname(const std::string& value);
  std::string* _internal_mutable_utargetname();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 uID = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float dfcharge_Percent = 4;
  void clear_dfcharge_percent();
  float dfcharge_percent() const;
  void set_dfcharge_percent(float value);
  private:
  float _internal_dfcharge_percent() const;
  void _internal_set_dfcharge_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_ChargeInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utargetname_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  float dfcharge_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_MSLng_Lat_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_MSLng_Lat_Proto) */ {
 public:
  inline USIM_MSLng_Lat_Proto() : USIM_MSLng_Lat_Proto(nullptr) {};
  virtual ~USIM_MSLng_Lat_Proto();

  USIM_MSLng_Lat_Proto(const USIM_MSLng_Lat_Proto& from);
  USIM_MSLng_Lat_Proto(USIM_MSLng_Lat_Proto&& from) noexcept
    : USIM_MSLng_Lat_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_MSLng_Lat_Proto& operator=(const USIM_MSLng_Lat_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_MSLng_Lat_Proto& operator=(USIM_MSLng_Lat_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_MSLng_Lat_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_MSLng_Lat_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_MSLng_Lat_Proto*>(
               &_USIM_MSLng_Lat_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(USIM_MSLng_Lat_Proto& a, USIM_MSLng_Lat_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_MSLng_Lat_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_MSLng_Lat_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_MSLng_Lat_Proto* New() const final {
    return CreateMaybeMessage<USIM_MSLng_Lat_Proto>(nullptr);
  }

  USIM_MSLng_Lat_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_MSLng_Lat_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_MSLng_Lat_Proto& from);
  void MergeFrom(const USIM_MSLng_Lat_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_MSLng_Lat_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_MSLng_Lat_Proto";
  }
  protected:
  explicit USIM_MSLng_Lat_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfLonFieldNumber = 1,
    kDfLatFieldNumber = 2,
    kDfAltFieldNumber = 3,
    kFSpeedFieldNumber = 4,
    kFPauseFieldNumber = 5,
  };
  // double dfLon = 1;
  void clear_dflon();
  double dflon() const;
  void set_dflon(double value);
  private:
  double _internal_dflon() const;
  void _internal_set_dflon(double value);
  public:

  // double dfLat = 2;
  void clear_dflat();
  double dflat() const;
  void set_dflat(double value);
  private:
  double _internal_dflat() const;
  void _internal_set_dflat(double value);
  public:

  // double dfAlt = 3;
  void clear_dfalt();
  double dfalt() const;
  void set_dfalt(double value);
  private:
  double _internal_dfalt() const;
  void _internal_set_dfalt(double value);
  public:

  // float fSpeed = 4;
  void clear_fspeed();
  float fspeed() const;
  void set_fspeed(float value);
  private:
  float _internal_fspeed() const;
  void _internal_set_fspeed(float value);
  public:

  // float fPause = 5;
  void clear_fpause();
  float fpause() const;
  void set_fpause(float value);
  private:
  float _internal_fpause() const;
  void _internal_set_fpause(float value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_MSLng_Lat_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dflon_;
  double dflat_;
  double dfalt_;
  float fspeed_;
  float fpause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_TrackAreaInfo_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_TrackAreaInfo_Proto) */ {
 public:
  inline USIM_TrackAreaInfo_Proto() : USIM_TrackAreaInfo_Proto(nullptr) {};
  virtual ~USIM_TrackAreaInfo_Proto();

  USIM_TrackAreaInfo_Proto(const USIM_TrackAreaInfo_Proto& from);
  USIM_TrackAreaInfo_Proto(USIM_TrackAreaInfo_Proto&& from) noexcept
    : USIM_TrackAreaInfo_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_TrackAreaInfo_Proto& operator=(const USIM_TrackAreaInfo_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_TrackAreaInfo_Proto& operator=(USIM_TrackAreaInfo_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_TrackAreaInfo_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_TrackAreaInfo_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_TrackAreaInfo_Proto*>(
               &_USIM_TrackAreaInfo_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(USIM_TrackAreaInfo_Proto& a, USIM_TrackAreaInfo_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_TrackAreaInfo_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_TrackAreaInfo_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_TrackAreaInfo_Proto* New() const final {
    return CreateMaybeMessage<USIM_TrackAreaInfo_Proto>(nullptr);
  }

  USIM_TrackAreaInfo_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_TrackAreaInfo_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_TrackAreaInfo_Proto& from);
  void MergeFrom(const USIM_TrackAreaInfo_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_TrackAreaInfo_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_TrackAreaInfo_Proto";
  }
  protected:
  explicit USIM_TrackAreaInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecSPointListFieldNumber = 4,
    kNameFieldNumber = 1,
    kITypeFieldNumber = 2,
    kIAllianceFieldNumber = 3,
  };
  // repeated .USIM_MSLng_Lat_Proto vecSPointList = 4;
  int vecspointlist_size() const;
  private:
  int _internal_vecspointlist_size() const;
  public:
  void clear_vecspointlist();
  ::USIM_MSLng_Lat_Proto* mutable_vecspointlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_MSLng_Lat_Proto >*
      mutable_vecspointlist();
  private:
  const ::USIM_MSLng_Lat_Proto& _internal_vecspointlist(int index) const;
  ::USIM_MSLng_Lat_Proto* _internal_add_vecspointlist();
  public:
  const ::USIM_MSLng_Lat_Proto& vecspointlist(int index) const;
  ::USIM_MSLng_Lat_Proto* add_vecspointlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_MSLng_Lat_Proto >&
      vecspointlist() const;

  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 iType = 2;
  void clear_itype();
  ::PROTOBUF_NAMESPACE_ID::uint32 itype() const;
  void set_itype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_itype() const;
  void _internal_set_itype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iAlliance = 3;
  void clear_ialliance();
  ::PROTOBUF_NAMESPACE_ID::uint32 ialliance() const;
  void set_ialliance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ialliance() const;
  void _internal_set_ialliance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_TrackAreaInfo_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_MSLng_Lat_Proto > vecspointlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 itype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ialliance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_UUVStateMessage_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_UUVStateMessage_Proto) */ {
 public:
  inline USIM_UUVStateMessage_Proto() : USIM_UUVStateMessage_Proto(nullptr) {};
  virtual ~USIM_UUVStateMessage_Proto();

  USIM_UUVStateMessage_Proto(const USIM_UUVStateMessage_Proto& from);
  USIM_UUVStateMessage_Proto(USIM_UUVStateMessage_Proto&& from) noexcept
    : USIM_UUVStateMessage_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_UUVStateMessage_Proto& operator=(const USIM_UUVStateMessage_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_UUVStateMessage_Proto& operator=(USIM_UUVStateMessage_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_UUVStateMessage_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_UUVStateMessage_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_UUVStateMessage_Proto*>(
               &_USIM_UUVStateMessage_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(USIM_UUVStateMessage_Proto& a, USIM_UUVStateMessage_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_UUVStateMessage_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_UUVStateMessage_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_UUVStateMessage_Proto* New() const final {
    return CreateMaybeMessage<USIM_UUVStateMessage_Proto>(nullptr);
  }

  USIM_UUVStateMessage_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_UUVStateMessage_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_UUVStateMessage_Proto& from);
  void MergeFrom(const USIM_UUVStateMessage_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_UUVStateMessage_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_UUVStateMessage_Proto";
  }
  protected:
  explicit USIM_UUVStateMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfSimTimeFieldNumber = 1,
    kUUVIDFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 UUVID = 2;
  void clear_uuvid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uuvid() const;
  void set_uuvid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uuvid() const;
  void _internal_set_uuvid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 state = 3;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_UUVStateMessage_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uuvid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_TransferEquip_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_TransferEquip_Proto) */ {
 public:
  inline USIM_TransferEquip_Proto() : USIM_TransferEquip_Proto(nullptr) {};
  virtual ~USIM_TransferEquip_Proto();

  USIM_TransferEquip_Proto(const USIM_TransferEquip_Proto& from);
  USIM_TransferEquip_Proto(USIM_TransferEquip_Proto&& from) noexcept
    : USIM_TransferEquip_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_TransferEquip_Proto& operator=(const USIM_TransferEquip_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_TransferEquip_Proto& operator=(USIM_TransferEquip_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_TransferEquip_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_TransferEquip_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_TransferEquip_Proto*>(
               &_USIM_TransferEquip_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(USIM_TransferEquip_Proto& a, USIM_TransferEquip_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_TransferEquip_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_TransferEquip_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_TransferEquip_Proto* New() const final {
    return CreateMaybeMessage<USIM_TransferEquip_Proto>(nullptr);
  }

  USIM_TransferEquip_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_TransferEquip_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_TransferEquip_Proto& from);
  void MergeFrom(const USIM_TransferEquip_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_TransferEquip_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_TransferEquip_Proto";
  }
  protected:
  explicit USIM_TransferEquip_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipTypeFieldNumber = 1,
    kEquipNumFieldNumber = 2,
  };
  // bytes EquipType = 1;
  void clear_equiptype();
  const std::string& equiptype() const;
  void set_equiptype(const std::string& value);
  void set_equiptype(std::string&& value);
  void set_equiptype(const char* value);
  void set_equiptype(const void* value, size_t size);
  std::string* mutable_equiptype();
  std::string* release_equiptype();
  void set_allocated_equiptype(std::string* equiptype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_equiptype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_equiptype(
      std::string* equiptype);
  private:
  const std::string& _internal_equiptype() const;
  void _internal_set_equiptype(const std::string& value);
  std::string* _internal_mutable_equiptype();
  public:

  // uint32 EquipNum = 2;
  void clear_equipnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 equipnum() const;
  void set_equipnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_equipnum() const;
  void _internal_set_equipnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_TransferEquip_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equiptype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 equipnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AMPHELITRANSFER_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AMPHELITRANSFER_Proto) */ {
 public:
  inline USIM_AMPHELITRANSFER_Proto() : USIM_AMPHELITRANSFER_Proto(nullptr) {};
  virtual ~USIM_AMPHELITRANSFER_Proto();

  USIM_AMPHELITRANSFER_Proto(const USIM_AMPHELITRANSFER_Proto& from);
  USIM_AMPHELITRANSFER_Proto(USIM_AMPHELITRANSFER_Proto&& from) noexcept
    : USIM_AMPHELITRANSFER_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AMPHELITRANSFER_Proto& operator=(const USIM_AMPHELITRANSFER_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AMPHELITRANSFER_Proto& operator=(USIM_AMPHELITRANSFER_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AMPHELITRANSFER_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AMPHELITRANSFER_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AMPHELITRANSFER_Proto*>(
               &_USIM_AMPHELITRANSFER_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(USIM_AMPHELITRANSFER_Proto& a, USIM_AMPHELITRANSFER_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AMPHELITRANSFER_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AMPHELITRANSFER_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AMPHELITRANSFER_Proto* New() const final {
    return CreateMaybeMessage<USIM_AMPHELITRANSFER_Proto>(nullptr);
  }

  USIM_AMPHELITRANSFER_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AMPHELITRANSFER_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AMPHELITRANSFER_Proto& from);
  void MergeFrom(const USIM_AMPHELITRANSFER_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AMPHELITRANSFER_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AMPHELITRANSFER_Proto";
  }
  protected:
  explicit USIM_AMPHELITRANSFER_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipListFieldNumber = 8,
    kTransportAssetFieldNumber = 2,
    kTransportAssetTypeFieldNumber = 3,
    kHeliAssetFieldNumber = 4,
    kHeliAssetTypeFieldNumber = 5,
    kAssetFlagFieldNumber = 6,
    kDfSimTimeFieldNumber = 1,
    kFDamageLevelFieldNumber = 9,
    kIStaffNumFieldNumber = 7,
  };
  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  int equiplist_size() const;
  private:
  int _internal_equiplist_size() const;
  public:
  void clear_equiplist();
  ::USIM_TransferEquip_Proto* mutable_equiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
      mutable_equiplist();
  private:
  const ::USIM_TransferEquip_Proto& _internal_equiplist(int index) const;
  ::USIM_TransferEquip_Proto* _internal_add_equiplist();
  public:
  const ::USIM_TransferEquip_Proto& equiplist(int index) const;
  ::USIM_TransferEquip_Proto* add_equiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
      equiplist() const;

  // bytes transportAsset = 2;
  void clear_transportasset();
  const std::string& transportasset() const;
  void set_transportasset(const std::string& value);
  void set_transportasset(std::string&& value);
  void set_transportasset(const char* value);
  void set_transportasset(const void* value, size_t size);
  std::string* mutable_transportasset();
  std::string* release_transportasset();
  void set_allocated_transportasset(std::string* transportasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportasset(
      std::string* transportasset);
  private:
  const std::string& _internal_transportasset() const;
  void _internal_set_transportasset(const std::string& value);
  std::string* _internal_mutable_transportasset();
  public:

  // bytes transportAssetType = 3;
  void clear_transportassettype();
  const std::string& transportassettype() const;
  void set_transportassettype(const std::string& value);
  void set_transportassettype(std::string&& value);
  void set_transportassettype(const char* value);
  void set_transportassettype(const void* value, size_t size);
  std::string* mutable_transportassettype();
  std::string* release_transportassettype();
  void set_allocated_transportassettype(std::string* transportassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportassettype(
      std::string* transportassettype);
  private:
  const std::string& _internal_transportassettype() const;
  void _internal_set_transportassettype(const std::string& value);
  std::string* _internal_mutable_transportassettype();
  public:

  // bytes heliAsset = 4;
  void clear_heliasset();
  const std::string& heliasset() const;
  void set_heliasset(const std::string& value);
  void set_heliasset(std::string&& value);
  void set_heliasset(const char* value);
  void set_heliasset(const void* value, size_t size);
  std::string* mutable_heliasset();
  std::string* release_heliasset();
  void set_allocated_heliasset(std::string* heliasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_heliasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_heliasset(
      std::string* heliasset);
  private:
  const std::string& _internal_heliasset() const;
  void _internal_set_heliasset(const std::string& value);
  std::string* _internal_mutable_heliasset();
  public:

  // bytes heliAssetType = 5;
  void clear_heliassettype();
  const std::string& heliassettype() const;
  void set_heliassettype(const std::string& value);
  void set_heliassettype(std::string&& value);
  void set_heliassettype(const char* value);
  void set_heliassettype(const void* value, size_t size);
  std::string* mutable_heliassettype();
  std::string* release_heliassettype();
  void set_allocated_heliassettype(std::string* heliassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_heliassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_heliassettype(
      std::string* heliassettype);
  private:
  const std::string& _internal_heliassettype() const;
  void _internal_set_heliassettype(const std::string& value);
  std::string* _internal_mutable_heliassettype();
  public:

  // bytes assetFlag = 6;
  void clear_assetflag();
  const std::string& assetflag() const;
  void set_assetflag(const std::string& value);
  void set_assetflag(std::string&& value);
  void set_assetflag(const char* value);
  void set_assetflag(const void* value, size_t size);
  std::string* mutable_assetflag();
  std::string* release_assetflag();
  void set_allocated_assetflag(std::string* assetflag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assetflag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assetflag(
      std::string* assetflag);
  private:
  const std::string& _internal_assetflag() const;
  void _internal_set_assetflag(const std::string& value);
  std::string* _internal_mutable_assetflag();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // double fDamageLevel = 9;
  void clear_fdamagelevel();
  double fdamagelevel() const;
  void set_fdamagelevel(double value);
  private:
  double _internal_fdamagelevel() const;
  void _internal_set_fdamagelevel(double value);
  public:

  // uint32 iStaffNum = 7;
  void clear_istaffnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 istaffnum() const;
  void set_istaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_istaffnum() const;
  void _internal_set_istaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AMPHELITRANSFER_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto > equiplist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heliasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heliassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetflag_;
  double dfsimtime_;
  double fdamagelevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 istaffnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AMPLANDINGUNLOAD_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AMPLANDINGUNLOAD_Proto) */ {
 public:
  inline USIM_AMPLANDINGUNLOAD_Proto() : USIM_AMPLANDINGUNLOAD_Proto(nullptr) {};
  virtual ~USIM_AMPLANDINGUNLOAD_Proto();

  USIM_AMPLANDINGUNLOAD_Proto(const USIM_AMPLANDINGUNLOAD_Proto& from);
  USIM_AMPLANDINGUNLOAD_Proto(USIM_AMPLANDINGUNLOAD_Proto&& from) noexcept
    : USIM_AMPLANDINGUNLOAD_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AMPLANDINGUNLOAD_Proto& operator=(const USIM_AMPLANDINGUNLOAD_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AMPLANDINGUNLOAD_Proto& operator=(USIM_AMPLANDINGUNLOAD_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AMPLANDINGUNLOAD_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AMPLANDINGUNLOAD_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AMPLANDINGUNLOAD_Proto*>(
               &_USIM_AMPLANDINGUNLOAD_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(USIM_AMPLANDINGUNLOAD_Proto& a, USIM_AMPLANDINGUNLOAD_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AMPLANDINGUNLOAD_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AMPLANDINGUNLOAD_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AMPLANDINGUNLOAD_Proto* New() const final {
    return CreateMaybeMessage<USIM_AMPLANDINGUNLOAD_Proto>(nullptr);
  }

  USIM_AMPLANDINGUNLOAD_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AMPLANDINGUNLOAD_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AMPLANDINGUNLOAD_Proto& from);
  void MergeFrom(const USIM_AMPLANDINGUNLOAD_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AMPLANDINGUNLOAD_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AMPLANDINGUNLOAD_Proto";
  }
  protected:
  explicit USIM_AMPLANDINGUNLOAD_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipListFieldNumber = 6,
    kUnloadAssetFieldNumber = 2,
    kUnloadAssetTypeFieldNumber = 3,
    kAssetFlagFieldNumber = 4,
    kDfSimTimeFieldNumber = 1,
    kFDamageLevelFieldNumber = 7,
    kInloadStaffNumFieldNumber = 5,
  };
  // repeated .USIM_TransferEquip_Proto EquipList = 6;
  int equiplist_size() const;
  private:
  int _internal_equiplist_size() const;
  public:
  void clear_equiplist();
  ::USIM_TransferEquip_Proto* mutable_equiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
      mutable_equiplist();
  private:
  const ::USIM_TransferEquip_Proto& _internal_equiplist(int index) const;
  ::USIM_TransferEquip_Proto* _internal_add_equiplist();
  public:
  const ::USIM_TransferEquip_Proto& equiplist(int index) const;
  ::USIM_TransferEquip_Proto* add_equiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
      equiplist() const;

  // bytes unloadAsset = 2;
  void clear_unloadasset();
  const std::string& unloadasset() const;
  void set_unloadasset(const std::string& value);
  void set_unloadasset(std::string&& value);
  void set_unloadasset(const char* value);
  void set_unloadasset(const void* value, size_t size);
  std::string* mutable_unloadasset();
  std::string* release_unloadasset();
  void set_allocated_unloadasset(std::string* unloadasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unloadasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unloadasset(
      std::string* unloadasset);
  private:
  const std::string& _internal_unloadasset() const;
  void _internal_set_unloadasset(const std::string& value);
  std::string* _internal_mutable_unloadasset();
  public:

  // bytes unloadAssetType = 3;
  void clear_unloadassettype();
  const std::string& unloadassettype() const;
  void set_unloadassettype(const std::string& value);
  void set_unloadassettype(std::string&& value);
  void set_unloadassettype(const char* value);
  void set_unloadassettype(const void* value, size_t size);
  std::string* mutable_unloadassettype();
  std::string* release_unloadassettype();
  void set_allocated_unloadassettype(std::string* unloadassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unloadassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unloadassettype(
      std::string* unloadassettype);
  private:
  const std::string& _internal_unloadassettype() const;
  void _internal_set_unloadassettype(const std::string& value);
  std::string* _internal_mutable_unloadassettype();
  public:

  // bytes assetFlag = 4;
  void clear_assetflag();
  const std::string& assetflag() const;
  void set_assetflag(const std::string& value);
  void set_assetflag(std::string&& value);
  void set_assetflag(const char* value);
  void set_assetflag(const void* value, size_t size);
  std::string* mutable_assetflag();
  std::string* release_assetflag();
  void set_allocated_assetflag(std::string* assetflag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assetflag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assetflag(
      std::string* assetflag);
  private:
  const std::string& _internal_assetflag() const;
  void _internal_set_assetflag(const std::string& value);
  std::string* _internal_mutable_assetflag();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // double fDamageLevel = 7;
  void clear_fdamagelevel();
  double fdamagelevel() const;
  void set_fdamagelevel(double value);
  private:
  double _internal_fdamagelevel() const;
  void _internal_set_fdamagelevel(double value);
  public:

  // uint32 inloadStaffNum = 5;
  void clear_inloadstaffnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 inloadstaffnum() const;
  void set_inloadstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inloadstaffnum() const;
  void _internal_set_inloadstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AMPLANDINGUNLOAD_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto > equiplist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unloadasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unloadassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetflag_;
  double dfsimtime_;
  double fdamagelevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inloadstaffnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AMPTRANSFER_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AMPTRANSFER_Proto) */ {
 public:
  inline USIM_AMPTRANSFER_Proto() : USIM_AMPTRANSFER_Proto(nullptr) {};
  virtual ~USIM_AMPTRANSFER_Proto();

  USIM_AMPTRANSFER_Proto(const USIM_AMPTRANSFER_Proto& from);
  USIM_AMPTRANSFER_Proto(USIM_AMPTRANSFER_Proto&& from) noexcept
    : USIM_AMPTRANSFER_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AMPTRANSFER_Proto& operator=(const USIM_AMPTRANSFER_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AMPTRANSFER_Proto& operator=(USIM_AMPTRANSFER_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AMPTRANSFER_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AMPTRANSFER_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AMPTRANSFER_Proto*>(
               &_USIM_AMPTRANSFER_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(USIM_AMPTRANSFER_Proto& a, USIM_AMPTRANSFER_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AMPTRANSFER_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AMPTRANSFER_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AMPTRANSFER_Proto* New() const final {
    return CreateMaybeMessage<USIM_AMPTRANSFER_Proto>(nullptr);
  }

  USIM_AMPTRANSFER_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AMPTRANSFER_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AMPTRANSFER_Proto& from);
  void MergeFrom(const USIM_AMPTRANSFER_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AMPTRANSFER_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AMPTRANSFER_Proto";
  }
  protected:
  explicit USIM_AMPTRANSFER_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipListFieldNumber = 8,
    kTransportAssetFieldNumber = 2,
    kTransportAssetTypeFieldNumber = 3,
    kSubAssetFieldNumber = 4,
    kSubAssetTypeFieldNumber = 5,
    kAssetFlagFieldNumber = 6,
    kDfSimTimeFieldNumber = 1,
    kTransferStaffNumFieldNumber = 7,
  };
  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  int equiplist_size() const;
  private:
  int _internal_equiplist_size() const;
  public:
  void clear_equiplist();
  ::USIM_TransferEquip_Proto* mutable_equiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
      mutable_equiplist();
  private:
  const ::USIM_TransferEquip_Proto& _internal_equiplist(int index) const;
  ::USIM_TransferEquip_Proto* _internal_add_equiplist();
  public:
  const ::USIM_TransferEquip_Proto& equiplist(int index) const;
  ::USIM_TransferEquip_Proto* add_equiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
      equiplist() const;

  // bytes TransportAsset = 2;
  void clear_transportasset();
  const std::string& transportasset() const;
  void set_transportasset(const std::string& value);
  void set_transportasset(std::string&& value);
  void set_transportasset(const char* value);
  void set_transportasset(const void* value, size_t size);
  std::string* mutable_transportasset();
  std::string* release_transportasset();
  void set_allocated_transportasset(std::string* transportasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportasset(
      std::string* transportasset);
  private:
  const std::string& _internal_transportasset() const;
  void _internal_set_transportasset(const std::string& value);
  std::string* _internal_mutable_transportasset();
  public:

  // bytes TransportAssetType = 3;
  void clear_transportassettype();
  const std::string& transportassettype() const;
  void set_transportassettype(const std::string& value);
  void set_transportassettype(std::string&& value);
  void set_transportassettype(const char* value);
  void set_transportassettype(const void* value, size_t size);
  std::string* mutable_transportassettype();
  std::string* release_transportassettype();
  void set_allocated_transportassettype(std::string* transportassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportassettype(
      std::string* transportassettype);
  private:
  const std::string& _internal_transportassettype() const;
  void _internal_set_transportassettype(const std::string& value);
  std::string* _internal_mutable_transportassettype();
  public:

  // bytes SubAsset = 4;
  void clear_subasset();
  const std::string& subasset() const;
  void set_subasset(const std::string& value);
  void set_subasset(std::string&& value);
  void set_subasset(const char* value);
  void set_subasset(const void* value, size_t size);
  std::string* mutable_subasset();
  std::string* release_subasset();
  void set_allocated_subasset(std::string* subasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subasset(
      std::string* subasset);
  private:
  const std::string& _internal_subasset() const;
  void _internal_set_subasset(const std::string& value);
  std::string* _internal_mutable_subasset();
  public:

  // bytes SubAssetType = 5;
  void clear_subassettype();
  const std::string& subassettype() const;
  void set_subassettype(const std::string& value);
  void set_subassettype(std::string&& value);
  void set_subassettype(const char* value);
  void set_subassettype(const void* value, size_t size);
  std::string* mutable_subassettype();
  std::string* release_subassettype();
  void set_allocated_subassettype(std::string* subassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subassettype(
      std::string* subassettype);
  private:
  const std::string& _internal_subassettype() const;
  void _internal_set_subassettype(const std::string& value);
  std::string* _internal_mutable_subassettype();
  public:

  // bytes AssetFlag = 6;
  void clear_assetflag();
  const std::string& assetflag() const;
  void set_assetflag(const std::string& value);
  void set_assetflag(std::string&& value);
  void set_assetflag(const char* value);
  void set_assetflag(const void* value, size_t size);
  std::string* mutable_assetflag();
  std::string* release_assetflag();
  void set_allocated_assetflag(std::string* assetflag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assetflag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assetflag(
      std::string* assetflag);
  private:
  const std::string& _internal_assetflag() const;
  void _internal_set_assetflag(const std::string& value);
  std::string* _internal_mutable_assetflag();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 TransferStaffNum = 7;
  void clear_transferstaffnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 transferstaffnum() const;
  void set_transferstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transferstaffnum() const;
  void _internal_set_transferstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AMPTRANSFER_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto > equiplist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetflag_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transferstaffnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// -------------------------------------------------------------------

class USIM_AMPFLASHING_Proto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:USIM_AMPFLASHING_Proto) */ {
 public:
  inline USIM_AMPFLASHING_Proto() : USIM_AMPFLASHING_Proto(nullptr) {};
  virtual ~USIM_AMPFLASHING_Proto();

  USIM_AMPFLASHING_Proto(const USIM_AMPFLASHING_Proto& from);
  USIM_AMPFLASHING_Proto(USIM_AMPFLASHING_Proto&& from) noexcept
    : USIM_AMPFLASHING_Proto() {
    *this = ::std::move(from);
  }

  inline USIM_AMPFLASHING_Proto& operator=(const USIM_AMPFLASHING_Proto& from) {
    CopyFrom(from);
    return *this;
  }
  inline USIM_AMPFLASHING_Proto& operator=(USIM_AMPFLASHING_Proto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USIM_AMPFLASHING_Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USIM_AMPFLASHING_Proto* internal_default_instance() {
    return reinterpret_cast<const USIM_AMPFLASHING_Proto*>(
               &_USIM_AMPFLASHING_Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(USIM_AMPFLASHING_Proto& a, USIM_AMPFLASHING_Proto& b) {
    a.Swap(&b);
  }
  inline void Swap(USIM_AMPFLASHING_Proto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USIM_AMPFLASHING_Proto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USIM_AMPFLASHING_Proto* New() const final {
    return CreateMaybeMessage<USIM_AMPFLASHING_Proto>(nullptr);
  }

  USIM_AMPFLASHING_Proto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USIM_AMPFLASHING_Proto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USIM_AMPFLASHING_Proto& from);
  void MergeFrom(const USIM_AMPFLASHING_Proto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USIM_AMPFLASHING_Proto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "USIM_AMPFLASHING_Proto";
  }
  protected:
  explicit USIM_AMPFLASHING_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_USimDataStructm_2eproto);
    return ::descriptor_table_USimDataStructm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipListFieldNumber = 9,
    kTransportAssetFieldNumber = 2,
    kTransportAssetTypeFieldNumber = 3,
    kFlashingAssetFieldNumber = 4,
    kFlashingAssetTypeFieldNumber = 5,
    kAssetFlagFieldNumber = 6,
    kDfSimTimeFieldNumber = 1,
    kFlashTypeFieldNumber = 7,
    kStaffNumFieldNumber = 8,
    kFDamageLevelFieldNumber = 10,
  };
  // repeated .USIM_TransferEquip_Proto EquipList = 9;
  int equiplist_size() const;
  private:
  int _internal_equiplist_size() const;
  public:
  void clear_equiplist();
  ::USIM_TransferEquip_Proto* mutable_equiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
      mutable_equiplist();
  private:
  const ::USIM_TransferEquip_Proto& _internal_equiplist(int index) const;
  ::USIM_TransferEquip_Proto* _internal_add_equiplist();
  public:
  const ::USIM_TransferEquip_Proto& equiplist(int index) const;
  ::USIM_TransferEquip_Proto* add_equiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
      equiplist() const;

  // bytes TransportAsset = 2;
  void clear_transportasset();
  const std::string& transportasset() const;
  void set_transportasset(const std::string& value);
  void set_transportasset(std::string&& value);
  void set_transportasset(const char* value);
  void set_transportasset(const void* value, size_t size);
  std::string* mutable_transportasset();
  std::string* release_transportasset();
  void set_allocated_transportasset(std::string* transportasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportasset(
      std::string* transportasset);
  private:
  const std::string& _internal_transportasset() const;
  void _internal_set_transportasset(const std::string& value);
  std::string* _internal_mutable_transportasset();
  public:

  // bytes TransportAssetType = 3;
  void clear_transportassettype();
  const std::string& transportassettype() const;
  void set_transportassettype(const std::string& value);
  void set_transportassettype(std::string&& value);
  void set_transportassettype(const char* value);
  void set_transportassettype(const void* value, size_t size);
  std::string* mutable_transportassettype();
  std::string* release_transportassettype();
  void set_allocated_transportassettype(std::string* transportassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transportassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transportassettype(
      std::string* transportassettype);
  private:
  const std::string& _internal_transportassettype() const;
  void _internal_set_transportassettype(const std::string& value);
  std::string* _internal_mutable_transportassettype();
  public:

  // bytes FlashingAsset = 4;
  void clear_flashingasset();
  const std::string& flashingasset() const;
  void set_flashingasset(const std::string& value);
  void set_flashingasset(std::string&& value);
  void set_flashingasset(const char* value);
  void set_flashingasset(const void* value, size_t size);
  std::string* mutable_flashingasset();
  std::string* release_flashingasset();
  void set_allocated_flashingasset(std::string* flashingasset);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flashingasset();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flashingasset(
      std::string* flashingasset);
  private:
  const std::string& _internal_flashingasset() const;
  void _internal_set_flashingasset(const std::string& value);
  std::string* _internal_mutable_flashingasset();
  public:

  // bytes FlashingAssetType = 5;
  void clear_flashingassettype();
  const std::string& flashingassettype() const;
  void set_flashingassettype(const std::string& value);
  void set_flashingassettype(std::string&& value);
  void set_flashingassettype(const char* value);
  void set_flashingassettype(const void* value, size_t size);
  std::string* mutable_flashingassettype();
  std::string* release_flashingassettype();
  void set_allocated_flashingassettype(std::string* flashingassettype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flashingassettype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flashingassettype(
      std::string* flashingassettype);
  private:
  const std::string& _internal_flashingassettype() const;
  void _internal_set_flashingassettype(const std::string& value);
  std::string* _internal_mutable_flashingassettype();
  public:

  // bytes AssetFlag = 6;
  void clear_assetflag();
  const std::string& assetflag() const;
  void set_assetflag(const std::string& value);
  void set_assetflag(std::string&& value);
  void set_assetflag(const char* value);
  void set_assetflag(const void* value, size_t size);
  std::string* mutable_assetflag();
  std::string* release_assetflag();
  void set_allocated_assetflag(std::string* assetflag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_assetflag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_assetflag(
      std::string* assetflag);
  private:
  const std::string& _internal_assetflag() const;
  void _internal_set_assetflag(const std::string& value);
  std::string* _internal_mutable_assetflag();
  public:

  // double dfSimTime = 1;
  void clear_dfsimtime();
  double dfsimtime() const;
  void set_dfsimtime(double value);
  private:
  double _internal_dfsimtime() const;
  void _internal_set_dfsimtime(double value);
  public:

  // uint32 FlashType = 7;
  void clear_flashtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 flashtype() const;
  void set_flashtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flashtype() const;
  void _internal_set_flashtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 StaffNum = 8;
  void clear_staffnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 staffnum() const;
  void set_staffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_staffnum() const;
  void _internal_set_staffnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double fDamageLevel = 10;
  void clear_fdamagelevel();
  double fdamagelevel() const;
  void set_fdamagelevel(double value);
  private:
  double _internal_fdamagelevel() const;
  void _internal_set_fdamagelevel(double value);
  public:

  // @@protoc_insertion_point(class_scope:USIM_AMPFLASHING_Proto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto > equiplist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transportassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flashingasset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flashingassettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetflag_;
  double dfsimtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flashtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 staffnum_;
  double fdamagelevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_USimDataStructm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// USIM_TimeStepMessage_Proto

// double dfSimTime = 1;
inline void USIM_TimeStepMessage_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_TimeStepMessage_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_TimeStepMessage_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.dfSimTime)
}

// uint32 wYear = 2;
inline void USIM_TimeStepMessage_Proto::clear_wyear() {
  wyear_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_wyear() const {
  return wyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::wyear() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wYear)
  return _internal_wyear();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_wyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wyear_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_wyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wyear(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wYear)
}

// uint32 wMonth = 3;
inline void USIM_TimeStepMessage_Proto::clear_wmonth() {
  wmonth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_wmonth() const {
  return wmonth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::wmonth() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wMonth)
  return _internal_wmonth();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_wmonth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wmonth_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_wmonth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wmonth(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wMonth)
}

// uint32 wDay = 4;
inline void USIM_TimeStepMessage_Proto::clear_wday() {
  wday_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_wday() const {
  return wday_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::wday() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wDay)
  return _internal_wday();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_wday(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wday_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_wday(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wday(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wDay)
}

// uint32 wHour = 5;
inline void USIM_TimeStepMessage_Proto::clear_whour() {
  whour_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_whour() const {
  return whour_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::whour() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wHour)
  return _internal_whour();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_whour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  whour_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_whour(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_whour(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wHour)
}

// uint32 wMinite = 6;
inline void USIM_TimeStepMessage_Proto::clear_wminite() {
  wminite_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_wminite() const {
  return wminite_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::wminite() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wMinite)
  return _internal_wminite();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_wminite(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wminite_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_wminite(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wminite(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wMinite)
}

// uint32 wSencond = 7;
inline void USIM_TimeStepMessage_Proto::clear_wsencond() {
  wsencond_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::_internal_wsencond() const {
  return wsencond_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TimeStepMessage_Proto::wsencond() const {
  // @@protoc_insertion_point(field_get:USIM_TimeStepMessage_Proto.wSencond)
  return _internal_wsencond();
}
inline void USIM_TimeStepMessage_Proto::_internal_set_wsencond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wsencond_ = value;
}
inline void USIM_TimeStepMessage_Proto::set_wsencond(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wsencond(value);
  // @@protoc_insertion_point(field_set:USIM_TimeStepMessage_Proto.wSencond)
}

// -------------------------------------------------------------------

// USIM_SIMINFO_Proto

// uint32 uSimStatus = 1;
inline void USIM_SIMINFO_Proto::clear_usimstatus() {
  usimstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SIMINFO_Proto::_internal_usimstatus() const {
  return usimstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SIMINFO_Proto::usimstatus() const {
  // @@protoc_insertion_point(field_get:USIM_SIMINFO_Proto.uSimStatus)
  return _internal_usimstatus();
}
inline void USIM_SIMINFO_Proto::_internal_set_usimstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usimstatus_ = value;
}
inline void USIM_SIMINFO_Proto::set_usimstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usimstatus(value);
  // @@protoc_insertion_point(field_set:USIM_SIMINFO_Proto.uSimStatus)
}

// bytes sScinarioName = 2;
inline void USIM_SIMINFO_Proto::clear_sscinarioname() {
  sscinarioname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_SIMINFO_Proto::sscinarioname() const {
  // @@protoc_insertion_point(field_get:USIM_SIMINFO_Proto.sScinarioName)
  return _internal_sscinarioname();
}
inline void USIM_SIMINFO_Proto::set_sscinarioname(const std::string& value) {
  _internal_set_sscinarioname(value);
  // @@protoc_insertion_point(field_set:USIM_SIMINFO_Proto.sScinarioName)
}
inline std::string* USIM_SIMINFO_Proto::mutable_sscinarioname() {
  // @@protoc_insertion_point(field_mutable:USIM_SIMINFO_Proto.sScinarioName)
  return _internal_mutable_sscinarioname();
}
inline const std::string& USIM_SIMINFO_Proto::_internal_sscinarioname() const {
  return sscinarioname_.Get();
}
inline void USIM_SIMINFO_Proto::_internal_set_sscinarioname(const std::string& value) {
  
  sscinarioname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_SIMINFO_Proto::set_sscinarioname(std::string&& value) {
  
  sscinarioname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_SIMINFO_Proto.sScinarioName)
}
inline void USIM_SIMINFO_Proto::set_sscinarioname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sscinarioname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_SIMINFO_Proto.sScinarioName)
}
inline void USIM_SIMINFO_Proto::set_sscinarioname(const void* value,
    size_t size) {
  
  sscinarioname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_SIMINFO_Proto.sScinarioName)
}
inline std::string* USIM_SIMINFO_Proto::_internal_mutable_sscinarioname() {
  
  return sscinarioname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_SIMINFO_Proto::release_sscinarioname() {
  // @@protoc_insertion_point(field_release:USIM_SIMINFO_Proto.sScinarioName)
  return sscinarioname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_SIMINFO_Proto::set_allocated_sscinarioname(std::string* sscinarioname) {
  if (sscinarioname != nullptr) {
    
  } else {
    
  }
  sscinarioname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sscinarioname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_SIMINFO_Proto.sScinarioName)
}
inline std::string* USIM_SIMINFO_Proto::unsafe_arena_release_sscinarioname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_SIMINFO_Proto.sScinarioName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sscinarioname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_SIMINFO_Proto::unsafe_arena_set_allocated_sscinarioname(
    std::string* sscinarioname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sscinarioname != nullptr) {
    
  } else {
    
  }
  sscinarioname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sscinarioname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_SIMINFO_Proto.sScinarioName)
}

// -------------------------------------------------------------------

// USIM_CommandStructInfo_Proto

// .USIM_Alliance_Proto uAlliance = 1;
inline void USIM_CommandStructInfo_Proto::clear_ualliance() {
  ualliance_ = 0;
}
inline ::USIM_Alliance_Proto USIM_CommandStructInfo_Proto::_internal_ualliance() const {
  return static_cast< ::USIM_Alliance_Proto >(ualliance_);
}
inline ::USIM_Alliance_Proto USIM_CommandStructInfo_Proto::ualliance() const {
  // @@protoc_insertion_point(field_get:USIM_CommandStructInfo_Proto.uAlliance)
  return _internal_ualliance();
}
inline void USIM_CommandStructInfo_Proto::_internal_set_ualliance(::USIM_Alliance_Proto value) {
  
  ualliance_ = value;
}
inline void USIM_CommandStructInfo_Proto::set_ualliance(::USIM_Alliance_Proto value) {
  _internal_set_ualliance(value);
  // @@protoc_insertion_point(field_set:USIM_CommandStructInfo_Proto.uAlliance)
}

// uint32 uType = 2;
inline void USIM_CommandStructInfo_Proto::clear_utype() {
  utype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandStructInfo_Proto::_internal_utype() const {
  return utype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandStructInfo_Proto::utype() const {
  // @@protoc_insertion_point(field_get:USIM_CommandStructInfo_Proto.uType)
  return _internal_utype();
}
inline void USIM_CommandStructInfo_Proto::_internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utype_ = value;
}
inline void USIM_CommandStructInfo_Proto::set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utype(value);
  // @@protoc_insertion_point(field_set:USIM_CommandStructInfo_Proto.uType)
}

// bytes sNodeName = 3;
inline void USIM_CommandStructInfo_Proto::clear_snodename() {
  snodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandStructInfo_Proto::snodename() const {
  // @@protoc_insertion_point(field_get:USIM_CommandStructInfo_Proto.sNodeName)
  return _internal_snodename();
}
inline void USIM_CommandStructInfo_Proto::set_snodename(const std::string& value) {
  _internal_set_snodename(value);
  // @@protoc_insertion_point(field_set:USIM_CommandStructInfo_Proto.sNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::mutable_snodename() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandStructInfo_Proto.sNodeName)
  return _internal_mutable_snodename();
}
inline const std::string& USIM_CommandStructInfo_Proto::_internal_snodename() const {
  return snodename_.Get();
}
inline void USIM_CommandStructInfo_Proto::_internal_set_snodename(const std::string& value) {
  
  snodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_snodename(std::string&& value) {
  
  snodename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandStructInfo_Proto.sNodeName)
}
inline void USIM_CommandStructInfo_Proto::set_snodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandStructInfo_Proto.sNodeName)
}
inline void USIM_CommandStructInfo_Proto::set_snodename(const void* value,
    size_t size) {
  
  snodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandStructInfo_Proto.sNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::_internal_mutable_snodename() {
  
  return snodename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandStructInfo_Proto::release_snodename() {
  // @@protoc_insertion_point(field_release:USIM_CommandStructInfo_Proto.sNodeName)
  return snodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_allocated_snodename(std::string* snodename) {
  if (snodename != nullptr) {
    
  } else {
    
  }
  snodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandStructInfo_Proto.sNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::unsafe_arena_release_snodename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandStructInfo_Proto.sNodeName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snodename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandStructInfo_Proto::unsafe_arena_set_allocated_snodename(
    std::string* snodename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snodename != nullptr) {
    
  } else {
    
  }
  snodename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snodename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandStructInfo_Proto.sNodeName)
}

// bytes sParentNodeName = 4;
inline void USIM_CommandStructInfo_Proto::clear_sparentnodename() {
  sparentnodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandStructInfo_Proto::sparentnodename() const {
  // @@protoc_insertion_point(field_get:USIM_CommandStructInfo_Proto.sParentNodeName)
  return _internal_sparentnodename();
}
inline void USIM_CommandStructInfo_Proto::set_sparentnodename(const std::string& value) {
  _internal_set_sparentnodename(value);
  // @@protoc_insertion_point(field_set:USIM_CommandStructInfo_Proto.sParentNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::mutable_sparentnodename() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandStructInfo_Proto.sParentNodeName)
  return _internal_mutable_sparentnodename();
}
inline const std::string& USIM_CommandStructInfo_Proto::_internal_sparentnodename() const {
  return sparentnodename_.Get();
}
inline void USIM_CommandStructInfo_Proto::_internal_set_sparentnodename(const std::string& value) {
  
  sparentnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_sparentnodename(std::string&& value) {
  
  sparentnodename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandStructInfo_Proto.sParentNodeName)
}
inline void USIM_CommandStructInfo_Proto::set_sparentnodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sparentnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandStructInfo_Proto.sParentNodeName)
}
inline void USIM_CommandStructInfo_Proto::set_sparentnodename(const void* value,
    size_t size) {
  
  sparentnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandStructInfo_Proto.sParentNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::_internal_mutable_sparentnodename() {
  
  return sparentnodename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandStructInfo_Proto::release_sparentnodename() {
  // @@protoc_insertion_point(field_release:USIM_CommandStructInfo_Proto.sParentNodeName)
  return sparentnodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_allocated_sparentnodename(std::string* sparentnodename) {
  if (sparentnodename != nullptr) {
    
  } else {
    
  }
  sparentnodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sparentnodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandStructInfo_Proto.sParentNodeName)
}
inline std::string* USIM_CommandStructInfo_Proto::unsafe_arena_release_sparentnodename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandStructInfo_Proto.sParentNodeName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sparentnodename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandStructInfo_Proto::unsafe_arena_set_allocated_sparentnodename(
    std::string* sparentnodename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sparentnodename != nullptr) {
    
  } else {
    
  }
  sparentnodename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sparentnodename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandStructInfo_Proto.sParentNodeName)
}

// bytes sCenterName = 5;
inline void USIM_CommandStructInfo_Proto::clear_scentername() {
  scentername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandStructInfo_Proto::scentername() const {
  // @@protoc_insertion_point(field_get:USIM_CommandStructInfo_Proto.sCenterName)
  return _internal_scentername();
}
inline void USIM_CommandStructInfo_Proto::set_scentername(const std::string& value) {
  _internal_set_scentername(value);
  // @@protoc_insertion_point(field_set:USIM_CommandStructInfo_Proto.sCenterName)
}
inline std::string* USIM_CommandStructInfo_Proto::mutable_scentername() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandStructInfo_Proto.sCenterName)
  return _internal_mutable_scentername();
}
inline const std::string& USIM_CommandStructInfo_Proto::_internal_scentername() const {
  return scentername_.Get();
}
inline void USIM_CommandStructInfo_Proto::_internal_set_scentername(const std::string& value) {
  
  scentername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_scentername(std::string&& value) {
  
  scentername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandStructInfo_Proto.sCenterName)
}
inline void USIM_CommandStructInfo_Proto::set_scentername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scentername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandStructInfo_Proto.sCenterName)
}
inline void USIM_CommandStructInfo_Proto::set_scentername(const void* value,
    size_t size) {
  
  scentername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandStructInfo_Proto.sCenterName)
}
inline std::string* USIM_CommandStructInfo_Proto::_internal_mutable_scentername() {
  
  return scentername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandStructInfo_Proto::release_scentername() {
  // @@protoc_insertion_point(field_release:USIM_CommandStructInfo_Proto.sCenterName)
  return scentername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandStructInfo_Proto::set_allocated_scentername(std::string* scentername) {
  if (scentername != nullptr) {
    
  } else {
    
  }
  scentername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scentername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandStructInfo_Proto.sCenterName)
}
inline std::string* USIM_CommandStructInfo_Proto::unsafe_arena_release_scentername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandStructInfo_Proto.sCenterName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scentername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandStructInfo_Proto::unsafe_arena_set_allocated_scentername(
    std::string* scentername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scentername != nullptr) {
    
  } else {
    
  }
  scentername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scentername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandStructInfo_Proto.sCenterName)
}

// -------------------------------------------------------------------

// USIM_PlatInfoMessage_Proto

// double dfSimTime = 1;
inline void USIM_PlatInfoMessage_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_PlatInfoMessage_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_PlatInfoMessage_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfSimTime)
}

// bytes sPlatName = 2;
inline void USIM_PlatInfoMessage_Proto::clear_splatname() {
  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_PlatInfoMessage_Proto::splatname() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.sPlatName)
  return _internal_splatname();
}
inline void USIM_PlatInfoMessage_Proto::set_splatname(const std::string& value) {
  _internal_set_splatname(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.sPlatName)
}
inline std::string* USIM_PlatInfoMessage_Proto::mutable_splatname() {
  // @@protoc_insertion_point(field_mutable:USIM_PlatInfoMessage_Proto.sPlatName)
  return _internal_mutable_splatname();
}
inline const std::string& USIM_PlatInfoMessage_Proto::_internal_splatname() const {
  return splatname_.Get();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_splatname(const std::string& value) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_splatname(std::string&& value) {
  
  splatname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_PlatInfoMessage_Proto.sPlatName)
}
inline void USIM_PlatInfoMessage_Proto::set_splatname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_PlatInfoMessage_Proto.sPlatName)
}
inline void USIM_PlatInfoMessage_Proto::set_splatname(const void* value,
    size_t size) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_PlatInfoMessage_Proto.sPlatName)
}
inline std::string* USIM_PlatInfoMessage_Proto::_internal_mutable_splatname() {
  
  return splatname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_PlatInfoMessage_Proto::release_splatname() {
  // @@protoc_insertion_point(field_release:USIM_PlatInfoMessage_Proto.sPlatName)
  return splatname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_allocated_splatname(std::string* splatname) {
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splatname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_PlatInfoMessage_Proto.sPlatName)
}
inline std::string* USIM_PlatInfoMessage_Proto::unsafe_arena_release_splatname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_PlatInfoMessage_Proto.sPlatName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return splatname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_PlatInfoMessage_Proto::unsafe_arena_set_allocated_splatname(
    std::string* splatname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      splatname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_PlatInfoMessage_Proto.sPlatName)
}

// uint32 uID = 3;
inline void USIM_PlatInfoMessage_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.uID)
  return _internal_uid();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.uID)
}

// bytes sCommandNodeName = 4;
inline void USIM_PlatInfoMessage_Proto::clear_scommandnodename() {
  scommandnodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_PlatInfoMessage_Proto::scommandnodename() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.sCommandNodeName)
  return _internal_scommandnodename();
}
inline void USIM_PlatInfoMessage_Proto::set_scommandnodename(const std::string& value) {
  _internal_set_scommandnodename(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}
inline std::string* USIM_PlatInfoMessage_Proto::mutable_scommandnodename() {
  // @@protoc_insertion_point(field_mutable:USIM_PlatInfoMessage_Proto.sCommandNodeName)
  return _internal_mutable_scommandnodename();
}
inline const std::string& USIM_PlatInfoMessage_Proto::_internal_scommandnodename() const {
  return scommandnodename_.Get();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_scommandnodename(const std::string& value) {
  
  scommandnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_scommandnodename(std::string&& value) {
  
  scommandnodename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}
inline void USIM_PlatInfoMessage_Proto::set_scommandnodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scommandnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}
inline void USIM_PlatInfoMessage_Proto::set_scommandnodename(const void* value,
    size_t size) {
  
  scommandnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}
inline std::string* USIM_PlatInfoMessage_Proto::_internal_mutable_scommandnodename() {
  
  return scommandnodename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_PlatInfoMessage_Proto::release_scommandnodename() {
  // @@protoc_insertion_point(field_release:USIM_PlatInfoMessage_Proto.sCommandNodeName)
  return scommandnodename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_allocated_scommandnodename(std::string* scommandnodename) {
  if (scommandnodename != nullptr) {
    
  } else {
    
  }
  scommandnodename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scommandnodename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}
inline std::string* USIM_PlatInfoMessage_Proto::unsafe_arena_release_scommandnodename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_PlatInfoMessage_Proto.sCommandNodeName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scommandnodename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_PlatInfoMessage_Proto::unsafe_arena_set_allocated_scommandnodename(
    std::string* scommandnodename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scommandnodename != nullptr) {
    
  } else {
    
  }
  scommandnodename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scommandnodename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_PlatInfoMessage_Proto.sCommandNodeName)
}

// float dfFuel = 5;
inline void USIM_PlatInfoMessage_Proto::clear_dffuel() {
  dffuel_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dffuel() const {
  return dffuel_;
}
inline float USIM_PlatInfoMessage_Proto::dffuel() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfFuel)
  return _internal_dffuel();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dffuel(float value) {
  
  dffuel_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dffuel(float value) {
  _internal_set_dffuel(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfFuel)
}

// float dfLife = 6;
inline void USIM_PlatInfoMessage_Proto::clear_dflife() {
  dflife_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dflife() const {
  return dflife_;
}
inline float USIM_PlatInfoMessage_Proto::dflife() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfLife)
  return _internal_dflife();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dflife(float value) {
  
  dflife_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dflife(float value) {
  _internal_set_dflife(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfLife)
}

// .USIM_Alliance_Proto uAlliance = 7;
inline void USIM_PlatInfoMessage_Proto::clear_ualliance() {
  ualliance_ = 0;
}
inline ::USIM_Alliance_Proto USIM_PlatInfoMessage_Proto::_internal_ualliance() const {
  return static_cast< ::USIM_Alliance_Proto >(ualliance_);
}
inline ::USIM_Alliance_Proto USIM_PlatInfoMessage_Proto::ualliance() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.uAlliance)
  return _internal_ualliance();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_ualliance(::USIM_Alliance_Proto value) {
  
  ualliance_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_ualliance(::USIM_Alliance_Proto value) {
  _internal_set_ualliance(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.uAlliance)
}

// uint64 uColor = 8;
inline void USIM_PlatInfoMessage_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_PlatInfoMessage_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_PlatInfoMessage_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.uColor)
}

// uint32 uKind = 9;
inline void USIM_PlatInfoMessage_Proto::clear_ukind() {
  ukind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::_internal_ukind() const {
  return ukind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::ukind() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.uKind)
  return _internal_ukind();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ukind_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ukind(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.uKind)
}

// uint32 uClass = 10;
inline void USIM_PlatInfoMessage_Proto::clear_uclass() {
  uclass_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::_internal_uclass() const {
  return uclass_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PlatInfoMessage_Proto::uclass() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.uClass)
  return _internal_uclass();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uclass_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uclass(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.uClass)
}

// bytes sType = 11;
inline void USIM_PlatInfoMessage_Proto::clear_stype() {
  stype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_PlatInfoMessage_Proto::stype() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.sType)
  return _internal_stype();
}
inline void USIM_PlatInfoMessage_Proto::set_stype(const std::string& value) {
  _internal_set_stype(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.sType)
}
inline std::string* USIM_PlatInfoMessage_Proto::mutable_stype() {
  // @@protoc_insertion_point(field_mutable:USIM_PlatInfoMessage_Proto.sType)
  return _internal_mutable_stype();
}
inline const std::string& USIM_PlatInfoMessage_Proto::_internal_stype() const {
  return stype_.Get();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_stype(const std::string& value) {
  
  stype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_stype(std::string&& value) {
  
  stype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_PlatInfoMessage_Proto.sType)
}
inline void USIM_PlatInfoMessage_Proto::set_stype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_PlatInfoMessage_Proto.sType)
}
inline void USIM_PlatInfoMessage_Proto::set_stype(const void* value,
    size_t size) {
  
  stype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_PlatInfoMessage_Proto.sType)
}
inline std::string* USIM_PlatInfoMessage_Proto::_internal_mutable_stype() {
  
  return stype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_PlatInfoMessage_Proto::release_stype() {
  // @@protoc_insertion_point(field_release:USIM_PlatInfoMessage_Proto.sType)
  return stype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_PlatInfoMessage_Proto::set_allocated_stype(std::string* stype) {
  if (stype != nullptr) {
    
  } else {
    
  }
  stype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_PlatInfoMessage_Proto.sType)
}
inline std::string* USIM_PlatInfoMessage_Proto::unsafe_arena_release_stype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_PlatInfoMessage_Proto.sType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_PlatInfoMessage_Proto::unsafe_arena_set_allocated_stype(
    std::string* stype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stype != nullptr) {
    
  } else {
    
  }
  stype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_PlatInfoMessage_Proto.sType)
}

// double dfLon = 12;
inline void USIM_PlatInfoMessage_Proto::clear_dflon() {
  dflon_ = 0;
}
inline double USIM_PlatInfoMessage_Proto::_internal_dflon() const {
  return dflon_;
}
inline double USIM_PlatInfoMessage_Proto::dflon() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfLon)
  return _internal_dflon();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dflon(double value) {
  
  dflon_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dflon(double value) {
  _internal_set_dflon(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfLon)
}

// double dfLat = 13;
inline void USIM_PlatInfoMessage_Proto::clear_dflat() {
  dflat_ = 0;
}
inline double USIM_PlatInfoMessage_Proto::_internal_dflat() const {
  return dflat_;
}
inline double USIM_PlatInfoMessage_Proto::dflat() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfLat)
  return _internal_dflat();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dflat(double value) {
  
  dflat_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dflat(double value) {
  _internal_set_dflat(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfLat)
}

// double dfAlt = 14;
inline void USIM_PlatInfoMessage_Proto::clear_dfalt() {
  dfalt_ = 0;
}
inline double USIM_PlatInfoMessage_Proto::_internal_dfalt() const {
  return dfalt_;
}
inline double USIM_PlatInfoMessage_Proto::dfalt() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfAlt)
  return _internal_dfalt();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfalt(double value) {
  
  dfalt_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfalt(double value) {
  _internal_set_dfalt(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfAlt)
}

// float dfHeading = 15;
inline void USIM_PlatInfoMessage_Proto::clear_dfheading() {
  dfheading_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dfheading() const {
  return dfheading_;
}
inline float USIM_PlatInfoMessage_Proto::dfheading() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfHeading)
  return _internal_dfheading();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfheading(float value) {
  
  dfheading_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfheading(float value) {
  _internal_set_dfheading(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfHeading)
}

// float dfVx = 16;
inline void USIM_PlatInfoMessage_Proto::clear_dfvx() {
  dfvx_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dfvx() const {
  return dfvx_;
}
inline float USIM_PlatInfoMessage_Proto::dfvx() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfVx)
  return _internal_dfvx();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfvx(float value) {
  
  dfvx_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfvx(float value) {
  _internal_set_dfvx(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfVx)
}

// float dfVy = 17;
inline void USIM_PlatInfoMessage_Proto::clear_dfvy() {
  dfvy_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dfvy() const {
  return dfvy_;
}
inline float USIM_PlatInfoMessage_Proto::dfvy() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfVy)
  return _internal_dfvy();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfvy(float value) {
  
  dfvy_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfvy(float value) {
  _internal_set_dfvy(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfVy)
}

// float df = 18;
inline void USIM_PlatInfoMessage_Proto::clear_df() {
  df_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_df() const {
  return df_;
}
inline float USIM_PlatInfoMessage_Proto::df() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.df)
  return _internal_df();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_df(float value) {
  
  df_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_df(float value) {
  _internal_set_df(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.df)
}

// float dfyaw = 19;
inline void USIM_PlatInfoMessage_Proto::clear_dfyaw() {
  dfyaw_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dfyaw() const {
  return dfyaw_;
}
inline float USIM_PlatInfoMessage_Proto::dfyaw() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfyaw)
  return _internal_dfyaw();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfyaw(float value) {
  
  dfyaw_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfyaw(float value) {
  _internal_set_dfyaw(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfyaw)
}

// float pitch = 20;
inline void USIM_PlatInfoMessage_Proto::clear_pitch() {
  pitch_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_pitch() const {
  return pitch_;
}
inline float USIM_PlatInfoMessage_Proto::pitch() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.pitch)
  return _internal_pitch();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_pitch(float value) {
  
  pitch_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.pitch)
}

// float roll = 21;
inline void USIM_PlatInfoMessage_Proto::clear_roll() {
  roll_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_roll() const {
  return roll_;
}
inline float USIM_PlatInfoMessage_Proto::roll() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.roll)
  return _internal_roll();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_roll(float value) {
  
  roll_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.roll)
}

// float dfSwaying = 22;
inline void USIM_PlatInfoMessage_Proto::clear_dfswaying() {
  dfswaying_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_dfswaying() const {
  return dfswaying_;
}
inline float USIM_PlatInfoMessage_Proto::dfswaying() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.dfSwaying)
  return _internal_dfswaying();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_dfswaying(float value) {
  
  dfswaying_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_dfswaying(float value) {
  _internal_set_dfswaying(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.dfSwaying)
}

// float surging = 23;
inline void USIM_PlatInfoMessage_Proto::clear_surging() {
  surging_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_surging() const {
  return surging_;
}
inline float USIM_PlatInfoMessage_Proto::surging() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.surging)
  return _internal_surging();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_surging(float value) {
  
  surging_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_surging(float value) {
  _internal_set_surging(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.surging)
}

// float heaving = 24;
inline void USIM_PlatInfoMessage_Proto::clear_heaving() {
  heaving_ = 0;
}
inline float USIM_PlatInfoMessage_Proto::_internal_heaving() const {
  return heaving_;
}
inline float USIM_PlatInfoMessage_Proto::heaving() const {
  // @@protoc_insertion_point(field_get:USIM_PlatInfoMessage_Proto.heaving)
  return _internal_heaving();
}
inline void USIM_PlatInfoMessage_Proto::_internal_set_heaving(float value) {
  
  heaving_ = value;
}
inline void USIM_PlatInfoMessage_Proto::set_heaving(float value) {
  _internal_set_heaving(value);
  // @@protoc_insertion_point(field_set:USIM_PlatInfoMessage_Proto.heaving)
}

// -------------------------------------------------------------------

// USIM_EquipmentInfo_Proto

// bytes sEquipmentName = 1;
inline void USIM_EquipmentInfo_Proto::clear_sequipmentname() {
  sequipmentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_EquipmentInfo_Proto::sequipmentname() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.sEquipmentName)
  return _internal_sequipmentname();
}
inline void USIM_EquipmentInfo_Proto::set_sequipmentname(const std::string& value) {
  _internal_set_sequipmentname(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.sEquipmentName)
}
inline std::string* USIM_EquipmentInfo_Proto::mutable_sequipmentname() {
  // @@protoc_insertion_point(field_mutable:USIM_EquipmentInfo_Proto.sEquipmentName)
  return _internal_mutable_sequipmentname();
}
inline const std::string& USIM_EquipmentInfo_Proto::_internal_sequipmentname() const {
  return sequipmentname_.Get();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_sequipmentname(const std::string& value) {
  
  sequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_EquipmentInfo_Proto::set_sequipmentname(std::string&& value) {
  
  sequipmentname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_EquipmentInfo_Proto.sEquipmentName)
}
inline void USIM_EquipmentInfo_Proto::set_sequipmentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_EquipmentInfo_Proto.sEquipmentName)
}
inline void USIM_EquipmentInfo_Proto::set_sequipmentname(const void* value,
    size_t size) {
  
  sequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_EquipmentInfo_Proto.sEquipmentName)
}
inline std::string* USIM_EquipmentInfo_Proto::_internal_mutable_sequipmentname() {
  
  return sequipmentname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_EquipmentInfo_Proto::release_sequipmentname() {
  // @@protoc_insertion_point(field_release:USIM_EquipmentInfo_Proto.sEquipmentName)
  return sequipmentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_EquipmentInfo_Proto::set_allocated_sequipmentname(std::string* sequipmentname) {
  if (sequipmentname != nullptr) {
    
  } else {
    
  }
  sequipmentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequipmentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_EquipmentInfo_Proto.sEquipmentName)
}
inline std::string* USIM_EquipmentInfo_Proto::unsafe_arena_release_sequipmentname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_EquipmentInfo_Proto.sEquipmentName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sequipmentname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_EquipmentInfo_Proto::unsafe_arena_set_allocated_sequipmentname(
    std::string* sequipmentname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sequipmentname != nullptr) {
    
  } else {
    
  }
  sequipmentname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sequipmentname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_EquipmentInfo_Proto.sEquipmentName)
}

// double dfMaxRange = 2;
inline void USIM_EquipmentInfo_Proto::clear_dfmaxrange() {
  dfmaxrange_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfmaxrange() const {
  return dfmaxrange_;
}
inline double USIM_EquipmentInfo_Proto::dfmaxrange() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfMaxRange)
  return _internal_dfmaxrange();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfmaxrange(double value) {
  
  dfmaxrange_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfmaxrange(double value) {
  _internal_set_dfmaxrange(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfMaxRange)
}

// double dfMinRange = 3;
inline void USIM_EquipmentInfo_Proto::clear_dfminrange() {
  dfminrange_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfminrange() const {
  return dfminrange_;
}
inline double USIM_EquipmentInfo_Proto::dfminrange() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfMinRange)
  return _internal_dfminrange();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfminrange(double value) {
  
  dfminrange_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfminrange(double value) {
  _internal_set_dfminrange(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfMinRange)
}

// uint32 uWeaponNum = 4;
inline void USIM_EquipmentInfo_Proto::clear_uweaponnum() {
  uweaponnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentInfo_Proto::_internal_uweaponnum() const {
  return uweaponnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentInfo_Proto::uweaponnum() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.uWeaponNum)
  return _internal_uweaponnum();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uweaponnum_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uweaponnum(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.uWeaponNum)
}

// double dfCenterHeading = 5;
inline void USIM_EquipmentInfo_Proto::clear_dfcenterheading() {
  dfcenterheading_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfcenterheading() const {
  return dfcenterheading_;
}
inline double USIM_EquipmentInfo_Proto::dfcenterheading() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfCenterHeading)
  return _internal_dfcenterheading();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfcenterheading(double value) {
  
  dfcenterheading_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfcenterheading(double value) {
  _internal_set_dfcenterheading(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfCenterHeading)
}

// bool isRelative = 6;
inline void USIM_EquipmentInfo_Proto::clear_isrelative() {
  isrelative_ = false;
}
inline bool USIM_EquipmentInfo_Proto::_internal_isrelative() const {
  return isrelative_;
}
inline bool USIM_EquipmentInfo_Proto::isrelative() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.isRelative)
  return _internal_isrelative();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_isrelative(bool value) {
  
  isrelative_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_isrelative(bool value) {
  _internal_set_isrelative(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.isRelative)
}

// double dfWidthB = 7;
inline void USIM_EquipmentInfo_Proto::clear_dfwidthb() {
  dfwidthb_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfwidthb() const {
  return dfwidthb_;
}
inline double USIM_EquipmentInfo_Proto::dfwidthb() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfWidthB)
  return _internal_dfwidthb();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfwidthb(double value) {
  
  dfwidthb_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfwidthb(double value) {
  _internal_set_dfwidthb(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfWidthB)
}

// uint32 uBeamType = 8;
inline void USIM_EquipmentInfo_Proto::clear_ubeamtype() {
  ubeamtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentInfo_Proto::_internal_ubeamtype() const {
  return ubeamtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentInfo_Proto::ubeamtype() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.uBeamType)
  return _internal_ubeamtype();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_ubeamtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ubeamtype_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_ubeamtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ubeamtype(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.uBeamType)
}

// bool bAlive = 9;
inline void USIM_EquipmentInfo_Proto::clear_balive() {
  balive_ = false;
}
inline bool USIM_EquipmentInfo_Proto::_internal_balive() const {
  return balive_;
}
inline bool USIM_EquipmentInfo_Proto::balive() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.bAlive)
  return _internal_balive();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_balive(bool value) {
  
  balive_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_balive(bool value) {
  _internal_set_balive(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.bAlive)
}

// bytes sTargetType = 10;
inline void USIM_EquipmentInfo_Proto::clear_stargettype() {
  stargettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_EquipmentInfo_Proto::stargettype() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.sTargetType)
  return _internal_stargettype();
}
inline void USIM_EquipmentInfo_Proto::set_stargettype(const std::string& value) {
  _internal_set_stargettype(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.sTargetType)
}
inline std::string* USIM_EquipmentInfo_Proto::mutable_stargettype() {
  // @@protoc_insertion_point(field_mutable:USIM_EquipmentInfo_Proto.sTargetType)
  return _internal_mutable_stargettype();
}
inline const std::string& USIM_EquipmentInfo_Proto::_internal_stargettype() const {
  return stargettype_.Get();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_stargettype(const std::string& value) {
  
  stargettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_EquipmentInfo_Proto::set_stargettype(std::string&& value) {
  
  stargettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_EquipmentInfo_Proto.sTargetType)
}
inline void USIM_EquipmentInfo_Proto::set_stargettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stargettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_EquipmentInfo_Proto.sTargetType)
}
inline void USIM_EquipmentInfo_Proto::set_stargettype(const void* value,
    size_t size) {
  
  stargettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_EquipmentInfo_Proto.sTargetType)
}
inline std::string* USIM_EquipmentInfo_Proto::_internal_mutable_stargettype() {
  
  return stargettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_EquipmentInfo_Proto::release_stargettype() {
  // @@protoc_insertion_point(field_release:USIM_EquipmentInfo_Proto.sTargetType)
  return stargettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_EquipmentInfo_Proto::set_allocated_stargettype(std::string* stargettype) {
  if (stargettype != nullptr) {
    
  } else {
    
  }
  stargettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stargettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_EquipmentInfo_Proto.sTargetType)
}
inline std::string* USIM_EquipmentInfo_Proto::unsafe_arena_release_stargettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_EquipmentInfo_Proto.sTargetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return stargettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_EquipmentInfo_Proto::unsafe_arena_set_allocated_stargettype(
    std::string* stargettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stargettype != nullptr) {
    
  } else {
    
  }
  stargettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stargettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_EquipmentInfo_Proto.sTargetType)
}

// double dfMaxElevation = 11;
inline void USIM_EquipmentInfo_Proto::clear_dfmaxelevation() {
  dfmaxelevation_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfmaxelevation() const {
  return dfmaxelevation_;
}
inline double USIM_EquipmentInfo_Proto::dfmaxelevation() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfMaxElevation)
  return _internal_dfmaxelevation();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfmaxelevation(double value) {
  
  dfmaxelevation_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfmaxelevation(double value) {
  _internal_set_dfmaxelevation(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfMaxElevation)
}

// double dfMinElevation = 12;
inline void USIM_EquipmentInfo_Proto::clear_dfminelevation() {
  dfminelevation_ = 0;
}
inline double USIM_EquipmentInfo_Proto::_internal_dfminelevation() const {
  return dfminelevation_;
}
inline double USIM_EquipmentInfo_Proto::dfminelevation() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentInfo_Proto.dfMinElevation)
  return _internal_dfminelevation();
}
inline void USIM_EquipmentInfo_Proto::_internal_set_dfminelevation(double value) {
  
  dfminelevation_ = value;
}
inline void USIM_EquipmentInfo_Proto::set_dfminelevation(double value) {
  _internal_set_dfminelevation(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentInfo_Proto.dfMinElevation)
}

// -------------------------------------------------------------------

// USIM_EquipmentLoadInfo_Proto

// uint32 uID = 1;
inline void USIM_EquipmentLoadInfo_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentLoadInfo_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentLoadInfo_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentLoadInfo_Proto.uID)
  return _internal_uid();
}
inline void USIM_EquipmentLoadInfo_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_EquipmentLoadInfo_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentLoadInfo_Proto.uID)
}

// bytes splatname = 2;
inline void USIM_EquipmentLoadInfo_Proto::clear_splatname() {
  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_EquipmentLoadInfo_Proto::splatname() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentLoadInfo_Proto.splatname)
  return _internal_splatname();
}
inline void USIM_EquipmentLoadInfo_Proto::set_splatname(const std::string& value) {
  _internal_set_splatname(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentLoadInfo_Proto.splatname)
}
inline std::string* USIM_EquipmentLoadInfo_Proto::mutable_splatname() {
  // @@protoc_insertion_point(field_mutable:USIM_EquipmentLoadInfo_Proto.splatname)
  return _internal_mutable_splatname();
}
inline const std::string& USIM_EquipmentLoadInfo_Proto::_internal_splatname() const {
  return splatname_.Get();
}
inline void USIM_EquipmentLoadInfo_Proto::_internal_set_splatname(const std::string& value) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_EquipmentLoadInfo_Proto::set_splatname(std::string&& value) {
  
  splatname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_EquipmentLoadInfo_Proto.splatname)
}
inline void USIM_EquipmentLoadInfo_Proto::set_splatname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_EquipmentLoadInfo_Proto.splatname)
}
inline void USIM_EquipmentLoadInfo_Proto::set_splatname(const void* value,
    size_t size) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_EquipmentLoadInfo_Proto.splatname)
}
inline std::string* USIM_EquipmentLoadInfo_Proto::_internal_mutable_splatname() {
  
  return splatname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_EquipmentLoadInfo_Proto::release_splatname() {
  // @@protoc_insertion_point(field_release:USIM_EquipmentLoadInfo_Proto.splatname)
  return splatname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_EquipmentLoadInfo_Proto::set_allocated_splatname(std::string* splatname) {
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splatname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_EquipmentLoadInfo_Proto.splatname)
}
inline std::string* USIM_EquipmentLoadInfo_Proto::unsafe_arena_release_splatname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_EquipmentLoadInfo_Proto.splatname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return splatname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_EquipmentLoadInfo_Proto::unsafe_arena_set_allocated_splatname(
    std::string* splatname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      splatname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_EquipmentLoadInfo_Proto.splatname)
}

// uint32 uEquipmentType = 3;
inline void USIM_EquipmentLoadInfo_Proto::clear_uequipmenttype() {
  uequipmenttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentLoadInfo_Proto::_internal_uequipmenttype() const {
  return uequipmenttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_EquipmentLoadInfo_Proto::uequipmenttype() const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentLoadInfo_Proto.uEquipmentType)
  return _internal_uequipmenttype();
}
inline void USIM_EquipmentLoadInfo_Proto::_internal_set_uequipmenttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uequipmenttype_ = value;
}
inline void USIM_EquipmentLoadInfo_Proto::set_uequipmenttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uequipmenttype(value);
  // @@protoc_insertion_point(field_set:USIM_EquipmentLoadInfo_Proto.uEquipmentType)
}

// repeated .USIM_EquipmentInfo_Proto vecEquipmentInfoList = 4;
inline int USIM_EquipmentLoadInfo_Proto::_internal_vecequipmentinfolist_size() const {
  return vecequipmentinfolist_.size();
}
inline int USIM_EquipmentLoadInfo_Proto::vecequipmentinfolist_size() const {
  return _internal_vecequipmentinfolist_size();
}
inline void USIM_EquipmentLoadInfo_Proto::clear_vecequipmentinfolist() {
  vecequipmentinfolist_.Clear();
}
inline ::USIM_EquipmentInfo_Proto* USIM_EquipmentLoadInfo_Proto::mutable_vecequipmentinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_EquipmentLoadInfo_Proto.vecEquipmentInfoList)
  return vecequipmentinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_EquipmentInfo_Proto >*
USIM_EquipmentLoadInfo_Proto::mutable_vecequipmentinfolist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_EquipmentLoadInfo_Proto.vecEquipmentInfoList)
  return &vecequipmentinfolist_;
}
inline const ::USIM_EquipmentInfo_Proto& USIM_EquipmentLoadInfo_Proto::_internal_vecequipmentinfolist(int index) const {
  return vecequipmentinfolist_.Get(index);
}
inline const ::USIM_EquipmentInfo_Proto& USIM_EquipmentLoadInfo_Proto::vecequipmentinfolist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_EquipmentLoadInfo_Proto.vecEquipmentInfoList)
  return _internal_vecequipmentinfolist(index);
}
inline ::USIM_EquipmentInfo_Proto* USIM_EquipmentLoadInfo_Proto::_internal_add_vecequipmentinfolist() {
  return vecequipmentinfolist_.Add();
}
inline ::USIM_EquipmentInfo_Proto* USIM_EquipmentLoadInfo_Proto::add_vecequipmentinfolist() {
  // @@protoc_insertion_point(field_add:USIM_EquipmentLoadInfo_Proto.vecEquipmentInfoList)
  return _internal_add_vecequipmentinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_EquipmentInfo_Proto >&
USIM_EquipmentLoadInfo_Proto::vecequipmentinfolist() const {
  // @@protoc_insertion_point(field_list:USIM_EquipmentLoadInfo_Proto.vecEquipmentInfoList)
  return vecequipmentinfolist_;
}

// -------------------------------------------------------------------

// USIM_Detection_Proto

// double dfSimTime = 1;
inline void USIM_Detection_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_Detection_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_Detection_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_Detection_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_Detection_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_Detection_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uID)
  return _internal_uid();
}
inline void USIM_Detection_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_Detection_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uID)
}

// bytes cSensorName = 3;
inline void USIM_Detection_Proto::clear_csensorname() {
  csensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_Detection_Proto::csensorname() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.cSensorName)
  return _internal_csensorname();
}
inline void USIM_Detection_Proto::set_csensorname(const std::string& value) {
  _internal_set_csensorname(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.cSensorName)
}
inline std::string* USIM_Detection_Proto::mutable_csensorname() {
  // @@protoc_insertion_point(field_mutable:USIM_Detection_Proto.cSensorName)
  return _internal_mutable_csensorname();
}
inline const std::string& USIM_Detection_Proto::_internal_csensorname() const {
  return csensorname_.Get();
}
inline void USIM_Detection_Proto::_internal_set_csensorname(const std::string& value) {
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_Detection_Proto::set_csensorname(std::string&& value) {
  
  csensorname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_Detection_Proto.cSensorName)
}
inline void USIM_Detection_Proto::set_csensorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_Detection_Proto.cSensorName)
}
inline void USIM_Detection_Proto::set_csensorname(const void* value,
    size_t size) {
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_Detection_Proto.cSensorName)
}
inline std::string* USIM_Detection_Proto::_internal_mutable_csensorname() {
  
  return csensorname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_Detection_Proto::release_csensorname() {
  // @@protoc_insertion_point(field_release:USIM_Detection_Proto.cSensorName)
  return csensorname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_Detection_Proto::set_allocated_csensorname(std::string* csensorname) {
  if (csensorname != nullptr) {
    
  } else {
    
  }
  csensorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csensorname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_Detection_Proto.cSensorName)
}
inline std::string* USIM_Detection_Proto::unsafe_arena_release_csensorname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_Detection_Proto.cSensorName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return csensorname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_Detection_Proto::unsafe_arena_set_allocated_csensorname(
    std::string* csensorname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (csensorname != nullptr) {
    
  } else {
    
  }
  csensorname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csensorname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_Detection_Proto.cSensorName)
}

// uint32 uTargetID = 4;
inline void USIM_Detection_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_Detection_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_Detection_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uTargetID)
}

// uint32 uTargetNumber = 5;
inline void USIM_Detection_Proto::clear_utargetnumber() {
  utargetnumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_utargetnumber() const {
  return utargetnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::utargetnumber() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uTargetNumber)
  return _internal_utargetnumber();
}
inline void USIM_Detection_Proto::_internal_set_utargetnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetnumber_ = value;
}
inline void USIM_Detection_Proto::set_utargetnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetnumber(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uTargetNumber)
}

// uint32 uAttribute = 6;
inline void USIM_Detection_Proto::clear_uattribute() {
  uattribute_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_uattribute() const {
  return uattribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::uattribute() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uAttribute)
  return _internal_uattribute();
}
inline void USIM_Detection_Proto::_internal_set_uattribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uattribute_ = value;
}
inline void USIM_Detection_Proto::set_uattribute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uattribute(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uAttribute)
}

// uint32 uKind = 7;
inline void USIM_Detection_Proto::clear_ukind() {
  ukind_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_ukind() const {
  return ukind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::ukind() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uKind)
  return _internal_ukind();
}
inline void USIM_Detection_Proto::_internal_set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ukind_ = value;
}
inline void USIM_Detection_Proto::set_ukind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ukind(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uKind)
}

// uint32 uClass = 8;
inline void USIM_Detection_Proto::clear_uclass() {
  uclass_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_uclass() const {
  return uclass_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::uclass() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uClass)
  return _internal_uclass();
}
inline void USIM_Detection_Proto::_internal_set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uclass_ = value;
}
inline void USIM_Detection_Proto::set_uclass(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uclass(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uClass)
}

// uint32 uType = 9;
inline void USIM_Detection_Proto::clear_utype() {
  utype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::_internal_utype() const {
  return utype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Detection_Proto::utype() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.uType)
  return _internal_utype();
}
inline void USIM_Detection_Proto::_internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utype_ = value;
}
inline void USIM_Detection_Proto::set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utype(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.uType)
}

// double dfDistance = 10;
inline void USIM_Detection_Proto::clear_dfdistance() {
  dfdistance_ = 0;
}
inline double USIM_Detection_Proto::_internal_dfdistance() const {
  return dfdistance_;
}
inline double USIM_Detection_Proto::dfdistance() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.dfDistance)
  return _internal_dfdistance();
}
inline void USIM_Detection_Proto::_internal_set_dfdistance(double value) {
  
  dfdistance_ = value;
}
inline void USIM_Detection_Proto::set_dfdistance(double value) {
  _internal_set_dfdistance(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.dfDistance)
}

// double dfOrientation = 11;
inline void USIM_Detection_Proto::clear_dforientation() {
  dforientation_ = 0;
}
inline double USIM_Detection_Proto::_internal_dforientation() const {
  return dforientation_;
}
inline double USIM_Detection_Proto::dforientation() const {
  // @@protoc_insertion_point(field_get:USIM_Detection_Proto.dfOrientation)
  return _internal_dforientation();
}
inline void USIM_Detection_Proto::_internal_set_dforientation(double value) {
  
  dforientation_ = value;
}
inline void USIM_Detection_Proto::set_dforientation(double value) {
  _internal_set_dforientation(value);
  // @@protoc_insertion_point(field_set:USIM_Detection_Proto.dfOrientation)
}

// -------------------------------------------------------------------

// USIM_Fusion_Proto

// double dfSimTime = 1;
inline void USIM_Fusion_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_Fusion_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_Fusion_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_Fusion_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_Fusion_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.uID)
  return _internal_uid();
}
inline void USIM_Fusion_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_Fusion_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.uID)
}

// uint32 uTrackNumber = 3;
inline void USIM_Fusion_Proto::clear_utracknumber() {
  utracknumber_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::_internal_utracknumber() const {
  return utracknumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::utracknumber() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.uTrackNumber)
  return _internal_utracknumber();
}
inline void USIM_Fusion_Proto::_internal_set_utracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utracknumber_ = value;
}
inline void USIM_Fusion_Proto::set_utracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utracknumber(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.uTrackNumber)
}

// uint32 uTargetAffinity = 4;
inline void USIM_Fusion_Proto::clear_utargetaffinity() {
  utargetaffinity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::_internal_utargetaffinity() const {
  return utargetaffinity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::utargetaffinity() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.uTargetAffinity)
  return _internal_utargetaffinity();
}
inline void USIM_Fusion_Proto::_internal_set_utargetaffinity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetaffinity_ = value;
}
inline void USIM_Fusion_Proto::set_utargetaffinity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetaffinity(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.uTargetAffinity)
}

// uint32 cTargetType = 5;
inline void USIM_Fusion_Proto::clear_ctargettype() {
  ctargettype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::_internal_ctargettype() const {
  return ctargettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Fusion_Proto::ctargettype() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.cTargetType)
  return _internal_ctargettype();
}
inline void USIM_Fusion_Proto::_internal_set_ctargettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ctargettype_ = value;
}
inline void USIM_Fusion_Proto::set_ctargettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctargettype(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.cTargetType)
}

// double dfTargetLon = 6;
inline void USIM_Fusion_Proto::clear_dftargetlon() {
  dftargetlon_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dftargetlon() const {
  return dftargetlon_;
}
inline double USIM_Fusion_Proto::dftargetlon() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfTargetLon)
  return _internal_dftargetlon();
}
inline void USIM_Fusion_Proto::_internal_set_dftargetlon(double value) {
  
  dftargetlon_ = value;
}
inline void USIM_Fusion_Proto::set_dftargetlon(double value) {
  _internal_set_dftargetlon(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfTargetLon)
}

// double dfTargetLat = 7;
inline void USIM_Fusion_Proto::clear_dftargetlat() {
  dftargetlat_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dftargetlat() const {
  return dftargetlat_;
}
inline double USIM_Fusion_Proto::dftargetlat() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfTargetLat)
  return _internal_dftargetlat();
}
inline void USIM_Fusion_Proto::_internal_set_dftargetlat(double value) {
  
  dftargetlat_ = value;
}
inline void USIM_Fusion_Proto::set_dftargetlat(double value) {
  _internal_set_dftargetlat(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfTargetLat)
}

// double dfTargetAlt = 8;
inline void USIM_Fusion_Proto::clear_dftargetalt() {
  dftargetalt_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dftargetalt() const {
  return dftargetalt_;
}
inline double USIM_Fusion_Proto::dftargetalt() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfTargetAlt)
  return _internal_dftargetalt();
}
inline void USIM_Fusion_Proto::_internal_set_dftargetalt(double value) {
  
  dftargetalt_ = value;
}
inline void USIM_Fusion_Proto::set_dftargetalt(double value) {
  _internal_set_dftargetalt(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfTargetAlt)
}

// double dfTargetHeading = 9;
inline void USIM_Fusion_Proto::clear_dftargetheading() {
  dftargetheading_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dftargetheading() const {
  return dftargetheading_;
}
inline double USIM_Fusion_Proto::dftargetheading() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfTargetHeading)
  return _internal_dftargetheading();
}
inline void USIM_Fusion_Proto::_internal_set_dftargetheading(double value) {
  
  dftargetheading_ = value;
}
inline void USIM_Fusion_Proto::set_dftargetheading(double value) {
  _internal_set_dftargetheading(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfTargetHeading)
}

// double dfTargetSpeed = 10;
inline void USIM_Fusion_Proto::clear_dftargetspeed() {
  dftargetspeed_ = 0;
}
inline double USIM_Fusion_Proto::_internal_dftargetspeed() const {
  return dftargetspeed_;
}
inline double USIM_Fusion_Proto::dftargetspeed() const {
  // @@protoc_insertion_point(field_get:USIM_Fusion_Proto.dfTargetSpeed)
  return _internal_dftargetspeed();
}
inline void USIM_Fusion_Proto::_internal_set_dftargetspeed(double value) {
  
  dftargetspeed_ = value;
}
inline void USIM_Fusion_Proto::set_dftargetspeed(double value) {
  _internal_set_dftargetspeed(value);
  // @@protoc_insertion_point(field_set:USIM_Fusion_Proto.dfTargetSpeed)
}

// -------------------------------------------------------------------

// USIM_DetectionEvent_Proto

// double dfSimTime = 1;
inline void USIM_DetectionEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_DetectionEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_DetectionEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_DetectionEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_DetectionEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_DetectionEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_DetectionEvent_Proto.dfSimTime)
}

// uint32 uPlatID = 2;
inline void USIM_DetectionEvent_Proto::clear_uplatid() {
  uplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::_internal_uplatid() const {
  return uplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::uplatid() const {
  // @@protoc_insertion_point(field_get:USIM_DetectionEvent_Proto.uPlatID)
  return _internal_uplatid();
}
inline void USIM_DetectionEvent_Proto::_internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplatid_ = value;
}
inline void USIM_DetectionEvent_Proto::set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplatid(value);
  // @@protoc_insertion_point(field_set:USIM_DetectionEvent_Proto.uPlatID)
}

// uint32 uTargetPlatID = 3;
inline void USIM_DetectionEvent_Proto::clear_utargetplatid() {
  utargetplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::_internal_utargetplatid() const {
  return utargetplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::utargetplatid() const {
  // @@protoc_insertion_point(field_get:USIM_DetectionEvent_Proto.uTargetPlatID)
  return _internal_utargetplatid();
}
inline void USIM_DetectionEvent_Proto::_internal_set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetplatid_ = value;
}
inline void USIM_DetectionEvent_Proto::set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetplatid(value);
  // @@protoc_insertion_point(field_set:USIM_DetectionEvent_Proto.uTargetPlatID)
}

// bytes cSensorName = 4;
inline void USIM_DetectionEvent_Proto::clear_csensorname() {
  csensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_DetectionEvent_Proto::csensorname() const {
  // @@protoc_insertion_point(field_get:USIM_DetectionEvent_Proto.cSensorName)
  return _internal_csensorname();
}
inline void USIM_DetectionEvent_Proto::set_csensorname(const std::string& value) {
  _internal_set_csensorname(value);
  // @@protoc_insertion_point(field_set:USIM_DetectionEvent_Proto.cSensorName)
}
inline std::string* USIM_DetectionEvent_Proto::mutable_csensorname() {
  // @@protoc_insertion_point(field_mutable:USIM_DetectionEvent_Proto.cSensorName)
  return _internal_mutable_csensorname();
}
inline const std::string& USIM_DetectionEvent_Proto::_internal_csensorname() const {
  return csensorname_.Get();
}
inline void USIM_DetectionEvent_Proto::_internal_set_csensorname(const std::string& value) {
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_DetectionEvent_Proto::set_csensorname(std::string&& value) {
  
  csensorname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_DetectionEvent_Proto.cSensorName)
}
inline void USIM_DetectionEvent_Proto::set_csensorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_DetectionEvent_Proto.cSensorName)
}
inline void USIM_DetectionEvent_Proto::set_csensorname(const void* value,
    size_t size) {
  
  csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_DetectionEvent_Proto.cSensorName)
}
inline std::string* USIM_DetectionEvent_Proto::_internal_mutable_csensorname() {
  
  return csensorname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_DetectionEvent_Proto::release_csensorname() {
  // @@protoc_insertion_point(field_release:USIM_DetectionEvent_Proto.cSensorName)
  return csensorname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_DetectionEvent_Proto::set_allocated_csensorname(std::string* csensorname) {
  if (csensorname != nullptr) {
    
  } else {
    
  }
  csensorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), csensorname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_DetectionEvent_Proto.cSensorName)
}
inline std::string* USIM_DetectionEvent_Proto::unsafe_arena_release_csensorname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_DetectionEvent_Proto.cSensorName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return csensorname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_DetectionEvent_Proto::unsafe_arena_set_allocated_csensorname(
    std::string* csensorname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (csensorname != nullptr) {
    
  } else {
    
  }
  csensorname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      csensorname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_DetectionEvent_Proto.cSensorName)
}

// uint32 uEventType = 5;
inline void USIM_DetectionEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DetectionEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_DetectionEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_DetectionEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_DetectionEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_DetectionEvent_Proto.uEventType)
}

// -------------------------------------------------------------------

// USIM_FusionEvent_Proto

// double dfSimTime = 1;
inline void USIM_FusionEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_FusionEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_FusionEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_FusionEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_FusionEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_FusionEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_FusionEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_FusionEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_FusionEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_FusionEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_FusionEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_FusionEvent_Proto.uID)
}

// uint32 uTargetID = 3;
inline void USIM_FusionEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_FusionEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_FusionEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_FusionEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_FusionEvent_Proto.uTargetID)
}

// uint32 uTargetPlatID = 4;
inline void USIM_FusionEvent_Proto::clear_utargetplatid() {
  utargetplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::_internal_utargetplatid() const {
  return utargetplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::utargetplatid() const {
  // @@protoc_insertion_point(field_get:USIM_FusionEvent_Proto.uTargetPlatID)
  return _internal_utargetplatid();
}
inline void USIM_FusionEvent_Proto::_internal_set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetplatid_ = value;
}
inline void USIM_FusionEvent_Proto::set_utargetplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetplatid(value);
  // @@protoc_insertion_point(field_set:USIM_FusionEvent_Proto.uTargetPlatID)
}

// uint32 uEventType = 5;
inline void USIM_FusionEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_FusionEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_FusionEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_FusionEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_FusionEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_FusionEvent_Proto.uEventType)
}

// -------------------------------------------------------------------

// USIM_CommunicationEvent_Proto

// double dfSimTime = 1;
inline void USIM_CommunicationEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_CommunicationEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_CommunicationEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_CommunicationEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.uID)
}

// uint32 uReceiverID = 3;
inline void USIM_CommunicationEvent_Proto::clear_ureceiverid() {
  ureceiverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::_internal_ureceiverid() const {
  return ureceiverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::ureceiverid() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.uReceiverID)
  return _internal_ureceiverid();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ureceiverid_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ureceiverid(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.uReceiverID)
}

// uint32 uTargetID = 4;
inline void USIM_CommunicationEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.uTargetID)
}

// uint32 uEventType = 5;
inline void USIM_CommunicationEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.uEventType)
}

// uint32 uframeNo = 6;
inline void USIM_CommunicationEvent_Proto::clear_uframeno() {
  uframeno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::_internal_uframeno() const {
  return uframeno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommunicationEvent_Proto::uframeno() const {
  // @@protoc_insertion_point(field_get:USIM_CommunicationEvent_Proto.uframeNo)
  return _internal_uframeno();
}
inline void USIM_CommunicationEvent_Proto::_internal_set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uframeno_ = value;
}
inline void USIM_CommunicationEvent_Proto::set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uframeno(value);
  // @@protoc_insertion_point(field_set:USIM_CommunicationEvent_Proto.uframeNo)
}

// -------------------------------------------------------------------

// USIM_CommandControlEvent_Proto

// double dfSimTime = 1;
inline void USIM_CommandControlEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_CommandControlEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_CommandControlEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.dfSimTime)
}

// uint32 uHostID = 2;
inline void USIM_CommandControlEvent_Proto::clear_uhostid() {
  uhostid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_uhostid() const {
  return uhostid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::uhostid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uHostID)
  return _internal_uhostid();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_uhostid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uhostid_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_uhostid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uhostid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uHostID)
}

// uint32 sSlaveID = 3;
inline void USIM_CommandControlEvent_Proto::clear_sslaveid() {
  sslaveid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_sslaveid() const {
  return sslaveid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::sslaveid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.sSlaveID)
  return _internal_sslaveid();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_sslaveid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sslaveid_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_sslaveid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sslaveid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.sSlaveID)
}

// bytes sSlaveEquipmentName = 4;
inline void USIM_CommandControlEvent_Proto::clear_sslaveequipmentname() {
  sslaveequipmentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandControlEvent_Proto::sslaveequipmentname() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
  return _internal_sslaveequipmentname();
}
inline void USIM_CommandControlEvent_Proto::set_sslaveequipmentname(const std::string& value) {
  _internal_set_sslaveequipmentname(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}
inline std::string* USIM_CommandControlEvent_Proto::mutable_sslaveequipmentname() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
  return _internal_mutable_sslaveequipmentname();
}
inline const std::string& USIM_CommandControlEvent_Proto::_internal_sslaveequipmentname() const {
  return sslaveequipmentname_.Get();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_sslaveequipmentname(const std::string& value) {
  
  sslaveequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandControlEvent_Proto::set_sslaveequipmentname(std::string&& value) {
  
  sslaveequipmentname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}
inline void USIM_CommandControlEvent_Proto::set_sslaveequipmentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sslaveequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}
inline void USIM_CommandControlEvent_Proto::set_sslaveequipmentname(const void* value,
    size_t size) {
  
  sslaveequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}
inline std::string* USIM_CommandControlEvent_Proto::_internal_mutable_sslaveequipmentname() {
  
  return sslaveequipmentname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandControlEvent_Proto::release_sslaveequipmentname() {
  // @@protoc_insertion_point(field_release:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
  return sslaveequipmentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandControlEvent_Proto::set_allocated_sslaveequipmentname(std::string* sslaveequipmentname) {
  if (sslaveequipmentname != nullptr) {
    
  } else {
    
  }
  sslaveequipmentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sslaveequipmentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}
inline std::string* USIM_CommandControlEvent_Proto::unsafe_arena_release_sslaveequipmentname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sslaveequipmentname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandControlEvent_Proto::unsafe_arena_set_allocated_sslaveequipmentname(
    std::string* sslaveequipmentname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sslaveequipmentname != nullptr) {
    
  } else {
    
  }
  sslaveequipmentname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sslaveequipmentname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandControlEvent_Proto.sSlaveEquipmentName)
}

// uint32 uTargetType = 5;
inline void USIM_CommandControlEvent_Proto::clear_utargettype() {
  utargettype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_utargettype() const {
  return utargettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::utargettype() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uTargetType)
  return _internal_utargettype();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_utargettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargettype_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_utargettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargettype(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uTargetType)
}

// uint32 uTargetID = 6;
inline void USIM_CommandControlEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uTargetID)
}

// double dfLon = 7;
inline void USIM_CommandControlEvent_Proto::clear_dflon() {
  dflon_ = 0;
}
inline double USIM_CommandControlEvent_Proto::_internal_dflon() const {
  return dflon_;
}
inline double USIM_CommandControlEvent_Proto::dflon() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.dfLon)
  return _internal_dflon();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_dflon(double value) {
  
  dflon_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_dflon(double value) {
  _internal_set_dflon(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.dfLon)
}

// double dfLat = 8;
inline void USIM_CommandControlEvent_Proto::clear_dflat() {
  dflat_ = 0;
}
inline double USIM_CommandControlEvent_Proto::_internal_dflat() const {
  return dflat_;
}
inline double USIM_CommandControlEvent_Proto::dflat() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.dfLat)
  return _internal_dflat();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_dflat(double value) {
  
  dflat_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_dflat(double value) {
  _internal_set_dflat(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.dfLat)
}

// double dfAlt = 9;
inline void USIM_CommandControlEvent_Proto::clear_dfalt() {
  dfalt_ = 0;
}
inline double USIM_CommandControlEvent_Proto::_internal_dfalt() const {
  return dfalt_;
}
inline double USIM_CommandControlEvent_Proto::dfalt() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.dfAlt)
  return _internal_dfalt();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_dfalt(double value) {
  
  dfalt_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_dfalt(double value) {
  _internal_set_dfalt(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.dfAlt)
}

// uint32 uCommandType = 10;
inline void USIM_CommandControlEvent_Proto::clear_ucommandtype() {
  ucommandtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_ucommandtype() const {
  return ucommandtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::ucommandtype() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uCommandType)
  return _internal_ucommandtype();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_ucommandtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ucommandtype_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_ucommandtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ucommandtype(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uCommandType)
}

// uint32 uEventType = 11;
inline void USIM_CommandControlEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uEventType)
}

// uint32 uframeNo = 12;
inline void USIM_CommandControlEvent_Proto::clear_uframeno() {
  uframeno_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::_internal_uframeno() const {
  return uframeno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandControlEvent_Proto::uframeno() const {
  // @@protoc_insertion_point(field_get:USIM_CommandControlEvent_Proto.uframeNo)
  return _internal_uframeno();
}
inline void USIM_CommandControlEvent_Proto::_internal_set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uframeno_ = value;
}
inline void USIM_CommandControlEvent_Proto::set_uframeno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uframeno(value);
  // @@protoc_insertion_point(field_set:USIM_CommandControlEvent_Proto.uframeNo)
}

// -------------------------------------------------------------------

// USIM_WeaponSystemEvent_Proto

// double dfSimTime = 1;
inline void USIM_WeaponSystemEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_WeaponSystemEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_WeaponSystemEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponSystemEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_WeaponSystemEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_WeaponSystemEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponSystemEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_WeaponSystemEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponSystemEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_WeaponSystemEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_WeaponSystemEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponSystemEvent_Proto.uID)
}

// uint32 cTargetID = 3;
inline void USIM_WeaponSystemEvent_Proto::clear_ctargetid() {
  ctargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::_internal_ctargetid() const {
  return ctargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::ctargetid() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponSystemEvent_Proto.cTargetID)
  return _internal_ctargetid();
}
inline void USIM_WeaponSystemEvent_Proto::_internal_set_ctargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ctargetid_ = value;
}
inline void USIM_WeaponSystemEvent_Proto::set_ctargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ctargetid(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponSystemEvent_Proto.cTargetID)
}

// uint32 uWeaponSystemEventType = 4;
inline void USIM_WeaponSystemEvent_Proto::clear_uweaponsystemeventtype() {
  uweaponsystemeventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::_internal_uweaponsystemeventtype() const {
  return uweaponsystemeventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponSystemEvent_Proto::uweaponsystemeventtype() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponSystemEvent_Proto.uWeaponSystemEventType)
  return _internal_uweaponsystemeventtype();
}
inline void USIM_WeaponSystemEvent_Proto::_internal_set_uweaponsystemeventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uweaponsystemeventtype_ = value;
}
inline void USIM_WeaponSystemEvent_Proto::set_uweaponsystemeventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uweaponsystemeventtype(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponSystemEvent_Proto.uWeaponSystemEventType)
}

// bytes cWeaponName = 5;
inline void USIM_WeaponSystemEvent_Proto::clear_cweaponname() {
  cweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_WeaponSystemEvent_Proto::cweaponname() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponSystemEvent_Proto.cWeaponName)
  return _internal_cweaponname();
}
inline void USIM_WeaponSystemEvent_Proto::set_cweaponname(const std::string& value) {
  _internal_set_cweaponname(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponSystemEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponSystemEvent_Proto::mutable_cweaponname() {
  // @@protoc_insertion_point(field_mutable:USIM_WeaponSystemEvent_Proto.cWeaponName)
  return _internal_mutable_cweaponname();
}
inline const std::string& USIM_WeaponSystemEvent_Proto::_internal_cweaponname() const {
  return cweaponname_.Get();
}
inline void USIM_WeaponSystemEvent_Proto::_internal_set_cweaponname(const std::string& value) {
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_WeaponSystemEvent_Proto::set_cweaponname(std::string&& value) {
  
  cweaponname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_WeaponSystemEvent_Proto.cWeaponName)
}
inline void USIM_WeaponSystemEvent_Proto::set_cweaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_WeaponSystemEvent_Proto.cWeaponName)
}
inline void USIM_WeaponSystemEvent_Proto::set_cweaponname(const void* value,
    size_t size) {
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_WeaponSystemEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponSystemEvent_Proto::_internal_mutable_cweaponname() {
  
  return cweaponname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_WeaponSystemEvent_Proto::release_cweaponname() {
  // @@protoc_insertion_point(field_release:USIM_WeaponSystemEvent_Proto.cWeaponName)
  return cweaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_WeaponSystemEvent_Proto::set_allocated_cweaponname(std::string* cweaponname) {
  if (cweaponname != nullptr) {
    
  } else {
    
  }
  cweaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cweaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_WeaponSystemEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponSystemEvent_Proto::unsafe_arena_release_cweaponname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_WeaponSystemEvent_Proto.cWeaponName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cweaponname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_WeaponSystemEvent_Proto::unsafe_arena_set_allocated_cweaponname(
    std::string* cweaponname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cweaponname != nullptr) {
    
  } else {
    
  }
  cweaponname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cweaponname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_WeaponSystemEvent_Proto.cWeaponName)
}

// -------------------------------------------------------------------

// USIM_WeaponLaunchEvent_Proto

// double dfSimTime = 1;
inline void USIM_WeaponLaunchEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_WeaponLaunchEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_WeaponLaunchEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponLaunchEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_WeaponLaunchEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_WeaponLaunchEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponLaunchEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_WeaponLaunchEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponLaunchEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_WeaponLaunchEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_WeaponLaunchEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponLaunchEvent_Proto.uID)
}

// uint32 uTargetID = 3;
inline void USIM_WeaponLaunchEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponLaunchEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_WeaponLaunchEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_WeaponLaunchEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponLaunchEvent_Proto.uTargetID)
}

// bytes cWeaponName = 4;
inline void USIM_WeaponLaunchEvent_Proto::clear_cweaponname() {
  cweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_WeaponLaunchEvent_Proto::cweaponname() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponLaunchEvent_Proto.cWeaponName)
  return _internal_cweaponname();
}
inline void USIM_WeaponLaunchEvent_Proto::set_cweaponname(const std::string& value) {
  _internal_set_cweaponname(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponLaunchEvent_Proto::mutable_cweaponname() {
  // @@protoc_insertion_point(field_mutable:USIM_WeaponLaunchEvent_Proto.cWeaponName)
  return _internal_mutable_cweaponname();
}
inline const std::string& USIM_WeaponLaunchEvent_Proto::_internal_cweaponname() const {
  return cweaponname_.Get();
}
inline void USIM_WeaponLaunchEvent_Proto::_internal_set_cweaponname(const std::string& value) {
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_WeaponLaunchEvent_Proto::set_cweaponname(std::string&& value) {
  
  cweaponname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}
inline void USIM_WeaponLaunchEvent_Proto::set_cweaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}
inline void USIM_WeaponLaunchEvent_Proto::set_cweaponname(const void* value,
    size_t size) {
  
  cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponLaunchEvent_Proto::_internal_mutable_cweaponname() {
  
  return cweaponname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_WeaponLaunchEvent_Proto::release_cweaponname() {
  // @@protoc_insertion_point(field_release:USIM_WeaponLaunchEvent_Proto.cWeaponName)
  return cweaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_WeaponLaunchEvent_Proto::set_allocated_cweaponname(std::string* cweaponname) {
  if (cweaponname != nullptr) {
    
  } else {
    
  }
  cweaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cweaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}
inline std::string* USIM_WeaponLaunchEvent_Proto::unsafe_arena_release_cweaponname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_WeaponLaunchEvent_Proto.cWeaponName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cweaponname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_WeaponLaunchEvent_Proto::unsafe_arena_set_allocated_cweaponname(
    std::string* cweaponname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cweaponname != nullptr) {
    
  } else {
    
  }
  cweaponname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cweaponname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_WeaponLaunchEvent_Proto.cWeaponName)
}

// uint32 uWeaponNum = 5;
inline void USIM_WeaponLaunchEvent_Proto::clear_uweaponnum() {
  uweaponnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::_internal_uweaponnum() const {
  return uweaponnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WeaponLaunchEvent_Proto::uweaponnum() const {
  // @@protoc_insertion_point(field_get:USIM_WeaponLaunchEvent_Proto.uWeaponNum)
  return _internal_uweaponnum();
}
inline void USIM_WeaponLaunchEvent_Proto::_internal_set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uweaponnum_ = value;
}
inline void USIM_WeaponLaunchEvent_Proto::set_uweaponnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uweaponnum(value);
  // @@protoc_insertion_point(field_set:USIM_WeaponLaunchEvent_Proto.uWeaponNum)
}

// -------------------------------------------------------------------

// USIM_DecoyLaunchEvent_Proto

// double dfSiTime = 1;
inline void USIM_DecoyLaunchEvent_Proto::clear_dfsitime() {
  dfsitime_ = 0;
}
inline double USIM_DecoyLaunchEvent_Proto::_internal_dfsitime() const {
  return dfsitime_;
}
inline double USIM_DecoyLaunchEvent_Proto::dfsitime() const {
  // @@protoc_insertion_point(field_get:USIM_DecoyLaunchEvent_Proto.dfSiTime)
  return _internal_dfsitime();
}
inline void USIM_DecoyLaunchEvent_Proto::_internal_set_dfsitime(double value) {
  
  dfsitime_ = value;
}
inline void USIM_DecoyLaunchEvent_Proto::set_dfsitime(double value) {
  _internal_set_dfsitime(value);
  // @@protoc_insertion_point(field_set:USIM_DecoyLaunchEvent_Proto.dfSiTime)
}

// uint32 uID = 2;
inline void USIM_DecoyLaunchEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DecoyLaunchEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DecoyLaunchEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_DecoyLaunchEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_DecoyLaunchEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_DecoyLaunchEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_DecoyLaunchEvent_Proto.uID)
}

// bytes cBaitName = 3;
inline void USIM_DecoyLaunchEvent_Proto::clear_cbaitname() {
  cbaitname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_DecoyLaunchEvent_Proto::cbaitname() const {
  // @@protoc_insertion_point(field_get:USIM_DecoyLaunchEvent_Proto.cBaitName)
  return _internal_cbaitname();
}
inline void USIM_DecoyLaunchEvent_Proto::set_cbaitname(const std::string& value) {
  _internal_set_cbaitname(value);
  // @@protoc_insertion_point(field_set:USIM_DecoyLaunchEvent_Proto.cBaitName)
}
inline std::string* USIM_DecoyLaunchEvent_Proto::mutable_cbaitname() {
  // @@protoc_insertion_point(field_mutable:USIM_DecoyLaunchEvent_Proto.cBaitName)
  return _internal_mutable_cbaitname();
}
inline const std::string& USIM_DecoyLaunchEvent_Proto::_internal_cbaitname() const {
  return cbaitname_.Get();
}
inline void USIM_DecoyLaunchEvent_Proto::_internal_set_cbaitname(const std::string& value) {
  
  cbaitname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_DecoyLaunchEvent_Proto::set_cbaitname(std::string&& value) {
  
  cbaitname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_DecoyLaunchEvent_Proto.cBaitName)
}
inline void USIM_DecoyLaunchEvent_Proto::set_cbaitname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cbaitname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_DecoyLaunchEvent_Proto.cBaitName)
}
inline void USIM_DecoyLaunchEvent_Proto::set_cbaitname(const void* value,
    size_t size) {
  
  cbaitname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_DecoyLaunchEvent_Proto.cBaitName)
}
inline std::string* USIM_DecoyLaunchEvent_Proto::_internal_mutable_cbaitname() {
  
  return cbaitname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_DecoyLaunchEvent_Proto::release_cbaitname() {
  // @@protoc_insertion_point(field_release:USIM_DecoyLaunchEvent_Proto.cBaitName)
  return cbaitname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_DecoyLaunchEvent_Proto::set_allocated_cbaitname(std::string* cbaitname) {
  if (cbaitname != nullptr) {
    
  } else {
    
  }
  cbaitname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cbaitname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_DecoyLaunchEvent_Proto.cBaitName)
}
inline std::string* USIM_DecoyLaunchEvent_Proto::unsafe_arena_release_cbaitname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_DecoyLaunchEvent_Proto.cBaitName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cbaitname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_DecoyLaunchEvent_Proto::unsafe_arena_set_allocated_cbaitname(
    std::string* cbaitname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cbaitname != nullptr) {
    
  } else {
    
  }
  cbaitname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cbaitname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_DecoyLaunchEvent_Proto.cBaitName)
}

// uint32 uBaitNum = 4;
inline void USIM_DecoyLaunchEvent_Proto::clear_ubaitnum() {
  ubaitnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DecoyLaunchEvent_Proto::_internal_ubaitnum() const {
  return ubaitnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DecoyLaunchEvent_Proto::ubaitnum() const {
  // @@protoc_insertion_point(field_get:USIM_DecoyLaunchEvent_Proto.uBaitNum)
  return _internal_ubaitnum();
}
inline void USIM_DecoyLaunchEvent_Proto::_internal_set_ubaitnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ubaitnum_ = value;
}
inline void USIM_DecoyLaunchEvent_Proto::set_ubaitnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ubaitnum(value);
  // @@protoc_insertion_point(field_set:USIM_DecoyLaunchEvent_Proto.uBaitNum)
}

// -------------------------------------------------------------------

// USIM_ElectronicWarEvent_Proto

// double dfSimTime = 1;
inline void USIM_ElectronicWarEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_ElectronicWarEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_ElectronicWarEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_ElectronicWarEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_ElectronicWarEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_ElectronicWarEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_ElectronicWarEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_ElectronicWarEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_ElectronicWarEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_ElectronicWarEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_ElectronicWarEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_ElectronicWarEvent_Proto.uID)
}

// uint32 uTargetID = 3;
inline void USIM_ElectronicWarEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_ElectronicWarEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_ElectronicWarEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_ElectronicWarEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_ElectronicWarEvent_Proto.uTargetID)
}

// bytes cJammingSystemName = 4;
inline void USIM_ElectronicWarEvent_Proto::clear_cjammingsystemname() {
  cjammingsystemname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_ElectronicWarEvent_Proto::cjammingsystemname() const {
  // @@protoc_insertion_point(field_get:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
  return _internal_cjammingsystemname();
}
inline void USIM_ElectronicWarEvent_Proto::set_cjammingsystemname(const std::string& value) {
  _internal_set_cjammingsystemname(value);
  // @@protoc_insertion_point(field_set:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}
inline std::string* USIM_ElectronicWarEvent_Proto::mutable_cjammingsystemname() {
  // @@protoc_insertion_point(field_mutable:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
  return _internal_mutable_cjammingsystemname();
}
inline const std::string& USIM_ElectronicWarEvent_Proto::_internal_cjammingsystemname() const {
  return cjammingsystemname_.Get();
}
inline void USIM_ElectronicWarEvent_Proto::_internal_set_cjammingsystemname(const std::string& value) {
  
  cjammingsystemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_ElectronicWarEvent_Proto::set_cjammingsystemname(std::string&& value) {
  
  cjammingsystemname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}
inline void USIM_ElectronicWarEvent_Proto::set_cjammingsystemname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cjammingsystemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}
inline void USIM_ElectronicWarEvent_Proto::set_cjammingsystemname(const void* value,
    size_t size) {
  
  cjammingsystemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}
inline std::string* USIM_ElectronicWarEvent_Proto::_internal_mutable_cjammingsystemname() {
  
  return cjammingsystemname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_ElectronicWarEvent_Proto::release_cjammingsystemname() {
  // @@protoc_insertion_point(field_release:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
  return cjammingsystemname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_ElectronicWarEvent_Proto::set_allocated_cjammingsystemname(std::string* cjammingsystemname) {
  if (cjammingsystemname != nullptr) {
    
  } else {
    
  }
  cjammingsystemname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cjammingsystemname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}
inline std::string* USIM_ElectronicWarEvent_Proto::unsafe_arena_release_cjammingsystemname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cjammingsystemname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_ElectronicWarEvent_Proto::unsafe_arena_set_allocated_cjammingsystemname(
    std::string* cjammingsystemname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cjammingsystemname != nullptr) {
    
  } else {
    
  }
  cjammingsystemname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cjammingsystemname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_ElectronicWarEvent_Proto.cJammingSystemName)
}

// uint32 uEventType = 5;
inline void USIM_ElectronicWarEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ElectronicWarEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_ElectronicWarEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_ElectronicWarEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_ElectronicWarEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_ElectronicWarEvent_Proto.uEventType)
}

// -------------------------------------------------------------------

// USIM_SensorStateEvent_Proto

// double dfSimTime = 1;
inline void USIM_SensorStateEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_SensorStateEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_SensorStateEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_SensorStateEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_SensorStateEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_SensorStateEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_SensorStateEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_SensorStateEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SensorStateEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SensorStateEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_SensorStateEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_SensorStateEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_SensorStateEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_SensorStateEvent_Proto.uID)
}

// bytes sSensorName = 3;
inline void USIM_SensorStateEvent_Proto::clear_ssensorname() {
  ssensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_SensorStateEvent_Proto::ssensorname() const {
  // @@protoc_insertion_point(field_get:USIM_SensorStateEvent_Proto.sSensorName)
  return _internal_ssensorname();
}
inline void USIM_SensorStateEvent_Proto::set_ssensorname(const std::string& value) {
  _internal_set_ssensorname(value);
  // @@protoc_insertion_point(field_set:USIM_SensorStateEvent_Proto.sSensorName)
}
inline std::string* USIM_SensorStateEvent_Proto::mutable_ssensorname() {
  // @@protoc_insertion_point(field_mutable:USIM_SensorStateEvent_Proto.sSensorName)
  return _internal_mutable_ssensorname();
}
inline const std::string& USIM_SensorStateEvent_Proto::_internal_ssensorname() const {
  return ssensorname_.Get();
}
inline void USIM_SensorStateEvent_Proto::_internal_set_ssensorname(const std::string& value) {
  
  ssensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_SensorStateEvent_Proto::set_ssensorname(std::string&& value) {
  
  ssensorname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_SensorStateEvent_Proto.sSensorName)
}
inline void USIM_SensorStateEvent_Proto::set_ssensorname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_SensorStateEvent_Proto.sSensorName)
}
inline void USIM_SensorStateEvent_Proto::set_ssensorname(const void* value,
    size_t size) {
  
  ssensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_SensorStateEvent_Proto.sSensorName)
}
inline std::string* USIM_SensorStateEvent_Proto::_internal_mutable_ssensorname() {
  
  return ssensorname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_SensorStateEvent_Proto::release_ssensorname() {
  // @@protoc_insertion_point(field_release:USIM_SensorStateEvent_Proto.sSensorName)
  return ssensorname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_SensorStateEvent_Proto::set_allocated_ssensorname(std::string* ssensorname) {
  if (ssensorname != nullptr) {
    
  } else {
    
  }
  ssensorname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssensorname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_SensorStateEvent_Proto.sSensorName)
}
inline std::string* USIM_SensorStateEvent_Proto::unsafe_arena_release_ssensorname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_SensorStateEvent_Proto.sSensorName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ssensorname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_SensorStateEvent_Proto::unsafe_arena_set_allocated_ssensorname(
    std::string* ssensorname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ssensorname != nullptr) {
    
  } else {
    
  }
  ssensorname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ssensorname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_SensorStateEvent_Proto.sSensorName)
}

// uint32 uSensorAction = 4;
inline void USIM_SensorStateEvent_Proto::clear_usensoraction() {
  usensoraction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SensorStateEvent_Proto::_internal_usensoraction() const {
  return usensoraction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SensorStateEvent_Proto::usensoraction() const {
  // @@protoc_insertion_point(field_get:USIM_SensorStateEvent_Proto.uSensorAction)
  return _internal_usensoraction();
}
inline void USIM_SensorStateEvent_Proto::_internal_set_usensoraction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usensoraction_ = value;
}
inline void USIM_SensorStateEvent_Proto::set_usensoraction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usensoraction(value);
  // @@protoc_insertion_point(field_set:USIM_SensorStateEvent_Proto.uSensorAction)
}

// -------------------------------------------------------------------

// USIM_BattleResultEvent_Proto

// double dfSimTime = 1;
inline void USIM_BattleResultEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_BattleResultEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_BattleResultEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_BattleResultEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_BattleResultEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_BattleResultEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_BattleResultEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_BattleResultEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_BattleResultEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_BattleResultEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_BattleResultEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_BattleResultEvent_Proto.uID)
}

// uint32 uTargetID = 3;
inline void USIM_BattleResultEvent_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_BattleResultEvent_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_BattleResultEvent_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_BattleResultEvent_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_BattleResultEvent_Proto.uTargetID)
}

// bytes sWeaponName = 4;
inline void USIM_BattleResultEvent_Proto::clear_sweaponname() {
  sweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_BattleResultEvent_Proto::sweaponname() const {
  // @@protoc_insertion_point(field_get:USIM_BattleResultEvent_Proto.sWeaponName)
  return _internal_sweaponname();
}
inline void USIM_BattleResultEvent_Proto::set_sweaponname(const std::string& value) {
  _internal_set_sweaponname(value);
  // @@protoc_insertion_point(field_set:USIM_BattleResultEvent_Proto.sWeaponName)
}
inline std::string* USIM_BattleResultEvent_Proto::mutable_sweaponname() {
  // @@protoc_insertion_point(field_mutable:USIM_BattleResultEvent_Proto.sWeaponName)
  return _internal_mutable_sweaponname();
}
inline const std::string& USIM_BattleResultEvent_Proto::_internal_sweaponname() const {
  return sweaponname_.Get();
}
inline void USIM_BattleResultEvent_Proto::_internal_set_sweaponname(const std::string& value) {
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_BattleResultEvent_Proto::set_sweaponname(std::string&& value) {
  
  sweaponname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_BattleResultEvent_Proto.sWeaponName)
}
inline void USIM_BattleResultEvent_Proto::set_sweaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_BattleResultEvent_Proto.sWeaponName)
}
inline void USIM_BattleResultEvent_Proto::set_sweaponname(const void* value,
    size_t size) {
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_BattleResultEvent_Proto.sWeaponName)
}
inline std::string* USIM_BattleResultEvent_Proto::_internal_mutable_sweaponname() {
  
  return sweaponname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_BattleResultEvent_Proto::release_sweaponname() {
  // @@protoc_insertion_point(field_release:USIM_BattleResultEvent_Proto.sWeaponName)
  return sweaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_BattleResultEvent_Proto::set_allocated_sweaponname(std::string* sweaponname) {
  if (sweaponname != nullptr) {
    
  } else {
    
  }
  sweaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sweaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_BattleResultEvent_Proto.sWeaponName)
}
inline std::string* USIM_BattleResultEvent_Proto::unsafe_arena_release_sweaponname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_BattleResultEvent_Proto.sWeaponName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sweaponname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_BattleResultEvent_Proto::unsafe_arena_set_allocated_sweaponname(
    std::string* sweaponname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sweaponname != nullptr) {
    
  } else {
    
  }
  sweaponname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sweaponname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_BattleResultEvent_Proto.sWeaponName)
}

// uint32 uEngageResult = 5;
inline void USIM_BattleResultEvent_Proto::clear_uengageresult() {
  uengageresult_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::_internal_uengageresult() const {
  return uengageresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BattleResultEvent_Proto::uengageresult() const {
  // @@protoc_insertion_point(field_get:USIM_BattleResultEvent_Proto.uEngageResult)
  return _internal_uengageresult();
}
inline void USIM_BattleResultEvent_Proto::_internal_set_uengageresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uengageresult_ = value;
}
inline void USIM_BattleResultEvent_Proto::set_uengageresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uengageresult(value);
  // @@protoc_insertion_point(field_set:USIM_BattleResultEvent_Proto.uEngageResult)
}

// -------------------------------------------------------------------

// USIM_DamageEvent_Proto

// double dfSimTime = 1;
inline void USIM_DamageEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_DamageEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_DamageEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_DamageEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_DamageEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_DamageEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_DamageEvent_Proto.dfSimTime)
}

// uint32 uAttackerID = 2;
inline void USIM_DamageEvent_Proto::clear_uattackerid() {
  uattackerid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::_internal_uattackerid() const {
  return uattackerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::uattackerid() const {
  // @@protoc_insertion_point(field_get:USIM_DamageEvent_Proto.uAttackerID)
  return _internal_uattackerid();
}
inline void USIM_DamageEvent_Proto::_internal_set_uattackerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uattackerid_ = value;
}
inline void USIM_DamageEvent_Proto::set_uattackerid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uattackerid(value);
  // @@protoc_insertion_point(field_set:USIM_DamageEvent_Proto.uAttackerID)
}

// uint32 uDamagePlatID = 3;
inline void USIM_DamageEvent_Proto::clear_udamageplatid() {
  udamageplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::_internal_udamageplatid() const {
  return udamageplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::udamageplatid() const {
  // @@protoc_insertion_point(field_get:USIM_DamageEvent_Proto.uDamagePlatID)
  return _internal_udamageplatid();
}
inline void USIM_DamageEvent_Proto::_internal_set_udamageplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udamageplatid_ = value;
}
inline void USIM_DamageEvent_Proto::set_udamageplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udamageplatid(value);
  // @@protoc_insertion_point(field_set:USIM_DamageEvent_Proto.uDamagePlatID)
}

// bytes sWeaponName = 4;
inline void USIM_DamageEvent_Proto::clear_sweaponname() {
  sweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_DamageEvent_Proto::sweaponname() const {
  // @@protoc_insertion_point(field_get:USIM_DamageEvent_Proto.sWeaponName)
  return _internal_sweaponname();
}
inline void USIM_DamageEvent_Proto::set_sweaponname(const std::string& value) {
  _internal_set_sweaponname(value);
  // @@protoc_insertion_point(field_set:USIM_DamageEvent_Proto.sWeaponName)
}
inline std::string* USIM_DamageEvent_Proto::mutable_sweaponname() {
  // @@protoc_insertion_point(field_mutable:USIM_DamageEvent_Proto.sWeaponName)
  return _internal_mutable_sweaponname();
}
inline const std::string& USIM_DamageEvent_Proto::_internal_sweaponname() const {
  return sweaponname_.Get();
}
inline void USIM_DamageEvent_Proto::_internal_set_sweaponname(const std::string& value) {
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_DamageEvent_Proto::set_sweaponname(std::string&& value) {
  
  sweaponname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_DamageEvent_Proto.sWeaponName)
}
inline void USIM_DamageEvent_Proto::set_sweaponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_DamageEvent_Proto.sWeaponName)
}
inline void USIM_DamageEvent_Proto::set_sweaponname(const void* value,
    size_t size) {
  
  sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_DamageEvent_Proto.sWeaponName)
}
inline std::string* USIM_DamageEvent_Proto::_internal_mutable_sweaponname() {
  
  return sweaponname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_DamageEvent_Proto::release_sweaponname() {
  // @@protoc_insertion_point(field_release:USIM_DamageEvent_Proto.sWeaponName)
  return sweaponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_DamageEvent_Proto::set_allocated_sweaponname(std::string* sweaponname) {
  if (sweaponname != nullptr) {
    
  } else {
    
  }
  sweaponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sweaponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_DamageEvent_Proto.sWeaponName)
}
inline std::string* USIM_DamageEvent_Proto::unsafe_arena_release_sweaponname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_DamageEvent_Proto.sWeaponName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sweaponname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_DamageEvent_Proto::unsafe_arena_set_allocated_sweaponname(
    std::string* sweaponname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sweaponname != nullptr) {
    
  } else {
    
  }
  sweaponname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sweaponname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_DamageEvent_Proto.sWeaponName)
}

// uint32 uDamageResult = 5;
inline void USIM_DamageEvent_Proto::clear_udamageresult() {
  udamageresult_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::_internal_udamageresult() const {
  return udamageresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DamageEvent_Proto::udamageresult() const {
  // @@protoc_insertion_point(field_get:USIM_DamageEvent_Proto.uDamageResult)
  return _internal_udamageresult();
}
inline void USIM_DamageEvent_Proto::_internal_set_udamageresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udamageresult_ = value;
}
inline void USIM_DamageEvent_Proto::set_udamageresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udamageresult(value);
  // @@protoc_insertion_point(field_set:USIM_DamageEvent_Proto.uDamageResult)
}

// -------------------------------------------------------------------

// USIM_LodisticsEvent_Protp

// double dfSimTime = 1;
inline void USIM_LodisticsEvent_Protp::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_LodisticsEvent_Protp::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_LodisticsEvent_Protp::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_LodisticsEvent_Protp.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_LodisticsEvent_Protp::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_LodisticsEvent_Protp::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_LodisticsEvent_Protp.dfSimTime)
}

// uint32 uSenderID = 2;
inline void USIM_LodisticsEvent_Protp::clear_usenderid() {
  usenderid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::_internal_usenderid() const {
  return usenderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::usenderid() const {
  // @@protoc_insertion_point(field_get:USIM_LodisticsEvent_Protp.uSenderID)
  return _internal_usenderid();
}
inline void USIM_LodisticsEvent_Protp::_internal_set_usenderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usenderid_ = value;
}
inline void USIM_LodisticsEvent_Protp::set_usenderid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usenderid(value);
  // @@protoc_insertion_point(field_set:USIM_LodisticsEvent_Protp.uSenderID)
}

// uint32 uReceiverID = 3;
inline void USIM_LodisticsEvent_Protp::clear_ureceiverid() {
  ureceiverid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::_internal_ureceiverid() const {
  return ureceiverid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::ureceiverid() const {
  // @@protoc_insertion_point(field_get:USIM_LodisticsEvent_Protp.uReceiverID)
  return _internal_ureceiverid();
}
inline void USIM_LodisticsEvent_Protp::_internal_set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ureceiverid_ = value;
}
inline void USIM_LodisticsEvent_Protp::set_ureceiverid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ureceiverid(value);
  // @@protoc_insertion_point(field_set:USIM_LodisticsEvent_Protp.uReceiverID)
}

// uint32 cSupplyType = 4;
inline void USIM_LodisticsEvent_Protp::clear_csupplytype() {
  csupplytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::_internal_csupplytype() const {
  return csupplytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_LodisticsEvent_Protp::csupplytype() const {
  // @@protoc_insertion_point(field_get:USIM_LodisticsEvent_Protp.cSupplyType)
  return _internal_csupplytype();
}
inline void USIM_LodisticsEvent_Protp::_internal_set_csupplytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  csupplytype_ = value;
}
inline void USIM_LodisticsEvent_Protp::set_csupplytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_csupplytype(value);
  // @@protoc_insertion_point(field_set:USIM_LodisticsEvent_Protp.cSupplyType)
}

// -------------------------------------------------------------------

// USIM_AssociEntityLaunchEvent_Proto

// double dfSimTime = 1;
inline void USIM_AssociEntityLaunchEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AssociEntityLaunchEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AssociEntityLaunchEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityLaunchEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AssociEntityLaunchEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityLaunchEvent_Proto.dfSimTime)
}

// bytes sPlatName = 2;
inline void USIM_AssociEntityLaunchEvent_Proto::clear_splatname() {
  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AssociEntityLaunchEvent_Proto::splatname() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
  return _internal_splatname();
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_splatname(const std::string& value) {
  _internal_set_splatname(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}
inline std::string* USIM_AssociEntityLaunchEvent_Proto::mutable_splatname() {
  // @@protoc_insertion_point(field_mutable:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
  return _internal_mutable_splatname();
}
inline const std::string& USIM_AssociEntityLaunchEvent_Proto::_internal_splatname() const {
  return splatname_.Get();
}
inline void USIM_AssociEntityLaunchEvent_Proto::_internal_set_splatname(const std::string& value) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_splatname(std::string&& value) {
  
  splatname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_splatname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_splatname(const void* value,
    size_t size) {
  
  splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}
inline std::string* USIM_AssociEntityLaunchEvent_Proto::_internal_mutable_splatname() {
  
  return splatname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AssociEntityLaunchEvent_Proto::release_splatname() {
  // @@protoc_insertion_point(field_release:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
  return splatname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_allocated_splatname(std::string* splatname) {
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splatname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}
inline std::string* USIM_AssociEntityLaunchEvent_Proto::unsafe_arena_release_splatname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return splatname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AssociEntityLaunchEvent_Proto::unsafe_arena_set_allocated_splatname(
    std::string* splatname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (splatname != nullptr) {
    
  } else {
    
  }
  splatname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      splatname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AssociEntityLaunchEvent_Proto.sPlatName)
}

// uint32 uPlatID = 3;
inline void USIM_AssociEntityLaunchEvent_Proto::clear_uplatid() {
  uplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityLaunchEvent_Proto::_internal_uplatid() const {
  return uplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityLaunchEvent_Proto::uplatid() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityLaunchEvent_Proto.uPlatID)
  return _internal_uplatid();
}
inline void USIM_AssociEntityLaunchEvent_Proto::_internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplatid_ = value;
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplatid(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityLaunchEvent_Proto.uPlatID)
}

// uint32 ubaseID = 4;
inline void USIM_AssociEntityLaunchEvent_Proto::clear_ubaseid() {
  ubaseid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityLaunchEvent_Proto::_internal_ubaseid() const {
  return ubaseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityLaunchEvent_Proto::ubaseid() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityLaunchEvent_Proto.ubaseID)
  return _internal_ubaseid();
}
inline void USIM_AssociEntityLaunchEvent_Proto::_internal_set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ubaseid_ = value;
}
inline void USIM_AssociEntityLaunchEvent_Proto::set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ubaseid(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityLaunchEvent_Proto.ubaseID)
}

// -------------------------------------------------------------------

// USIM_AssociEntityRecoveryEvent_Proto

// double dfSimTime = 1;
inline void USIM_AssociEntityRecoveryEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AssociEntityRecoveryEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AssociEntityRecoveryEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityRecoveryEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AssociEntityRecoveryEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AssociEntityRecoveryEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityRecoveryEvent_Proto.dfSimTime)
}

// uint32 uPlatID = 2;
inline void USIM_AssociEntityRecoveryEvent_Proto::clear_uplatid() {
  uplatid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityRecoveryEvent_Proto::_internal_uplatid() const {
  return uplatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityRecoveryEvent_Proto::uplatid() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityRecoveryEvent_Proto.uPlatID)
  return _internal_uplatid();
}
inline void USIM_AssociEntityRecoveryEvent_Proto::_internal_set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplatid_ = value;
}
inline void USIM_AssociEntityRecoveryEvent_Proto::set_uplatid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplatid(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityRecoveryEvent_Proto.uPlatID)
}

// uint32 ubaseID = 3;
inline void USIM_AssociEntityRecoveryEvent_Proto::clear_ubaseid() {
  ubaseid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityRecoveryEvent_Proto::_internal_ubaseid() const {
  return ubaseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AssociEntityRecoveryEvent_Proto::ubaseid() const {
  // @@protoc_insertion_point(field_get:USIM_AssociEntityRecoveryEvent_Proto.ubaseID)
  return _internal_ubaseid();
}
inline void USIM_AssociEntityRecoveryEvent_Proto::_internal_set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ubaseid_ = value;
}
inline void USIM_AssociEntityRecoveryEvent_Proto::set_ubaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ubaseid(value);
  // @@protoc_insertion_point(field_set:USIM_AssociEntityRecoveryEvent_Proto.ubaseID)
}

// -------------------------------------------------------------------

// USIM_StartAssetRecoveryEvent_Proto

// bytes recovery_Asset = 1;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_recovery_asset() {
  recovery_asset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::recovery_asset() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
  return _internal_recovery_asset();
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset(const std::string& value) {
  _internal_set_recovery_asset(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::mutable_recovery_asset() {
  // @@protoc_insertion_point(field_mutable:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
  return _internal_mutable_recovery_asset();
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::_internal_recovery_asset() const {
  return recovery_asset_.Get();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_recovery_asset(const std::string& value) {
  
  recovery_asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset(std::string&& value) {
  
  recovery_asset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recovery_asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset(const void* value,
    size_t size) {
  
  recovery_asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::_internal_mutable_recovery_asset() {
  
  return recovery_asset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::release_recovery_asset() {
  // @@protoc_insertion_point(field_release:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
  return recovery_asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_allocated_recovery_asset(std::string* recovery_asset) {
  if (recovery_asset != nullptr) {
    
  } else {
    
  }
  recovery_asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recovery_asset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_release_recovery_asset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recovery_asset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_set_allocated_recovery_asset(
    std::string* recovery_asset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recovery_asset != nullptr) {
    
  } else {
    
  }
  recovery_asset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recovery_asset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset)
}

// bytes recovery_Asset_prename = 2;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_recovery_asset_prename() {
  recovery_asset_prename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::recovery_asset_prename() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
  return _internal_recovery_asset_prename();
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset_prename(const std::string& value) {
  _internal_set_recovery_asset_prename(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::mutable_recovery_asset_prename() {
  // @@protoc_insertion_point(field_mutable:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
  return _internal_mutable_recovery_asset_prename();
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::_internal_recovery_asset_prename() const {
  return recovery_asset_prename_.Get();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_recovery_asset_prename(const std::string& value) {
  
  recovery_asset_prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset_prename(std::string&& value) {
  
  recovery_asset_prename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset_prename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recovery_asset_prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_asset_prename(const void* value,
    size_t size) {
  
  recovery_asset_prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::_internal_mutable_recovery_asset_prename() {
  
  return recovery_asset_prename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::release_recovery_asset_prename() {
  // @@protoc_insertion_point(field_release:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
  return recovery_asset_prename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_allocated_recovery_asset_prename(std::string* recovery_asset_prename) {
  if (recovery_asset_prename != nullptr) {
    
  } else {
    
  }
  recovery_asset_prename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recovery_asset_prename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_release_recovery_asset_prename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return recovery_asset_prename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_set_allocated_recovery_asset_prename(
    std::string* recovery_asset_prename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (recovery_asset_prename != nullptr) {
    
  } else {
    
  }
  recovery_asset_prename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      recovery_asset_prename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_StartAssetRecoveryEvent_Proto.recovery_Asset_prename)
}

// bytes BaseAsset = 3;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_baseasset() {
  baseasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::baseasset() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
  return _internal_baseasset();
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_baseasset(const std::string& value) {
  _internal_set_baseasset(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::mutable_baseasset() {
  // @@protoc_insertion_point(field_mutable:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
  return _internal_mutable_baseasset();
}
inline const std::string& USIM_StartAssetRecoveryEvent_Proto::_internal_baseasset() const {
  return baseasset_.Get();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_baseasset(const std::string& value) {
  
  baseasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_baseasset(std::string&& value) {
  
  baseasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_baseasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_baseasset(const void* value,
    size_t size) {
  
  baseasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::_internal_mutable_baseasset() {
  
  return baseasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::release_baseasset() {
  // @@protoc_insertion_point(field_release:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
  return baseasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_allocated_baseasset(std::string* baseasset) {
  if (baseasset != nullptr) {
    
  } else {
    
  }
  baseasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}
inline std::string* USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_release_baseasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return baseasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_StartAssetRecoveryEvent_Proto::unsafe_arena_set_allocated_baseasset(
    std::string* baseasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (baseasset != nullptr) {
    
  } else {
    
  }
  baseasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      baseasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_StartAssetRecoveryEvent_Proto.BaseAsset)
}

// double TurnaroundTime = 4;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_turnaroundtime() {
  turnaroundtime_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_turnaroundtime() const {
  return turnaroundtime_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::turnaroundtime() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.TurnaroundTime)
  return _internal_turnaroundtime();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_turnaroundtime(double value) {
  
  turnaroundtime_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_turnaroundtime(double value) {
  _internal_set_turnaroundtime(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.TurnaroundTime)
}

// double AvailableTime = 5;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_availabletime() {
  availabletime_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_availabletime() const {
  return availabletime_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::availabletime() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.AvailableTime)
  return _internal_availabletime();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_availabletime(double value) {
  
  availabletime_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_availabletime(double value) {
  _internal_set_availabletime(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.AvailableTime)
}

// double MaintainDelay = 6;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_maintaindelay() {
  maintaindelay_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_maintaindelay() const {
  return maintaindelay_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::maintaindelay() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.MaintainDelay)
  return _internal_maintaindelay();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_maintaindelay(double value) {
  
  maintaindelay_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_maintaindelay(double value) {
  _internal_set_maintaindelay(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.MaintainDelay)
}

// double MaintainTime = 7;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_maintaintime() {
  maintaintime_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_maintaintime() const {
  return maintaintime_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::maintaintime() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.MaintainTime)
  return _internal_maintaintime();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_maintaintime(double value) {
  
  maintaintime_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_maintaintime(double value) {
  _internal_set_maintaintime(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.MaintainTime)
}

// double recovery_begin_time = 8;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_recovery_begin_time() {
  recovery_begin_time_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_recovery_begin_time() const {
  return recovery_begin_time_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::recovery_begin_time() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.recovery_begin_time)
  return _internal_recovery_begin_time();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_recovery_begin_time(double value) {
  
  recovery_begin_time_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_recovery_begin_time(double value) {
  _internal_set_recovery_begin_time(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.recovery_begin_time)
}

// double dfSimTime = 9;
inline void USIM_StartAssetRecoveryEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_StartAssetRecoveryEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_StartAssetRecoveryEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_StartAssetRecoveryEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_StartAssetRecoveryEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_StartAssetRecoveryEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_StartAssetRecoveryEvent_Proto.dfSimTime)
}

// -------------------------------------------------------------------

// USIM_AircraftTakeoffEvent_Proto

// double dfSimTime = 1;
inline void USIM_AircraftTakeoffEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AircraftTakeoffEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AircraftTakeoffEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftTakeoffEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AircraftTakeoffEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AircraftTakeoffEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftTakeoffEvent_Proto.dfSimTime)
}

// bytes sPlaneName = 2;
inline void USIM_AircraftTakeoffEvent_Proto::clear_splanename() {
  splanename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftTakeoffEvent_Proto::splanename() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
  return _internal_splanename();
}
inline void USIM_AircraftTakeoffEvent_Proto::set_splanename(const std::string& value) {
  _internal_set_splanename(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}
inline std::string* USIM_AircraftTakeoffEvent_Proto::mutable_splanename() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
  return _internal_mutable_splanename();
}
inline const std::string& USIM_AircraftTakeoffEvent_Proto::_internal_splanename() const {
  return splanename_.Get();
}
inline void USIM_AircraftTakeoffEvent_Proto::_internal_set_splanename(const std::string& value) {
  
  splanename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftTakeoffEvent_Proto::set_splanename(std::string&& value) {
  
  splanename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}
inline void USIM_AircraftTakeoffEvent_Proto::set_splanename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  splanename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}
inline void USIM_AircraftTakeoffEvent_Proto::set_splanename(const void* value,
    size_t size) {
  
  splanename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}
inline std::string* USIM_AircraftTakeoffEvent_Proto::_internal_mutable_splanename() {
  
  return splanename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftTakeoffEvent_Proto::release_splanename() {
  // @@protoc_insertion_point(field_release:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
  return splanename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftTakeoffEvent_Proto::set_allocated_splanename(std::string* splanename) {
  if (splanename != nullptr) {
    
  } else {
    
  }
  splanename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), splanename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}
inline std::string* USIM_AircraftTakeoffEvent_Proto::unsafe_arena_release_splanename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return splanename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftTakeoffEvent_Proto::unsafe_arena_set_allocated_splanename(
    std::string* splanename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (splanename != nullptr) {
    
  } else {
    
  }
  splanename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      splanename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftTakeoffEvent_Proto.sPlaneName)
}

// uint32 uPlaneID = 3;
inline void USIM_AircraftTakeoffEvent_Proto::clear_uplaneid() {
  uplaneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftTakeoffEvent_Proto::_internal_uplaneid() const {
  return uplaneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftTakeoffEvent_Proto::uplaneid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftTakeoffEvent_Proto.uPlaneID)
  return _internal_uplaneid();
}
inline void USIM_AircraftTakeoffEvent_Proto::_internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplaneid_ = value;
}
inline void USIM_AircraftTakeoffEvent_Proto::set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplaneid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftTakeoffEvent_Proto.uPlaneID)
}

// uint32 uAirbaseID = 4;
inline void USIM_AircraftTakeoffEvent_Proto::clear_uairbaseid() {
  uairbaseid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftTakeoffEvent_Proto::_internal_uairbaseid() const {
  return uairbaseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftTakeoffEvent_Proto::uairbaseid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftTakeoffEvent_Proto.uAirbaseID)
  return _internal_uairbaseid();
}
inline void USIM_AircraftTakeoffEvent_Proto::_internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uairbaseid_ = value;
}
inline void USIM_AircraftTakeoffEvent_Proto::set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uairbaseid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftTakeoffEvent_Proto.uAirbaseID)
}

// -------------------------------------------------------------------

// USIM_AircraftLandEvent_Proto

// double dfSimTime = 1;
inline void USIM_AircraftLandEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AircraftLandEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AircraftLandEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftLandEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AircraftLandEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AircraftLandEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftLandEvent_Proto.dfSimTime)
}

// uint32 uPlaneID = 2;
inline void USIM_AircraftLandEvent_Proto::clear_uplaneid() {
  uplaneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftLandEvent_Proto::_internal_uplaneid() const {
  return uplaneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftLandEvent_Proto::uplaneid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftLandEvent_Proto.uPlaneID)
  return _internal_uplaneid();
}
inline void USIM_AircraftLandEvent_Proto::_internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplaneid_ = value;
}
inline void USIM_AircraftLandEvent_Proto::set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplaneid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftLandEvent_Proto.uPlaneID)
}

// uint32 uAirbaseID = 3;
inline void USIM_AircraftLandEvent_Proto::clear_uairbaseid() {
  uairbaseid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftLandEvent_Proto::_internal_uairbaseid() const {
  return uairbaseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftLandEvent_Proto::uairbaseid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftLandEvent_Proto.uAirbaseID)
  return _internal_uairbaseid();
}
inline void USIM_AircraftLandEvent_Proto::_internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uairbaseid_ = value;
}
inline void USIM_AircraftLandEvent_Proto::set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uairbaseid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftLandEvent_Proto.uAirbaseID)
}

// -------------------------------------------------------------------

// USIM_AircraftReturnEvent_Proto

// double dfSimTime = 1;
inline void USIM_AircraftReturnEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AircraftReturnEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AircraftReturnEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftReturnEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AircraftReturnEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AircraftReturnEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftReturnEvent_Proto.dfSimTime)
}

// uint32 uPlaneID = 2;
inline void USIM_AircraftReturnEvent_Proto::clear_uplaneid() {
  uplaneid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftReturnEvent_Proto::_internal_uplaneid() const {
  return uplaneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftReturnEvent_Proto::uplaneid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftReturnEvent_Proto.uPlaneID)
  return _internal_uplaneid();
}
inline void USIM_AircraftReturnEvent_Proto::_internal_set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uplaneid_ = value;
}
inline void USIM_AircraftReturnEvent_Proto::set_uplaneid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplaneid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftReturnEvent_Proto.uPlaneID)
}

// uint32 uAirbaseID = 3;
inline void USIM_AircraftReturnEvent_Proto::clear_uairbaseid() {
  uairbaseid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftReturnEvent_Proto::_internal_uairbaseid() const {
  return uairbaseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftReturnEvent_Proto::uairbaseid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftReturnEvent_Proto.uAirbaseID)
  return _internal_uairbaseid();
}
inline void USIM_AircraftReturnEvent_Proto::_internal_set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uairbaseid_ = value;
}
inline void USIM_AircraftReturnEvent_Proto::set_uairbaseid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uairbaseid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftReturnEvent_Proto.uAirbaseID)
}

// -------------------------------------------------------------------

// USIM_BuoyReleaseEvent_Proto

// double dfSimTime = 1;
inline void USIM_BuoyReleaseEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_BuoyReleaseEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_BuoyReleaseEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_BuoyReleaseEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_BuoyReleaseEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_BuoyReleaseEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_BuoyReleaseEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_BuoyReleaseEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BuoyReleaseEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BuoyReleaseEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_BuoyReleaseEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_BuoyReleaseEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_BuoyReleaseEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_BuoyReleaseEvent_Proto.uID)
}

// uint32 uBuoyID = 3;
inline void USIM_BuoyReleaseEvent_Proto::clear_ubuoyid() {
  ubuoyid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BuoyReleaseEvent_Proto::_internal_ubuoyid() const {
  return ubuoyid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_BuoyReleaseEvent_Proto::ubuoyid() const {
  // @@protoc_insertion_point(field_get:USIM_BuoyReleaseEvent_Proto.uBuoyID)
  return _internal_ubuoyid();
}
inline void USIM_BuoyReleaseEvent_Proto::_internal_set_ubuoyid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ubuoyid_ = value;
}
inline void USIM_BuoyReleaseEvent_Proto::set_ubuoyid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ubuoyid(value);
  // @@protoc_insertion_point(field_set:USIM_BuoyReleaseEvent_Proto.uBuoyID)
}

// bytes sBuoy = 4;
inline void USIM_BuoyReleaseEvent_Proto::clear_sbuoy() {
  sbuoy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_BuoyReleaseEvent_Proto::sbuoy() const {
  // @@protoc_insertion_point(field_get:USIM_BuoyReleaseEvent_Proto.sBuoy)
  return _internal_sbuoy();
}
inline void USIM_BuoyReleaseEvent_Proto::set_sbuoy(const std::string& value) {
  _internal_set_sbuoy(value);
  // @@protoc_insertion_point(field_set:USIM_BuoyReleaseEvent_Proto.sBuoy)
}
inline std::string* USIM_BuoyReleaseEvent_Proto::mutable_sbuoy() {
  // @@protoc_insertion_point(field_mutable:USIM_BuoyReleaseEvent_Proto.sBuoy)
  return _internal_mutable_sbuoy();
}
inline const std::string& USIM_BuoyReleaseEvent_Proto::_internal_sbuoy() const {
  return sbuoy_.Get();
}
inline void USIM_BuoyReleaseEvent_Proto::_internal_set_sbuoy(const std::string& value) {
  
  sbuoy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_BuoyReleaseEvent_Proto::set_sbuoy(std::string&& value) {
  
  sbuoy_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_BuoyReleaseEvent_Proto.sBuoy)
}
inline void USIM_BuoyReleaseEvent_Proto::set_sbuoy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sbuoy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_BuoyReleaseEvent_Proto.sBuoy)
}
inline void USIM_BuoyReleaseEvent_Proto::set_sbuoy(const void* value,
    size_t size) {
  
  sbuoy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_BuoyReleaseEvent_Proto.sBuoy)
}
inline std::string* USIM_BuoyReleaseEvent_Proto::_internal_mutable_sbuoy() {
  
  return sbuoy_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_BuoyReleaseEvent_Proto::release_sbuoy() {
  // @@protoc_insertion_point(field_release:USIM_BuoyReleaseEvent_Proto.sBuoy)
  return sbuoy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_BuoyReleaseEvent_Proto::set_allocated_sbuoy(std::string* sbuoy) {
  if (sbuoy != nullptr) {
    
  } else {
    
  }
  sbuoy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sbuoy,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_BuoyReleaseEvent_Proto.sBuoy)
}
inline std::string* USIM_BuoyReleaseEvent_Proto::unsafe_arena_release_sbuoy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_BuoyReleaseEvent_Proto.sBuoy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sbuoy_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_BuoyReleaseEvent_Proto::unsafe_arena_set_allocated_sbuoy(
    std::string* sbuoy) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sbuoy != nullptr) {
    
  } else {
    
  }
  sbuoy_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sbuoy, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_BuoyReleaseEvent_Proto.sBuoy)
}

// -------------------------------------------------------------------

// USIM_SonarDropReuseEvent_Proto

// double dfSimTime = 1;
inline void USIM_SonarDropReuseEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_SonarDropReuseEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_SonarDropReuseEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDropReuseEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_SonarDropReuseEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_SonarDropReuseEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDropReuseEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_SonarDropReuseEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDropReuseEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_SonarDropReuseEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_SonarDropReuseEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDropReuseEvent_Proto.uID)
}

// uint32 uSonarID = 3;
inline void USIM_SonarDropReuseEvent_Proto::clear_usonarid() {
  usonarid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::_internal_usonarid() const {
  return usonarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::usonarid() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDropReuseEvent_Proto.uSonarID)
  return _internal_usonarid();
}
inline void USIM_SonarDropReuseEvent_Proto::_internal_set_usonarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usonarid_ = value;
}
inline void USIM_SonarDropReuseEvent_Proto::set_usonarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usonarid(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDropReuseEvent_Proto.uSonarID)
}

// bytes sSonarName = 4;
inline void USIM_SonarDropReuseEvent_Proto::clear_ssonarname() {
  ssonarname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_SonarDropReuseEvent_Proto::ssonarname() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDropReuseEvent_Proto.sSonarName)
  return _internal_ssonarname();
}
inline void USIM_SonarDropReuseEvent_Proto::set_ssonarname(const std::string& value) {
  _internal_set_ssonarname(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDropReuseEvent_Proto.sSonarName)
}
inline std::string* USIM_SonarDropReuseEvent_Proto::mutable_ssonarname() {
  // @@protoc_insertion_point(field_mutable:USIM_SonarDropReuseEvent_Proto.sSonarName)
  return _internal_mutable_ssonarname();
}
inline const std::string& USIM_SonarDropReuseEvent_Proto::_internal_ssonarname() const {
  return ssonarname_.Get();
}
inline void USIM_SonarDropReuseEvent_Proto::_internal_set_ssonarname(const std::string& value) {
  
  ssonarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_SonarDropReuseEvent_Proto::set_ssonarname(std::string&& value) {
  
  ssonarname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_SonarDropReuseEvent_Proto.sSonarName)
}
inline void USIM_SonarDropReuseEvent_Proto::set_ssonarname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssonarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_SonarDropReuseEvent_Proto.sSonarName)
}
inline void USIM_SonarDropReuseEvent_Proto::set_ssonarname(const void* value,
    size_t size) {
  
  ssonarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_SonarDropReuseEvent_Proto.sSonarName)
}
inline std::string* USIM_SonarDropReuseEvent_Proto::_internal_mutable_ssonarname() {
  
  return ssonarname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_SonarDropReuseEvent_Proto::release_ssonarname() {
  // @@protoc_insertion_point(field_release:USIM_SonarDropReuseEvent_Proto.sSonarName)
  return ssonarname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_SonarDropReuseEvent_Proto::set_allocated_ssonarname(std::string* ssonarname) {
  if (ssonarname != nullptr) {
    
  } else {
    
  }
  ssonarname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssonarname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_SonarDropReuseEvent_Proto.sSonarName)
}
inline std::string* USIM_SonarDropReuseEvent_Proto::unsafe_arena_release_ssonarname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_SonarDropReuseEvent_Proto.sSonarName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ssonarname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_SonarDropReuseEvent_Proto::unsafe_arena_set_allocated_ssonarname(
    std::string* ssonarname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ssonarname != nullptr) {
    
  } else {
    
  }
  ssonarname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ssonarname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_SonarDropReuseEvent_Proto.sSonarName)
}

// uint32 uEventType = 5;
inline void USIM_SonarDropReuseEvent_Proto::clear_ueventtype() {
  ueventtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::_internal_ueventtype() const {
  return ueventtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDropReuseEvent_Proto::ueventtype() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDropReuseEvent_Proto.uEventType)
  return _internal_ueventtype();
}
inline void USIM_SonarDropReuseEvent_Proto::_internal_set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ueventtype_ = value;
}
inline void USIM_SonarDropReuseEvent_Proto::set_ueventtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ueventtype(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDropReuseEvent_Proto.uEventType)
}

// -------------------------------------------------------------------

// USIM_ForceDeliveryEvent_Proto

// double dfSimTime = 1;
inline void USIM_ForceDeliveryEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_ForceDeliveryEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_ForceDeliveryEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_ForceDeliveryEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_ForceDeliveryEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_ForceDeliveryEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_ForceDeliveryEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_ForceDeliveryEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceDeliveryEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceDeliveryEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_ForceDeliveryEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_ForceDeliveryEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_ForceDeliveryEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_ForceDeliveryEvent_Proto.uID)
}

// bytes cForceName = 3;
inline void USIM_ForceDeliveryEvent_Proto::clear_cforcename() {
  cforcename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_ForceDeliveryEvent_Proto::cforcename() const {
  // @@protoc_insertion_point(field_get:USIM_ForceDeliveryEvent_Proto.cForceName)
  return _internal_cforcename();
}
inline void USIM_ForceDeliveryEvent_Proto::set_cforcename(const std::string& value) {
  _internal_set_cforcename(value);
  // @@protoc_insertion_point(field_set:USIM_ForceDeliveryEvent_Proto.cForceName)
}
inline std::string* USIM_ForceDeliveryEvent_Proto::mutable_cforcename() {
  // @@protoc_insertion_point(field_mutable:USIM_ForceDeliveryEvent_Proto.cForceName)
  return _internal_mutable_cforcename();
}
inline const std::string& USIM_ForceDeliveryEvent_Proto::_internal_cforcename() const {
  return cforcename_.Get();
}
inline void USIM_ForceDeliveryEvent_Proto::_internal_set_cforcename(const std::string& value) {
  
  cforcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_ForceDeliveryEvent_Proto::set_cforcename(std::string&& value) {
  
  cforcename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_ForceDeliveryEvent_Proto.cForceName)
}
inline void USIM_ForceDeliveryEvent_Proto::set_cforcename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cforcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_ForceDeliveryEvent_Proto.cForceName)
}
inline void USIM_ForceDeliveryEvent_Proto::set_cforcename(const void* value,
    size_t size) {
  
  cforcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_ForceDeliveryEvent_Proto.cForceName)
}
inline std::string* USIM_ForceDeliveryEvent_Proto::_internal_mutable_cforcename() {
  
  return cforcename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_ForceDeliveryEvent_Proto::release_cforcename() {
  // @@protoc_insertion_point(field_release:USIM_ForceDeliveryEvent_Proto.cForceName)
  return cforcename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_ForceDeliveryEvent_Proto::set_allocated_cforcename(std::string* cforcename) {
  if (cforcename != nullptr) {
    
  } else {
    
  }
  cforcename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cforcename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_ForceDeliveryEvent_Proto.cForceName)
}
inline std::string* USIM_ForceDeliveryEvent_Proto::unsafe_arena_release_cforcename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_ForceDeliveryEvent_Proto.cForceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cforcename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_ForceDeliveryEvent_Proto::unsafe_arena_set_allocated_cforcename(
    std::string* cforcename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cforcename != nullptr) {
    
  } else {
    
  }
  cforcename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cforcename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_ForceDeliveryEvent_Proto.cForceName)
}

// -------------------------------------------------------------------

// USIM_ForceReusingEvent_Proto

// double dfSimTime = 1;
inline void USIM_ForceReusingEvent_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_ForceReusingEvent_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_ForceReusingEvent_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_ForceReusingEvent_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_ForceReusingEvent_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_ForceReusingEvent_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_ForceReusingEvent_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_ForceReusingEvent_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceReusingEvent_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceReusingEvent_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_ForceReusingEvent_Proto.uID)
  return _internal_uid();
}
inline void USIM_ForceReusingEvent_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_ForceReusingEvent_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_ForceReusingEvent_Proto.uID)
}

// uint32 uForceID = 3;
inline void USIM_ForceReusingEvent_Proto::clear_uforceid() {
  uforceid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceReusingEvent_Proto::_internal_uforceid() const {
  return uforceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ForceReusingEvent_Proto::uforceid() const {
  // @@protoc_insertion_point(field_get:USIM_ForceReusingEvent_Proto.uForceID)
  return _internal_uforceid();
}
inline void USIM_ForceReusingEvent_Proto::_internal_set_uforceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uforceid_ = value;
}
inline void USIM_ForceReusingEvent_Proto::set_uforceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uforceid(value);
  // @@protoc_insertion_point(field_set:USIM_ForceReusingEvent_Proto.uForceID)
}

// -------------------------------------------------------------------

// USIM_IssuingTaskAssignment_Proto

// double time = 1;
inline void USIM_IssuingTaskAssignment_Proto::clear_time() {
  time_ = 0;
}
inline double USIM_IssuingTaskAssignment_Proto::_internal_time() const {
  return time_;
}
inline double USIM_IssuingTaskAssignment_Proto::time() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.time)
  return _internal_time();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_time(double value) {
  
  time_ = value;
}
inline void USIM_IssuingTaskAssignment_Proto::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.time)
}

// uint32 GroupTrack_p = 2;
inline void USIM_IssuingTaskAssignment_Proto::clear_grouptrack_p() {
  grouptrack_p_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::_internal_grouptrack_p() const {
  return grouptrack_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::grouptrack_p() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.GroupTrack_p)
  return _internal_grouptrack_p();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grouptrack_p_ = value;
}
inline void USIM_IssuingTaskAssignment_Proto::set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grouptrack_p(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.GroupTrack_p)
}

// bytes TheWarfareCommander = 3;
inline void USIM_IssuingTaskAssignment_Proto::clear_thewarfarecommander() {
  thewarfarecommander_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::thewarfarecommander() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
  return _internal_thewarfarecommander();
}
inline void USIM_IssuingTaskAssignment_Proto::set_thewarfarecommander(const std::string& value) {
  _internal_set_thewarfarecommander(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_thewarfarecommander() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
  return _internal_mutable_thewarfarecommander();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_thewarfarecommander() const {
  return thewarfarecommander_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_thewarfarecommander(const std::string& value) {
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_thewarfarecommander(std::string&& value) {
  
  thewarfarecommander_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}
inline void USIM_IssuingTaskAssignment_Proto::set_thewarfarecommander(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}
inline void USIM_IssuingTaskAssignment_Proto::set_thewarfarecommander(const void* value,
    size_t size) {
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_thewarfarecommander() {
  
  return thewarfarecommander_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_thewarfarecommander() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
  return thewarfarecommander_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_thewarfarecommander(std::string* thewarfarecommander) {
  if (thewarfarecommander != nullptr) {
    
  } else {
    
  }
  thewarfarecommander_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thewarfarecommander,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_thewarfarecommander() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thewarfarecommander_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_thewarfarecommander(
    std::string* thewarfarecommander) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thewarfarecommander != nullptr) {
    
  } else {
    
  }
  thewarfarecommander_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thewarfarecommander, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TheWarfareCommander)
}

// uint32 CommanderTrackID = 4;
inline void USIM_IssuingTaskAssignment_Proto::clear_commandertrackid() {
  commandertrackid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::_internal_commandertrackid() const {
  return commandertrackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::commandertrackid() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.CommanderTrackID)
  return _internal_commandertrackid();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  commandertrackid_ = value;
}
inline void USIM_IssuingTaskAssignment_Proto::set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_commandertrackid(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.CommanderTrackID)
}

// bytes CommanderOrderID = 5;
inline void USIM_IssuingTaskAssignment_Proto::clear_commanderorderid() {
  commanderorderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::commanderorderid() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
  return _internal_commanderorderid();
}
inline void USIM_IssuingTaskAssignment_Proto::set_commanderorderid(const std::string& value) {
  _internal_set_commanderorderid(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_commanderorderid() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
  return _internal_mutable_commanderorderid();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_commanderorderid() const {
  return commanderorderid_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_commanderorderid(const std::string& value) {
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_commanderorderid(std::string&& value) {
  
  commanderorderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}
inline void USIM_IssuingTaskAssignment_Proto::set_commanderorderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}
inline void USIM_IssuingTaskAssignment_Proto::set_commanderorderid(const void* value,
    size_t size) {
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_commanderorderid() {
  
  return commanderorderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_commanderorderid() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
  return commanderorderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_commanderorderid(std::string* commanderorderid) {
  if (commanderorderid != nullptr) {
    
  } else {
    
  }
  commanderorderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commanderorderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_commanderorderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return commanderorderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_commanderorderid(
    std::string* commanderorderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (commanderorderid != nullptr) {
    
  } else {
    
  }
  commanderorderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      commanderorderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.CommanderOrderID)
}

// bytes TaskedAsset = 6;
inline void USIM_IssuingTaskAssignment_Proto::clear_taskedasset() {
  taskedasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::taskedasset() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
  return _internal_taskedasset();
}
inline void USIM_IssuingTaskAssignment_Proto::set_taskedasset(const std::string& value) {
  _internal_set_taskedasset(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_taskedasset() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
  return _internal_mutable_taskedasset();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_taskedasset() const {
  return taskedasset_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_taskedasset(const std::string& value) {
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_taskedasset(std::string&& value) {
  
  taskedasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}
inline void USIM_IssuingTaskAssignment_Proto::set_taskedasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}
inline void USIM_IssuingTaskAssignment_Proto::set_taskedasset(const void* value,
    size_t size) {
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_taskedasset() {
  
  return taskedasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_taskedasset() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
  return taskedasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_taskedasset(std::string* taskedasset) {
  if (taskedasset != nullptr) {
    
  } else {
    
  }
  taskedasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskedasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_taskedasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return taskedasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_taskedasset(
    std::string* taskedasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (taskedasset != nullptr) {
    
  } else {
    
  }
  taskedasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      taskedasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TaskedAsset)
}

// bytes TargetOperatingMedium = 7;
inline void USIM_IssuingTaskAssignment_Proto::clear_targetoperatingmedium() {
  targetoperatingmedium_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::targetoperatingmedium() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
  return _internal_targetoperatingmedium();
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetoperatingmedium(const std::string& value) {
  _internal_set_targetoperatingmedium(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_targetoperatingmedium() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
  return _internal_mutable_targetoperatingmedium();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_targetoperatingmedium() const {
  return targetoperatingmedium_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_targetoperatingmedium(const std::string& value) {
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetoperatingmedium(std::string&& value) {
  
  targetoperatingmedium_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetoperatingmedium(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetoperatingmedium(const void* value,
    size_t size) {
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_targetoperatingmedium() {
  
  return targetoperatingmedium_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_targetoperatingmedium() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
  return targetoperatingmedium_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_targetoperatingmedium(std::string* targetoperatingmedium) {
  if (targetoperatingmedium != nullptr) {
    
  } else {
    
  }
  targetoperatingmedium_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetoperatingmedium,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_targetoperatingmedium() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetoperatingmedium_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_targetoperatingmedium(
    std::string* targetoperatingmedium) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetoperatingmedium != nullptr) {
    
  } else {
    
  }
  targetoperatingmedium_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetoperatingmedium, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetOperatingMedium)
}

// bytes TargetID = 8;
inline void USIM_IssuingTaskAssignment_Proto::clear_targetid() {
  targetid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::targetid() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TargetID)
  return _internal_targetid();
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetid(const std::string& value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TargetID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TargetID)
  return _internal_mutable_targetid();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_targetid() const {
  return targetid_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetid(std::string&& value) {
  
  targetid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TargetID)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TargetID)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetid(const void* value,
    size_t size) {
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TargetID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_targetid() {
  
  return targetid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_targetid() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TargetID)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetID)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_targetid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TargetID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_targetid(
    std::string* targetid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetID)
}

// bytes TargetClassification = 9;
inline void USIM_IssuingTaskAssignment_Proto::clear_targetclassification() {
  targetclassification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::targetclassification() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TargetClassification)
  return _internal_targetclassification();
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetclassification(const std::string& value) {
  _internal_set_targetclassification(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_targetclassification() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TargetClassification)
  return _internal_mutable_targetclassification();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_targetclassification() const {
  return targetclassification_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_targetclassification(const std::string& value) {
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetclassification(std::string&& value) {
  
  targetclassification_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetclassification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}
inline void USIM_IssuingTaskAssignment_Proto::set_targetclassification(const void* value,
    size_t size) {
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_targetclassification() {
  
  return targetclassification_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_targetclassification() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TargetClassification)
  return targetclassification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_targetclassification(std::string* targetclassification) {
  if (targetclassification != nullptr) {
    
  } else {
    
  }
  targetclassification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetclassification,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_targetclassification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TargetClassification)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetclassification_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_targetclassification(
    std::string* targetclassification) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetclassification != nullptr) {
    
  } else {
    
  }
  targetclassification_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetclassification, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TargetClassification)
}

// uint32 GroupTrackComponentCount = 10;
inline void USIM_IssuingTaskAssignment_Proto::clear_grouptrackcomponentcount() {
  grouptrackcomponentcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::_internal_grouptrackcomponentcount() const {
  return grouptrackcomponentcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_IssuingTaskAssignment_Proto::grouptrackcomponentcount() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.GroupTrackComponentCount)
  return _internal_grouptrackcomponentcount();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grouptrackcomponentcount_ = value;
}
inline void USIM_IssuingTaskAssignment_Proto::set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grouptrackcomponentcount(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.GroupTrackComponentCount)
}

// bytes OrderType = 11;
inline void USIM_IssuingTaskAssignment_Proto::clear_ordertype() {
  ordertype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::ordertype() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.OrderType)
  return _internal_ordertype();
}
inline void USIM_IssuingTaskAssignment_Proto::set_ordertype(const std::string& value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.OrderType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_ordertype() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.OrderType)
  return _internal_mutable_ordertype();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_ordertype() const {
  return ordertype_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_ordertype(const std::string& value) {
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_ordertype(std::string&& value) {
  
  ordertype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.OrderType)
}
inline void USIM_IssuingTaskAssignment_Proto::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.OrderType)
}
inline void USIM_IssuingTaskAssignment_Proto::set_ordertype(const void* value,
    size_t size) {
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.OrderType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_ordertype() {
  
  return ordertype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_ordertype() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.OrderType)
  return ordertype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_ordertype(std::string* ordertype) {
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.OrderType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_ordertype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.OrderType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ordertype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_ordertype(
    std::string* ordertype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordertype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.OrderType)
}

// bytes MotionType = 12;
inline void USIM_IssuingTaskAssignment_Proto::clear_motiontype() {
  motiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::motiontype() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.MotionType)
  return _internal_motiontype();
}
inline void USIM_IssuingTaskAssignment_Proto::set_motiontype(const std::string& value) {
  _internal_set_motiontype(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.MotionType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_motiontype() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.MotionType)
  return _internal_mutable_motiontype();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_motiontype() const {
  return motiontype_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_motiontype(const std::string& value) {
  
  motiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_motiontype(std::string&& value) {
  
  motiontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.MotionType)
}
inline void USIM_IssuingTaskAssignment_Proto::set_motiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  motiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.MotionType)
}
inline void USIM_IssuingTaskAssignment_Proto::set_motiontype(const void* value,
    size_t size) {
  
  motiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.MotionType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_motiontype() {
  
  return motiontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_motiontype() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.MotionType)
  return motiontype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_motiontype(std::string* motiontype) {
  if (motiontype != nullptr) {
    
  } else {
    
  }
  motiontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), motiontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.MotionType)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_motiontype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.MotionType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return motiontype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_motiontype(
    std::string* motiontype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (motiontype != nullptr) {
    
  } else {
    
  }
  motiontype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      motiontype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.MotionType)
}

// bytes ActualTarget = 13;
inline void USIM_IssuingTaskAssignment_Proto::clear_actualtarget() {
  actualtarget_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::actualtarget() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.ActualTarget)
  return _internal_actualtarget();
}
inline void USIM_IssuingTaskAssignment_Proto::set_actualtarget(const std::string& value) {
  _internal_set_actualtarget(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_actualtarget() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.ActualTarget)
  return _internal_mutable_actualtarget();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_actualtarget() const {
  return actualtarget_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_actualtarget(const std::string& value) {
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_actualtarget(std::string&& value) {
  
  actualtarget_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}
inline void USIM_IssuingTaskAssignment_Proto::set_actualtarget(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}
inline void USIM_IssuingTaskAssignment_Proto::set_actualtarget(const void* value,
    size_t size) {
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_actualtarget() {
  
  return actualtarget_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_actualtarget() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.ActualTarget)
  return actualtarget_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_actualtarget(std::string* actualtarget) {
  if (actualtarget != nullptr) {
    
  } else {
    
  }
  actualtarget_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actualtarget,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_actualtarget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.ActualTarget)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actualtarget_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_actualtarget(
    std::string* actualtarget) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actualtarget != nullptr) {
    
  } else {
    
  }
  actualtarget_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actualtarget, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.ActualTarget)
}

// bytes CommanderTacticsTable = 14;
inline void USIM_IssuingTaskAssignment_Proto::clear_commandertacticstable() {
  commandertacticstable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::commandertacticstable() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
  return _internal_commandertacticstable();
}
inline void USIM_IssuingTaskAssignment_Proto::set_commandertacticstable(const std::string& value) {
  _internal_set_commandertacticstable(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_commandertacticstable() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
  return _internal_mutable_commandertacticstable();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_commandertacticstable() const {
  return commandertacticstable_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_commandertacticstable(const std::string& value) {
  
  commandertacticstable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_commandertacticstable(std::string&& value) {
  
  commandertacticstable_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}
inline void USIM_IssuingTaskAssignment_Proto::set_commandertacticstable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commandertacticstable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}
inline void USIM_IssuingTaskAssignment_Proto::set_commandertacticstable(const void* value,
    size_t size) {
  
  commandertacticstable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_commandertacticstable() {
  
  return commandertacticstable_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_commandertacticstable() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
  return commandertacticstable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_commandertacticstable(std::string* commandertacticstable) {
  if (commandertacticstable != nullptr) {
    
  } else {
    
  }
  commandertacticstable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commandertacticstable,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_commandertacticstable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return commandertacticstable_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_commandertacticstable(
    std::string* commandertacticstable) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (commandertacticstable != nullptr) {
    
  } else {
    
  }
  commandertacticstable_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      commandertacticstable, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.CommanderTacticsTable)
}

// bytes TriggeredTactic = 15;
inline void USIM_IssuingTaskAssignment_Proto::clear_triggeredtactic() {
  triggeredtactic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::triggeredtactic() const {
  // @@protoc_insertion_point(field_get:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
  return _internal_triggeredtactic();
}
inline void USIM_IssuingTaskAssignment_Proto::set_triggeredtactic(const std::string& value) {
  _internal_set_triggeredtactic(value);
  // @@protoc_insertion_point(field_set:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::mutable_triggeredtactic() {
  // @@protoc_insertion_point(field_mutable:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
  return _internal_mutable_triggeredtactic();
}
inline const std::string& USIM_IssuingTaskAssignment_Proto::_internal_triggeredtactic() const {
  return triggeredtactic_.Get();
}
inline void USIM_IssuingTaskAssignment_Proto::_internal_set_triggeredtactic(const std::string& value) {
  
  triggeredtactic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_triggeredtactic(std::string&& value) {
  
  triggeredtactic_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}
inline void USIM_IssuingTaskAssignment_Proto::set_triggeredtactic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  triggeredtactic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}
inline void USIM_IssuingTaskAssignment_Proto::set_triggeredtactic(const void* value,
    size_t size) {
  
  triggeredtactic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::_internal_mutable_triggeredtactic() {
  
  return triggeredtactic_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_IssuingTaskAssignment_Proto::release_triggeredtactic() {
  // @@protoc_insertion_point(field_release:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
  return triggeredtactic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::set_allocated_triggeredtactic(std::string* triggeredtactic) {
  if (triggeredtactic != nullptr) {
    
  } else {
    
  }
  triggeredtactic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), triggeredtactic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}
inline std::string* USIM_IssuingTaskAssignment_Proto::unsafe_arena_release_triggeredtactic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return triggeredtactic_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_IssuingTaskAssignment_Proto::unsafe_arena_set_allocated_triggeredtactic(
    std::string* triggeredtactic) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (triggeredtactic != nullptr) {
    
  } else {
    
  }
  triggeredtactic_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      triggeredtactic, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_IssuingTaskAssignment_Proto.TriggeredTactic)
}

// -------------------------------------------------------------------

// USIM_CommandTaskCompleted_Proto

// double time = 1;
inline void USIM_CommandTaskCompleted_Proto::clear_time() {
  time_ = 0;
}
inline double USIM_CommandTaskCompleted_Proto::_internal_time() const {
  return time_;
}
inline double USIM_CommandTaskCompleted_Proto::time() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.time)
  return _internal_time();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_time(double value) {
  
  time_ = value;
}
inline void USIM_CommandTaskCompleted_Proto::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.time)
}

// uint32 GroupTrack_p = 2;
inline void USIM_CommandTaskCompleted_Proto::clear_grouptrack_p() {
  grouptrack_p_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::_internal_grouptrack_p() const {
  return grouptrack_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::grouptrack_p() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.GroupTrack_p)
  return _internal_grouptrack_p();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grouptrack_p_ = value;
}
inline void USIM_CommandTaskCompleted_Proto::set_grouptrack_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grouptrack_p(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.GroupTrack_p)
}

// bytes TheWarfareCommander = 3;
inline void USIM_CommandTaskCompleted_Proto::clear_thewarfarecommander() {
  thewarfarecommander_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::thewarfarecommander() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
  return _internal_thewarfarecommander();
}
inline void USIM_CommandTaskCompleted_Proto::set_thewarfarecommander(const std::string& value) {
  _internal_set_thewarfarecommander(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_thewarfarecommander() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
  return _internal_mutable_thewarfarecommander();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_thewarfarecommander() const {
  return thewarfarecommander_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_thewarfarecommander(const std::string& value) {
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_thewarfarecommander(std::string&& value) {
  
  thewarfarecommander_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}
inline void USIM_CommandTaskCompleted_Proto::set_thewarfarecommander(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}
inline void USIM_CommandTaskCompleted_Proto::set_thewarfarecommander(const void* value,
    size_t size) {
  
  thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_thewarfarecommander() {
  
  return thewarfarecommander_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_thewarfarecommander() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
  return thewarfarecommander_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_thewarfarecommander(std::string* thewarfarecommander) {
  if (thewarfarecommander != nullptr) {
    
  } else {
    
  }
  thewarfarecommander_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thewarfarecommander,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_thewarfarecommander() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return thewarfarecommander_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_thewarfarecommander(
    std::string* thewarfarecommander) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (thewarfarecommander != nullptr) {
    
  } else {
    
  }
  thewarfarecommander_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      thewarfarecommander, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.TheWarfareCommander)
}

// uint32 CommanderTrackID = 4;
inline void USIM_CommandTaskCompleted_Proto::clear_commandertrackid() {
  commandertrackid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::_internal_commandertrackid() const {
  return commandertrackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::commandertrackid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.CommanderTrackID)
  return _internal_commandertrackid();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  commandertrackid_ = value;
}
inline void USIM_CommandTaskCompleted_Proto::set_commandertrackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_commandertrackid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.CommanderTrackID)
}

// bytes CommanderOrderID = 5;
inline void USIM_CommandTaskCompleted_Proto::clear_commanderorderid() {
  commanderorderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::commanderorderid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
  return _internal_commanderorderid();
}
inline void USIM_CommandTaskCompleted_Proto::set_commanderorderid(const std::string& value) {
  _internal_set_commanderorderid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_commanderorderid() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
  return _internal_mutable_commanderorderid();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_commanderorderid() const {
  return commanderorderid_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_commanderorderid(const std::string& value) {
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_commanderorderid(std::string&& value) {
  
  commanderorderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}
inline void USIM_CommandTaskCompleted_Proto::set_commanderorderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}
inline void USIM_CommandTaskCompleted_Proto::set_commanderorderid(const void* value,
    size_t size) {
  
  commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_commanderorderid() {
  
  return commanderorderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_commanderorderid() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
  return commanderorderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_commanderorderid(std::string* commanderorderid) {
  if (commanderorderid != nullptr) {
    
  } else {
    
  }
  commanderorderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commanderorderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_commanderorderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return commanderorderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_commanderorderid(
    std::string* commanderorderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (commanderorderid != nullptr) {
    
  } else {
    
  }
  commanderorderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      commanderorderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.CommanderOrderID)
}

// bytes TaskedAsset = 6;
inline void USIM_CommandTaskCompleted_Proto::clear_taskedasset() {
  taskedasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::taskedasset() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.TaskedAsset)
  return _internal_taskedasset();
}
inline void USIM_CommandTaskCompleted_Proto::set_taskedasset(const std::string& value) {
  _internal_set_taskedasset(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_taskedasset() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.TaskedAsset)
  return _internal_mutable_taskedasset();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_taskedasset() const {
  return taskedasset_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_taskedasset(const std::string& value) {
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_taskedasset(std::string&& value) {
  
  taskedasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}
inline void USIM_CommandTaskCompleted_Proto::set_taskedasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}
inline void USIM_CommandTaskCompleted_Proto::set_taskedasset(const void* value,
    size_t size) {
  
  taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_taskedasset() {
  
  return taskedasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_taskedasset() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.TaskedAsset)
  return taskedasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_taskedasset(std::string* taskedasset) {
  if (taskedasset != nullptr) {
    
  } else {
    
  }
  taskedasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskedasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_taskedasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.TaskedAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return taskedasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_taskedasset(
    std::string* taskedasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (taskedasset != nullptr) {
    
  } else {
    
  }
  taskedasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      taskedasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.TaskedAsset)
}

// bytes TargetOperatingMedium = 7;
inline void USIM_CommandTaskCompleted_Proto::clear_targetoperatingmedium() {
  targetoperatingmedium_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::targetoperatingmedium() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
  return _internal_targetoperatingmedium();
}
inline void USIM_CommandTaskCompleted_Proto::set_targetoperatingmedium(const std::string& value) {
  _internal_set_targetoperatingmedium(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_targetoperatingmedium() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
  return _internal_mutable_targetoperatingmedium();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_targetoperatingmedium() const {
  return targetoperatingmedium_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_targetoperatingmedium(const std::string& value) {
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_targetoperatingmedium(std::string&& value) {
  
  targetoperatingmedium_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetoperatingmedium(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetoperatingmedium(const void* value,
    size_t size) {
  
  targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_targetoperatingmedium() {
  
  return targetoperatingmedium_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_targetoperatingmedium() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
  return targetoperatingmedium_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_targetoperatingmedium(std::string* targetoperatingmedium) {
  if (targetoperatingmedium != nullptr) {
    
  } else {
    
  }
  targetoperatingmedium_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetoperatingmedium,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_targetoperatingmedium() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetoperatingmedium_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_targetoperatingmedium(
    std::string* targetoperatingmedium) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetoperatingmedium != nullptr) {
    
  } else {
    
  }
  targetoperatingmedium_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetoperatingmedium, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.TargetOperatingMedium)
}

// bytes TargetID = 8;
inline void USIM_CommandTaskCompleted_Proto::clear_targetid() {
  targetid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::targetid() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.TargetID)
  return _internal_targetid();
}
inline void USIM_CommandTaskCompleted_Proto::set_targetid(const std::string& value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.TargetID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_targetid() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.TargetID)
  return _internal_mutable_targetid();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_targetid() const {
  return targetid_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_targetid(const std::string& value) {
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_targetid(std::string&& value) {
  
  targetid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.TargetID)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.TargetID)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetid(const void* value,
    size_t size) {
  
  targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.TargetID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_targetid() {
  
  return targetid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_targetid() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.TargetID)
  return targetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.TargetID)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_targetid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.TargetID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_targetid(
    std::string* targetid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.TargetID)
}

// bytes TargetClassification = 9;
inline void USIM_CommandTaskCompleted_Proto::clear_targetclassification() {
  targetclassification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::targetclassification() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.TargetClassification)
  return _internal_targetclassification();
}
inline void USIM_CommandTaskCompleted_Proto::set_targetclassification(const std::string& value) {
  _internal_set_targetclassification(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.TargetClassification)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_targetclassification() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.TargetClassification)
  return _internal_mutable_targetclassification();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_targetclassification() const {
  return targetclassification_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_targetclassification(const std::string& value) {
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_targetclassification(std::string&& value) {
  
  targetclassification_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.TargetClassification)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetclassification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.TargetClassification)
}
inline void USIM_CommandTaskCompleted_Proto::set_targetclassification(const void* value,
    size_t size) {
  
  targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.TargetClassification)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_targetclassification() {
  
  return targetclassification_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_targetclassification() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.TargetClassification)
  return targetclassification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_targetclassification(std::string* targetclassification) {
  if (targetclassification != nullptr) {
    
  } else {
    
  }
  targetclassification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetclassification,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.TargetClassification)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_targetclassification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.TargetClassification)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return targetclassification_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_targetclassification(
    std::string* targetclassification) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (targetclassification != nullptr) {
    
  } else {
    
  }
  targetclassification_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      targetclassification, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.TargetClassification)
}

// uint32 GroupTrackComponentCount = 10;
inline void USIM_CommandTaskCompleted_Proto::clear_grouptrackcomponentcount() {
  grouptrackcomponentcount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::_internal_grouptrackcomponentcount() const {
  return grouptrackcomponentcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CommandTaskCompleted_Proto::grouptrackcomponentcount() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.GroupTrackComponentCount)
  return _internal_grouptrackcomponentcount();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grouptrackcomponentcount_ = value;
}
inline void USIM_CommandTaskCompleted_Proto::set_grouptrackcomponentcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grouptrackcomponentcount(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.GroupTrackComponentCount)
}

// bytes OrderType = 11;
inline void USIM_CommandTaskCompleted_Proto::clear_ordertype() {
  ordertype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::ordertype() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.OrderType)
  return _internal_ordertype();
}
inline void USIM_CommandTaskCompleted_Proto::set_ordertype(const std::string& value) {
  _internal_set_ordertype(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.OrderType)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_ordertype() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.OrderType)
  return _internal_mutable_ordertype();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_ordertype() const {
  return ordertype_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_ordertype(const std::string& value) {
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_ordertype(std::string&& value) {
  
  ordertype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.OrderType)
}
inline void USIM_CommandTaskCompleted_Proto::set_ordertype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.OrderType)
}
inline void USIM_CommandTaskCompleted_Proto::set_ordertype(const void* value,
    size_t size) {
  
  ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.OrderType)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_ordertype() {
  
  return ordertype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_ordertype() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.OrderType)
  return ordertype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_ordertype(std::string* ordertype) {
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordertype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.OrderType)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_ordertype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.OrderType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ordertype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_ordertype(
    std::string* ordertype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordertype != nullptr) {
    
  } else {
    
  }
  ordertype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordertype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.OrderType)
}

// bytes ActualTarget = 12;
inline void USIM_CommandTaskCompleted_Proto::clear_actualtarget() {
  actualtarget_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CommandTaskCompleted_Proto::actualtarget() const {
  // @@protoc_insertion_point(field_get:USIM_CommandTaskCompleted_Proto.ActualTarget)
  return _internal_actualtarget();
}
inline void USIM_CommandTaskCompleted_Proto::set_actualtarget(const std::string& value) {
  _internal_set_actualtarget(value);
  // @@protoc_insertion_point(field_set:USIM_CommandTaskCompleted_Proto.ActualTarget)
}
inline std::string* USIM_CommandTaskCompleted_Proto::mutable_actualtarget() {
  // @@protoc_insertion_point(field_mutable:USIM_CommandTaskCompleted_Proto.ActualTarget)
  return _internal_mutable_actualtarget();
}
inline const std::string& USIM_CommandTaskCompleted_Proto::_internal_actualtarget() const {
  return actualtarget_.Get();
}
inline void USIM_CommandTaskCompleted_Proto::_internal_set_actualtarget(const std::string& value) {
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_actualtarget(std::string&& value) {
  
  actualtarget_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CommandTaskCompleted_Proto.ActualTarget)
}
inline void USIM_CommandTaskCompleted_Proto::set_actualtarget(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CommandTaskCompleted_Proto.ActualTarget)
}
inline void USIM_CommandTaskCompleted_Proto::set_actualtarget(const void* value,
    size_t size) {
  
  actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CommandTaskCompleted_Proto.ActualTarget)
}
inline std::string* USIM_CommandTaskCompleted_Proto::_internal_mutable_actualtarget() {
  
  return actualtarget_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CommandTaskCompleted_Proto::release_actualtarget() {
  // @@protoc_insertion_point(field_release:USIM_CommandTaskCompleted_Proto.ActualTarget)
  return actualtarget_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::set_allocated_actualtarget(std::string* actualtarget) {
  if (actualtarget != nullptr) {
    
  } else {
    
  }
  actualtarget_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actualtarget,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CommandTaskCompleted_Proto.ActualTarget)
}
inline std::string* USIM_CommandTaskCompleted_Proto::unsafe_arena_release_actualtarget() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CommandTaskCompleted_Proto.ActualTarget)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return actualtarget_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CommandTaskCompleted_Proto::unsafe_arena_set_allocated_actualtarget(
    std::string* actualtarget) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (actualtarget != nullptr) {
    
  } else {
    
  }
  actualtarget_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      actualtarget, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CommandTaskCompleted_Proto.ActualTarget)
}

// -------------------------------------------------------------------

// USIM_AircraftDeckAbortEvent_Proto

// double time = 1;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_time() {
  time_ = 0;
}
inline double USIM_AircraftDeckAbortEvent_Proto::_internal_time() const {
  return time_;
}
inline double USIM_AircraftDeckAbortEvent_Proto::time() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.time)
  return _internal_time();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_time(double value) {
  
  time_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.time)
}

// bytes Airbase = 2;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_airbase() {
  airbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::airbase() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.Airbase)
  return _internal_airbase();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_airbase(const std::string& value) {
  _internal_set_airbase(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_airbase() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.Airbase)
  return _internal_mutable_airbase();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_airbase() const {
  return airbase_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_airbase(const std::string& value) {
  
  airbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_airbase(std::string&& value) {
  
  airbase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_airbase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  airbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_airbase(const void* value,
    size_t size) {
  
  airbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_airbase() {
  
  return airbase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_airbase() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.Airbase)
  return airbase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_airbase(std::string* airbase) {
  if (airbase != nullptr) {
    
  } else {
    
  }
  airbase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), airbase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_airbase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.Airbase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return airbase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_airbase(
    std::string* airbase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (airbase != nullptr) {
    
  } else {
    
  }
  airbase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      airbase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Airbase)
}

// bytes Aircraft = 3;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_aircraft() {
  aircraft_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::aircraft() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
  return _internal_aircraft();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_aircraft(const std::string& value) {
  _internal_set_aircraft(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_aircraft() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
  return _internal_mutable_aircraft();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_aircraft() const {
  return aircraft_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_aircraft(const std::string& value) {
  
  aircraft_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_aircraft(std::string&& value) {
  
  aircraft_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_aircraft(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aircraft_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_aircraft(const void* value,
    size_t size) {
  
  aircraft_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_aircraft() {
  
  return aircraft_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_aircraft() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
  return aircraft_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_aircraft(std::string* aircraft) {
  if (aircraft != nullptr) {
    
  } else {
    
  }
  aircraft_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aircraft,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_aircraft() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return aircraft_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_aircraft(
    std::string* aircraft) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aircraft != nullptr) {
    
  } else {
    
  }
  aircraft_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aircraft, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Aircraft)
}

// bytes SortieType = 4;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_sortietype() {
  sortietype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::sortietype() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.SortieType)
  return _internal_sortietype();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_sortietype(const std::string& value) {
  _internal_set_sortietype(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_sortietype() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.SortieType)
  return _internal_mutable_sortietype();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_sortietype() const {
  return sortietype_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_sortietype(const std::string& value) {
  
  sortietype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_sortietype(std::string&& value) {
  
  sortietype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_sortietype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sortietype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_sortietype(const void* value,
    size_t size) {
  
  sortietype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_sortietype() {
  
  return sortietype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_sortietype() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.SortieType)
  return sortietype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_sortietype(std::string* sortietype) {
  if (sortietype != nullptr) {
    
  } else {
    
  }
  sortietype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sortietype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_sortietype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.SortieType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sortietype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_sortietype(
    std::string* sortietype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sortietype != nullptr) {
    
  } else {
    
  }
  sortietype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sortietype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.SortieType)
}

// bytes CallSign = 5;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_callsign() {
  callsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::callsign() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.CallSign)
  return _internal_callsign();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.CallSign)
  return _internal_mutable_callsign();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_callsign() const {
  return callsign_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_callsign(const std::string& value) {
  
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_callsign(std::string&& value) {
  
  callsign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_callsign(const void* value,
    size_t size) {
  
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_callsign() {
  
  return callsign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_callsign() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.CallSign)
  return callsign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_callsign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.CallSign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return callsign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_callsign(
    std::string* callsign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (callsign != nullptr) {
    
  } else {
    
  }
  callsign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      callsign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.CallSign)
}

// bytes WarfareCommanderName = 6;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_warfarecommandername() {
  warfarecommandername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::warfarecommandername() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
  return _internal_warfarecommandername();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_warfarecommandername(const std::string& value) {
  _internal_set_warfarecommandername(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_warfarecommandername() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
  return _internal_mutable_warfarecommandername();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_warfarecommandername() const {
  return warfarecommandername_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_warfarecommandername(const std::string& value) {
  
  warfarecommandername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_warfarecommandername(std::string&& value) {
  
  warfarecommandername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_warfarecommandername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  warfarecommandername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_warfarecommandername(const void* value,
    size_t size) {
  
  warfarecommandername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_warfarecommandername() {
  
  return warfarecommandername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_warfarecommandername() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
  return warfarecommandername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_warfarecommandername(std::string* warfarecommandername) {
  if (warfarecommandername != nullptr) {
    
  } else {
    
  }
  warfarecommandername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warfarecommandername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_warfarecommandername() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return warfarecommandername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_warfarecommandername(
    std::string* warfarecommandername) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (warfarecommandername != nullptr) {
    
  } else {
    
  }
  warfarecommandername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      warfarecommandername, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.WarfareCommanderName)
}

// bytes OrderId = 7;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_orderid() {
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::orderid() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.OrderId)
  return _internal_orderid();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.OrderId)
  return _internal_mutable_orderid();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_orderid() const {
  return orderid_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_orderid(const std::string& value) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_orderid(std::string&& value) {
  
  orderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_orderid(const void* value,
    size_t size) {
  
  orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_orderid() {
  
  return orderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_orderid() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.OrderId)
  return orderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_orderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.OrderId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return orderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_orderid(
    std::string* orderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.OrderId)
}

// bytes MissionType = 8;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_missiontype() {
  missiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::missiontype() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.MissionType)
  return _internal_missiontype();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missiontype(const std::string& value) {
  _internal_set_missiontype(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_missiontype() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.MissionType)
  return _internal_mutable_missiontype();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_missiontype() const {
  return missiontype_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_missiontype(const std::string& value) {
  
  missiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missiontype(std::string&& value) {
  
  missiontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missiontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  missiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missiontype(const void* value,
    size_t size) {
  
  missiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_missiontype() {
  
  return missiontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_missiontype() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.MissionType)
  return missiontype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_missiontype(std::string* missiontype) {
  if (missiontype != nullptr) {
    
  } else {
    
  }
  missiontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), missiontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_missiontype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.MissionType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return missiontype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_missiontype(
    std::string* missiontype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (missiontype != nullptr) {
    
  } else {
    
  }
  missiontype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      missiontype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.MissionType)
}

// bytes MissionPlanname = 9;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_missionplanname() {
  missionplanname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::missionplanname() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
  return _internal_missionplanname();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missionplanname(const std::string& value) {
  _internal_set_missionplanname(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_missionplanname() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
  return _internal_mutable_missionplanname();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_missionplanname() const {
  return missionplanname_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_missionplanname(const std::string& value) {
  
  missionplanname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missionplanname(std::string&& value) {
  
  missionplanname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missionplanname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  missionplanname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_missionplanname(const void* value,
    size_t size) {
  
  missionplanname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_missionplanname() {
  
  return missionplanname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_missionplanname() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
  return missionplanname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_missionplanname(std::string* missionplanname) {
  if (missionplanname != nullptr) {
    
  } else {
    
  }
  missionplanname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), missionplanname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_missionplanname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return missionplanname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_missionplanname(
    std::string* missionplanname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (missionplanname != nullptr) {
    
  } else {
    
  }
  missionplanname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      missionplanname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.MissionPlanname)
}

// bytes Intentions = 10;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_intentions() {
  intentions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::intentions() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.Intentions)
  return _internal_intentions();
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_intentions(const std::string& value) {
  _internal_set_intentions(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::mutable_intentions() {
  // @@protoc_insertion_point(field_mutable:USIM_AircraftDeckAbortEvent_Proto.Intentions)
  return _internal_mutable_intentions();
}
inline const std::string& USIM_AircraftDeckAbortEvent_Proto::_internal_intentions() const {
  return intentions_.Get();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_intentions(const std::string& value) {
  
  intentions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_intentions(std::string&& value) {
  
  intentions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_intentions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  intentions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_intentions(const void* value,
    size_t size) {
  
  intentions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::_internal_mutable_intentions() {
  
  return intentions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::release_intentions() {
  // @@protoc_insertion_point(field_release:USIM_AircraftDeckAbortEvent_Proto.Intentions)
  return intentions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_allocated_intentions(std::string* intentions) {
  if (intentions != nullptr) {
    
  } else {
    
  }
  intentions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), intentions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}
inline std::string* USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_release_intentions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AircraftDeckAbortEvent_Proto.Intentions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return intentions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AircraftDeckAbortEvent_Proto::unsafe_arena_set_allocated_intentions(
    std::string* intentions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (intentions != nullptr) {
    
  } else {
    
  }
  intentions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      intentions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AircraftDeckAbortEvent_Proto.Intentions)
}

// uint32 Major_p = 11;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_major_p() {
  major_p_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftDeckAbortEvent_Proto::_internal_major_p() const {
  return major_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AircraftDeckAbortEvent_Proto::major_p() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.Major_p)
  return _internal_major_p();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_major_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  major_p_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_major_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major_p(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.Major_p)
}

// double MaintainDelay = 12;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_maintaindelay() {
  maintaindelay_ = 0;
}
inline double USIM_AircraftDeckAbortEvent_Proto::_internal_maintaindelay() const {
  return maintaindelay_;
}
inline double USIM_AircraftDeckAbortEvent_Proto::maintaindelay() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.MaintainDelay)
  return _internal_maintaindelay();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_maintaindelay(double value) {
  
  maintaindelay_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_maintaindelay(double value) {
  _internal_set_maintaindelay(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.MaintainDelay)
}

// double MaintainTime = 13;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_maintaintime() {
  maintaintime_ = 0;
}
inline double USIM_AircraftDeckAbortEvent_Proto::_internal_maintaintime() const {
  return maintaintime_;
}
inline double USIM_AircraftDeckAbortEvent_Proto::maintaintime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.MaintainTime)
  return _internal_maintaintime();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_maintaintime(double value) {
  
  maintaintime_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_maintaintime(double value) {
  _internal_set_maintaintime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.MaintainTime)
}

// double TurnarundTime = 14;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_turnarundtime() {
  turnarundtime_ = 0;
}
inline double USIM_AircraftDeckAbortEvent_Proto::_internal_turnarundtime() const {
  return turnarundtime_;
}
inline double USIM_AircraftDeckAbortEvent_Proto::turnarundtime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.TurnarundTime)
  return _internal_turnarundtime();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_turnarundtime(double value) {
  
  turnarundtime_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_turnarundtime(double value) {
  _internal_set_turnarundtime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.TurnarundTime)
}

// double AvailableTime = 15;
inline void USIM_AircraftDeckAbortEvent_Proto::clear_availabletime() {
  availabletime_ = 0;
}
inline double USIM_AircraftDeckAbortEvent_Proto::_internal_availabletime() const {
  return availabletime_;
}
inline double USIM_AircraftDeckAbortEvent_Proto::availabletime() const {
  // @@protoc_insertion_point(field_get:USIM_AircraftDeckAbortEvent_Proto.AvailableTime)
  return _internal_availabletime();
}
inline void USIM_AircraftDeckAbortEvent_Proto::_internal_set_availabletime(double value) {
  
  availabletime_ = value;
}
inline void USIM_AircraftDeckAbortEvent_Proto::set_availabletime(double value) {
  _internal_set_availabletime(value);
  // @@protoc_insertion_point(field_set:USIM_AircraftDeckAbortEvent_Proto.AvailableTime)
}

// -------------------------------------------------------------------

// USIM_DyamicCycle_Proto

// double dfSimTime = 1;
inline void USIM_DyamicCycle_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_DyamicCycle_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_DyamicCycle_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_DyamicCycle_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_DyamicCycle_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_DyamicCycle_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_DyamicCycle_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_DyamicCycle_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DyamicCycle_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DyamicCycle_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_DyamicCycle_Proto.uID)
  return _internal_uid();
}
inline void USIM_DyamicCycle_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_DyamicCycle_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_DyamicCycle_Proto.uID)
}

// uint32 uTargetID = 3;
inline void USIM_DyamicCycle_Proto::clear_utargetid() {
  utargetid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DyamicCycle_Proto::_internal_utargetid() const {
  return utargetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_DyamicCycle_Proto::utargetid() const {
  // @@protoc_insertion_point(field_get:USIM_DyamicCycle_Proto.uTargetID)
  return _internal_utargetid();
}
inline void USIM_DyamicCycle_Proto::_internal_set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utargetid_ = value;
}
inline void USIM_DyamicCycle_Proto::set_utargetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utargetid(value);
  // @@protoc_insertion_point(field_set:USIM_DyamicCycle_Proto.uTargetID)
}

// bytes sUuid = 4;
inline void USIM_DyamicCycle_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_DyamicCycle_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_DyamicCycle_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_DyamicCycle_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_DyamicCycle_Proto.sUuid)
}
inline std::string* USIM_DyamicCycle_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_DyamicCycle_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_DyamicCycle_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_DyamicCycle_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_DyamicCycle_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_DyamicCycle_Proto.sUuid)
}
inline void USIM_DyamicCycle_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_DyamicCycle_Proto.sUuid)
}
inline void USIM_DyamicCycle_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_DyamicCycle_Proto.sUuid)
}
inline std::string* USIM_DyamicCycle_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_DyamicCycle_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_DyamicCycle_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_DyamicCycle_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_DyamicCycle_Proto.sUuid)
}
inline std::string* USIM_DyamicCycle_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_DyamicCycle_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_DyamicCycle_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_DyamicCycle_Proto.sUuid)
}

// uint64 uColor = 5;
inline void USIM_DyamicCycle_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_DyamicCycle_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_DyamicCycle_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_DyamicCycle_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_DyamicCycle_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_DyamicCycle_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_DyamicCycle_Proto.uColor)
}

// -------------------------------------------------------------------

// USIM_WedgeBeam_Proto

// double dfSimTime = 1;
inline void USIM_WedgeBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_WedgeBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_WedgeBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_WedgeBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.uID)
  return _internal_uid();
}
inline void USIM_WedgeBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_WedgeBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.uID)
}

// bytes sUuid = 3;
inline void USIM_WedgeBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_WedgeBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_WedgeBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.sUuid)
}
inline std::string* USIM_WedgeBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_WedgeBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_WedgeBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_WedgeBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_WedgeBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_WedgeBeam_Proto.sUuid)
}
inline void USIM_WedgeBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_WedgeBeam_Proto.sUuid)
}
inline void USIM_WedgeBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_WedgeBeam_Proto.sUuid)
}
inline std::string* USIM_WedgeBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_WedgeBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_WedgeBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_WedgeBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_WedgeBeam_Proto.sUuid)
}
inline std::string* USIM_WedgeBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_WedgeBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_WedgeBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_WedgeBeam_Proto.sUuid)
}

// uint32 uType = 4;
inline void USIM_WedgeBeam_Proto::clear_utype() {
  utype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::_internal_utype() const {
  return utype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::utype() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.uType)
  return _internal_utype();
}
inline void USIM_WedgeBeam_Proto::_internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utype_ = value;
}
inline void USIM_WedgeBeam_Proto::set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utype(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.uType)
}

// bool bFiled = 5;
inline void USIM_WedgeBeam_Proto::clear_bfiled() {
  bfiled_ = false;
}
inline bool USIM_WedgeBeam_Proto::_internal_bfiled() const {
  return bfiled_;
}
inline bool USIM_WedgeBeam_Proto::bfiled() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.bFiled)
  return _internal_bfiled();
}
inline void USIM_WedgeBeam_Proto::_internal_set_bfiled(bool value) {
  
  bfiled_ = value;
}
inline void USIM_WedgeBeam_Proto::set_bfiled(bool value) {
  _internal_set_bfiled(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.bFiled)
}

// uint64 uColor = 6;
inline void USIM_WedgeBeam_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_WedgeBeam_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_WedgeBeam_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_WedgeBeam_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_WedgeBeam_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.uColor)
}

// uint32 uDisplayType = 7;
inline void USIM_WedgeBeam_Proto::clear_udisplaytype() {
  udisplaytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::_internal_udisplaytype() const {
  return udisplaytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_WedgeBeam_Proto::udisplaytype() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.uDisplayType)
  return _internal_udisplaytype();
}
inline void USIM_WedgeBeam_Proto::_internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udisplaytype_ = value;
}
inline void USIM_WedgeBeam_Proto::set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udisplaytype(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.uDisplayType)
}

// float dfAzimuthAngle = 8;
inline void USIM_WedgeBeam_Proto::clear_dfazimuthangle() {
  dfazimuthangle_ = 0;
}
inline float USIM_WedgeBeam_Proto::_internal_dfazimuthangle() const {
  return dfazimuthangle_;
}
inline float USIM_WedgeBeam_Proto::dfazimuthangle() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfAzimuthAngle)
  return _internal_dfazimuthangle();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dfazimuthangle(float value) {
  
  dfazimuthangle_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dfazimuthangle(float value) {
  _internal_set_dfazimuthangle(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfAzimuthAngle)
}

// float dfPitchAngle = 9;
inline void USIM_WedgeBeam_Proto::clear_dfpitchangle() {
  dfpitchangle_ = 0;
}
inline float USIM_WedgeBeam_Proto::_internal_dfpitchangle() const {
  return dfpitchangle_;
}
inline float USIM_WedgeBeam_Proto::dfpitchangle() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfPitchAngle)
  return _internal_dfpitchangle();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dfpitchangle(float value) {
  
  dfpitchangle_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dfpitchangle(float value) {
  _internal_set_dfpitchangle(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfPitchAngle)
}

// float dfLROpeningAngle = 10;
inline void USIM_WedgeBeam_Proto::clear_dflropeningangle() {
  dflropeningangle_ = 0;
}
inline float USIM_WedgeBeam_Proto::_internal_dflropeningangle() const {
  return dflropeningangle_;
}
inline float USIM_WedgeBeam_Proto::dflropeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfLROpeningAngle)
  return _internal_dflropeningangle();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dflropeningangle(float value) {
  
  dflropeningangle_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dflropeningangle(float value) {
  _internal_set_dflropeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfLROpeningAngle)
}

// float dfUDOpeningAngle = 11;
inline void USIM_WedgeBeam_Proto::clear_dfudopeningangle() {
  dfudopeningangle_ = 0;
}
inline float USIM_WedgeBeam_Proto::_internal_dfudopeningangle() const {
  return dfudopeningangle_;
}
inline float USIM_WedgeBeam_Proto::dfudopeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfUDOpeningAngle)
  return _internal_dfudopeningangle();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dfudopeningangle(float value) {
  
  dfudopeningangle_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dfudopeningangle(float value) {
  _internal_set_dfudopeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfUDOpeningAngle)
}

// double dfCloseCutDistance = 12;
inline void USIM_WedgeBeam_Proto::clear_dfclosecutdistance() {
  dfclosecutdistance_ = 0;
}
inline double USIM_WedgeBeam_Proto::_internal_dfclosecutdistance() const {
  return dfclosecutdistance_;
}
inline double USIM_WedgeBeam_Proto::dfclosecutdistance() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfCloseCutDistance)
  return _internal_dfclosecutdistance();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dfclosecutdistance(double value) {
  
  dfclosecutdistance_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dfclosecutdistance(double value) {
  _internal_set_dfclosecutdistance(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfCloseCutDistance)
}

// double dfLength = 13;
inline void USIM_WedgeBeam_Proto::clear_dflength() {
  dflength_ = 0;
}
inline double USIM_WedgeBeam_Proto::_internal_dflength() const {
  return dflength_;
}
inline double USIM_WedgeBeam_Proto::dflength() const {
  // @@protoc_insertion_point(field_get:USIM_WedgeBeam_Proto.dfLength)
  return _internal_dflength();
}
inline void USIM_WedgeBeam_Proto::_internal_set_dflength(double value) {
  
  dflength_ = value;
}
inline void USIM_WedgeBeam_Proto::set_dflength(double value) {
  _internal_set_dflength(value);
  // @@protoc_insertion_point(field_set:USIM_WedgeBeam_Proto.dfLength)
}

// -------------------------------------------------------------------

// USIN_SphereBeam_Proto

// double dfSimTime = 1;
inline void USIN_SphereBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIN_SphereBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIN_SphereBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIN_SphereBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIN_SphereBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIN_SphereBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIN_SphereBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIN_SphereBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIN_SphereBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIN_SphereBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIN_SphereBeam_Proto.uID)
  return _internal_uid();
}
inline void USIN_SphereBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIN_SphereBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIN_SphereBeam_Proto.uID)
}

// bytes sUuid = 3;
inline void USIN_SphereBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIN_SphereBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIN_SphereBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIN_SphereBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIN_SphereBeam_Proto.sUuid)
}
inline std::string* USIN_SphereBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIN_SphereBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIN_SphereBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIN_SphereBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIN_SphereBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIN_SphereBeam_Proto.sUuid)
}
inline void USIN_SphereBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIN_SphereBeam_Proto.sUuid)
}
inline void USIN_SphereBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIN_SphereBeam_Proto.sUuid)
}
inline std::string* USIN_SphereBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIN_SphereBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIN_SphereBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIN_SphereBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIN_SphereBeam_Proto.sUuid)
}
inline std::string* USIN_SphereBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIN_SphereBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIN_SphereBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIN_SphereBeam_Proto.sUuid)
}

// uint32 type = 4;
inline void USIN_SphereBeam_Proto::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIN_SphereBeam_Proto::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIN_SphereBeam_Proto::type() const {
  // @@protoc_insertion_point(field_get:USIN_SphereBeam_Proto.type)
  return _internal_type();
}
inline void USIN_SphereBeam_Proto::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void USIN_SphereBeam_Proto::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:USIN_SphereBeam_Proto.type)
}

// double dfradius = 5;
inline void USIN_SphereBeam_Proto::clear_dfradius() {
  dfradius_ = 0;
}
inline double USIN_SphereBeam_Proto::_internal_dfradius() const {
  return dfradius_;
}
inline double USIN_SphereBeam_Proto::dfradius() const {
  // @@protoc_insertion_point(field_get:USIN_SphereBeam_Proto.dfradius)
  return _internal_dfradius();
}
inline void USIN_SphereBeam_Proto::_internal_set_dfradius(double value) {
  
  dfradius_ = value;
}
inline void USIN_SphereBeam_Proto::set_dfradius(double value) {
  _internal_set_dfradius(value);
  // @@protoc_insertion_point(field_set:USIN_SphereBeam_Proto.dfradius)
}

// -------------------------------------------------------------------

// USIM_CircleBeam_Proto

// double dfSimTime = 1;
inline void USIM_CircleBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_CircleBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_CircleBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_CircleBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_CircleBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_CircleBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_CircleBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_CircleBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CircleBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CircleBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_CircleBeam_Proto.uID)
  return _internal_uid();
}
inline void USIM_CircleBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_CircleBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_CircleBeam_Proto.uID)
}

// bytes sUuid = 3;
inline void USIM_CircleBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CircleBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_CircleBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_CircleBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_CircleBeam_Proto.sUuid)
}
inline std::string* USIM_CircleBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_CircleBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_CircleBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_CircleBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CircleBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CircleBeam_Proto.sUuid)
}
inline void USIM_CircleBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CircleBeam_Proto.sUuid)
}
inline void USIM_CircleBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CircleBeam_Proto.sUuid)
}
inline std::string* USIM_CircleBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CircleBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_CircleBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CircleBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CircleBeam_Proto.sUuid)
}
inline std::string* USIM_CircleBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CircleBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CircleBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CircleBeam_Proto.sUuid)
}

// double dfUDOpeningAngle = 4;
inline void USIM_CircleBeam_Proto::clear_dfudopeningangle() {
  dfudopeningangle_ = 0;
}
inline double USIM_CircleBeam_Proto::_internal_dfudopeningangle() const {
  return dfudopeningangle_;
}
inline double USIM_CircleBeam_Proto::dfudopeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_CircleBeam_Proto.dfUDOpeningAngle)
  return _internal_dfudopeningangle();
}
inline void USIM_CircleBeam_Proto::_internal_set_dfudopeningangle(double value) {
  
  dfudopeningangle_ = value;
}
inline void USIM_CircleBeam_Proto::set_dfudopeningangle(double value) {
  _internal_set_dfudopeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_CircleBeam_Proto.dfUDOpeningAngle)
}

// double dfLength = 5;
inline void USIM_CircleBeam_Proto::clear_dflength() {
  dflength_ = 0;
}
inline double USIM_CircleBeam_Proto::_internal_dflength() const {
  return dflength_;
}
inline double USIM_CircleBeam_Proto::dflength() const {
  // @@protoc_insertion_point(field_get:USIM_CircleBeam_Proto.dfLength)
  return _internal_dflength();
}
inline void USIM_CircleBeam_Proto::_internal_set_dflength(double value) {
  
  dflength_ = value;
}
inline void USIM_CircleBeam_Proto::set_dflength(double value) {
  _internal_set_dflength(value);
  // @@protoc_insertion_point(field_set:USIM_CircleBeam_Proto.dfLength)
}

// -------------------------------------------------------------------

// USIM_ConeBeam_Proto

// double dfSimTime = 1;
inline void USIM_ConeBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_ConeBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_ConeBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_ConeBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_ConeBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_ConeBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ConeBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ConeBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.uID)
  return _internal_uid();
}
inline void USIM_ConeBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_ConeBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.uID)
}

// uint32 uTerminalID = 3;
inline void USIM_ConeBeam_Proto::clear_uterminalid() {
  uterminalid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ConeBeam_Proto::_internal_uterminalid() const {
  return uterminalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ConeBeam_Proto::uterminalid() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.uTerminalID)
  return _internal_uterminalid();
}
inline void USIM_ConeBeam_Proto::_internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uterminalid_ = value;
}
inline void USIM_ConeBeam_Proto::set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uterminalid(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.uTerminalID)
}

// bytes sUuid = 4;
inline void USIM_ConeBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_ConeBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_ConeBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.sUuid)
}
inline std::string* USIM_ConeBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_ConeBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_ConeBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_ConeBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_ConeBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_ConeBeam_Proto.sUuid)
}
inline void USIM_ConeBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_ConeBeam_Proto.sUuid)
}
inline void USIM_ConeBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_ConeBeam_Proto.sUuid)
}
inline std::string* USIM_ConeBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_ConeBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_ConeBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_ConeBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_ConeBeam_Proto.sUuid)
}
inline std::string* USIM_ConeBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_ConeBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_ConeBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_ConeBeam_Proto.sUuid)
}

// double dfradius = 5;
inline void USIM_ConeBeam_Proto::clear_dfradius() {
  dfradius_ = 0;
}
inline double USIM_ConeBeam_Proto::_internal_dfradius() const {
  return dfradius_;
}
inline double USIM_ConeBeam_Proto::dfradius() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.dfradius)
  return _internal_dfradius();
}
inline void USIM_ConeBeam_Proto::_internal_set_dfradius(double value) {
  
  dfradius_ = value;
}
inline void USIM_ConeBeam_Proto::set_dfradius(double value) {
  _internal_set_dfradius(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.dfradius)
}

// double dfAzimuthAngle = 6;
inline void USIM_ConeBeam_Proto::clear_dfazimuthangle() {
  dfazimuthangle_ = 0;
}
inline double USIM_ConeBeam_Proto::_internal_dfazimuthangle() const {
  return dfazimuthangle_;
}
inline double USIM_ConeBeam_Proto::dfazimuthangle() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.dfAzimuthAngle)
  return _internal_dfazimuthangle();
}
inline void USIM_ConeBeam_Proto::_internal_set_dfazimuthangle(double value) {
  
  dfazimuthangle_ = value;
}
inline void USIM_ConeBeam_Proto::set_dfazimuthangle(double value) {
  _internal_set_dfazimuthangle(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.dfAzimuthAngle)
}

// double dfPitchAngle = 7;
inline void USIM_ConeBeam_Proto::clear_dfpitchangle() {
  dfpitchangle_ = 0;
}
inline double USIM_ConeBeam_Proto::_internal_dfpitchangle() const {
  return dfpitchangle_;
}
inline double USIM_ConeBeam_Proto::dfpitchangle() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.dfPitchAngle)
  return _internal_dfpitchangle();
}
inline void USIM_ConeBeam_Proto::_internal_set_dfpitchangle(double value) {
  
  dfpitchangle_ = value;
}
inline void USIM_ConeBeam_Proto::set_dfpitchangle(double value) {
  _internal_set_dfpitchangle(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.dfPitchAngle)
}

// double dfOpeningAngle = 8;
inline void USIM_ConeBeam_Proto::clear_dfopeningangle() {
  dfopeningangle_ = 0;
}
inline double USIM_ConeBeam_Proto::_internal_dfopeningangle() const {
  return dfopeningangle_;
}
inline double USIM_ConeBeam_Proto::dfopeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_ConeBeam_Proto.dfOpeningAngle)
  return _internal_dfopeningangle();
}
inline void USIM_ConeBeam_Proto::_internal_set_dfopeningangle(double value) {
  
  dfopeningangle_ = value;
}
inline void USIM_ConeBeam_Proto::set_dfopeningangle(double value) {
  _internal_set_dfopeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_ConeBeam_Proto.dfOpeningAngle)
}

// -------------------------------------------------------------------

// USIM_PyramidBeam_Proto

// double dfSimTime = 1;
inline void USIM_PyramidBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_PyramidBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_PyramidBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.uID)
  return _internal_uid();
}
inline void USIM_PyramidBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_PyramidBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.uID)
}

// uint32 uTerminalID = 3;
inline void USIM_PyramidBeam_Proto::clear_uterminalid() {
  uterminalid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::_internal_uterminalid() const {
  return uterminalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::uterminalid() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.uTerminalID)
  return _internal_uterminalid();
}
inline void USIM_PyramidBeam_Proto::_internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uterminalid_ = value;
}
inline void USIM_PyramidBeam_Proto::set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uterminalid(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.uTerminalID)
}

// bytes sUuid = 4;
inline void USIM_PyramidBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_PyramidBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_PyramidBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.sUuid)
}
inline std::string* USIM_PyramidBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_PyramidBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_PyramidBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_PyramidBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_PyramidBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_PyramidBeam_Proto.sUuid)
}
inline void USIM_PyramidBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_PyramidBeam_Proto.sUuid)
}
inline void USIM_PyramidBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_PyramidBeam_Proto.sUuid)
}
inline std::string* USIM_PyramidBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_PyramidBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_PyramidBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_PyramidBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_PyramidBeam_Proto.sUuid)
}
inline std::string* USIM_PyramidBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_PyramidBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_PyramidBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_PyramidBeam_Proto.sUuid)
}

// uint32 uType = 5;
inline void USIM_PyramidBeam_Proto::clear_utype() {
  utype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::_internal_utype() const {
  return utype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::utype() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.uType)
  return _internal_utype();
}
inline void USIM_PyramidBeam_Proto::_internal_set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  utype_ = value;
}
inline void USIM_PyramidBeam_Proto::set_utype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_utype(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.uType)
}

// bool bFiled = 6;
inline void USIM_PyramidBeam_Proto::clear_bfiled() {
  bfiled_ = false;
}
inline bool USIM_PyramidBeam_Proto::_internal_bfiled() const {
  return bfiled_;
}
inline bool USIM_PyramidBeam_Proto::bfiled() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.bFiled)
  return _internal_bfiled();
}
inline void USIM_PyramidBeam_Proto::_internal_set_bfiled(bool value) {
  
  bfiled_ = value;
}
inline void USIM_PyramidBeam_Proto::set_bfiled(bool value) {
  _internal_set_bfiled(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.bFiled)
}

// uint64 uColor = 7;
inline void USIM_PyramidBeam_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_PyramidBeam_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_PyramidBeam_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_PyramidBeam_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_PyramidBeam_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.uColor)
}

// uint32 uDisplayType = 8;
inline void USIM_PyramidBeam_Proto::clear_udisplaytype() {
  udisplaytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::_internal_udisplaytype() const {
  return udisplaytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_PyramidBeam_Proto::udisplaytype() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.uDisplayType)
  return _internal_udisplaytype();
}
inline void USIM_PyramidBeam_Proto::_internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udisplaytype_ = value;
}
inline void USIM_PyramidBeam_Proto::set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udisplaytype(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.uDisplayType)
}

// double dfAzimuthAngle = 9;
inline void USIM_PyramidBeam_Proto::clear_dfazimuthangle() {
  dfazimuthangle_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dfazimuthangle() const {
  return dfazimuthangle_;
}
inline double USIM_PyramidBeam_Proto::dfazimuthangle() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfAzimuthAngle)
  return _internal_dfazimuthangle();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dfazimuthangle(double value) {
  
  dfazimuthangle_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dfazimuthangle(double value) {
  _internal_set_dfazimuthangle(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfAzimuthAngle)
}

// double dfPitchAngle = 10;
inline void USIM_PyramidBeam_Proto::clear_dfpitchangle() {
  dfpitchangle_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dfpitchangle() const {
  return dfpitchangle_;
}
inline double USIM_PyramidBeam_Proto::dfpitchangle() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfPitchAngle)
  return _internal_dfpitchangle();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dfpitchangle(double value) {
  
  dfpitchangle_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dfpitchangle(double value) {
  _internal_set_dfpitchangle(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfPitchAngle)
}

// double dfLROpeningAngle = 11;
inline void USIM_PyramidBeam_Proto::clear_dflropeningangle() {
  dflropeningangle_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dflropeningangle() const {
  return dflropeningangle_;
}
inline double USIM_PyramidBeam_Proto::dflropeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfLROpeningAngle)
  return _internal_dflropeningangle();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dflropeningangle(double value) {
  
  dflropeningangle_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dflropeningangle(double value) {
  _internal_set_dflropeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfLROpeningAngle)
}

// double dfUDOpeningAngle = 12;
inline void USIM_PyramidBeam_Proto::clear_dfudopeningangle() {
  dfudopeningangle_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dfudopeningangle() const {
  return dfudopeningangle_;
}
inline double USIM_PyramidBeam_Proto::dfudopeningangle() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfUDOpeningAngle)
  return _internal_dfudopeningangle();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dfudopeningangle(double value) {
  
  dfudopeningangle_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dfudopeningangle(double value) {
  _internal_set_dfudopeningangle(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfUDOpeningAngle)
}

// double dfradius = 13;
inline void USIM_PyramidBeam_Proto::clear_dfradius() {
  dfradius_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dfradius() const {
  return dfradius_;
}
inline double USIM_PyramidBeam_Proto::dfradius() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfradius)
  return _internal_dfradius();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dfradius(double value) {
  
  dfradius_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dfradius(double value) {
  _internal_set_dfradius(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfradius)
}

// double dfLength = 14;
inline void USIM_PyramidBeam_Proto::clear_dflength() {
  dflength_ = 0;
}
inline double USIM_PyramidBeam_Proto::_internal_dflength() const {
  return dflength_;
}
inline double USIM_PyramidBeam_Proto::dflength() const {
  // @@protoc_insertion_point(field_get:USIM_PyramidBeam_Proto.dfLength)
  return _internal_dflength();
}
inline void USIM_PyramidBeam_Proto::_internal_set_dflength(double value) {
  
  dflength_ = value;
}
inline void USIM_PyramidBeam_Proto::set_dflength(double value) {
  _internal_set_dflength(value);
  // @@protoc_insertion_point(field_set:USIM_PyramidBeam_Proto.dfLength)
}

// -------------------------------------------------------------------

// USIM_CylinderBeam_Proto

// double dfSimTime = 1;
inline void USIM_CylinderBeam_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_CylinderBeam_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_CylinderBeam_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_CylinderBeam_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_CylinderBeam_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_CylinderBeam_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CylinderBeam_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CylinderBeam_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.uID)
  return _internal_uid();
}
inline void USIM_CylinderBeam_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_CylinderBeam_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.uID)
}

// bytes sUuid = 3;
inline void USIM_CylinderBeam_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_CylinderBeam_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_CylinderBeam_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.sUuid)
}
inline std::string* USIM_CylinderBeam_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_CylinderBeam_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_CylinderBeam_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_CylinderBeam_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_CylinderBeam_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_CylinderBeam_Proto.sUuid)
}
inline void USIM_CylinderBeam_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_CylinderBeam_Proto.sUuid)
}
inline void USIM_CylinderBeam_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_CylinderBeam_Proto.sUuid)
}
inline std::string* USIM_CylinderBeam_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_CylinderBeam_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_CylinderBeam_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_CylinderBeam_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_CylinderBeam_Proto.sUuid)
}
inline std::string* USIM_CylinderBeam_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_CylinderBeam_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_CylinderBeam_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_CylinderBeam_Proto.sUuid)
}

// bool bFiled = 4;
inline void USIM_CylinderBeam_Proto::clear_bfiled() {
  bfiled_ = false;
}
inline bool USIM_CylinderBeam_Proto::_internal_bfiled() const {
  return bfiled_;
}
inline bool USIM_CylinderBeam_Proto::bfiled() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.bFiled)
  return _internal_bfiled();
}
inline void USIM_CylinderBeam_Proto::_internal_set_bfiled(bool value) {
  
  bfiled_ = value;
}
inline void USIM_CylinderBeam_Proto::set_bfiled(bool value) {
  _internal_set_bfiled(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.bFiled)
}

// uint64 uColor = 5;
inline void USIM_CylinderBeam_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_CylinderBeam_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_CylinderBeam_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_CylinderBeam_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_CylinderBeam_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.uColor)
}

// uint32 uDisplayType = 6;
inline void USIM_CylinderBeam_Proto::clear_udisplaytype() {
  udisplaytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CylinderBeam_Proto::_internal_udisplaytype() const {
  return udisplaytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_CylinderBeam_Proto::udisplaytype() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.uDisplayType)
  return _internal_udisplaytype();
}
inline void USIM_CylinderBeam_Proto::_internal_set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  udisplaytype_ = value;
}
inline void USIM_CylinderBeam_Proto::set_udisplaytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_udisplaytype(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.uDisplayType)
}

// double dfAzimuthAngle = 7;
inline void USIM_CylinderBeam_Proto::clear_dfazimuthangle() {
  dfazimuthangle_ = 0;
}
inline double USIM_CylinderBeam_Proto::_internal_dfazimuthangle() const {
  return dfazimuthangle_;
}
inline double USIM_CylinderBeam_Proto::dfazimuthangle() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.dfAzimuthAngle)
  return _internal_dfazimuthangle();
}
inline void USIM_CylinderBeam_Proto::_internal_set_dfazimuthangle(double value) {
  
  dfazimuthangle_ = value;
}
inline void USIM_CylinderBeam_Proto::set_dfazimuthangle(double value) {
  _internal_set_dfazimuthangle(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.dfAzimuthAngle)
}

// double dfPitchAngle = 8;
inline void USIM_CylinderBeam_Proto::clear_dfpitchangle() {
  dfpitchangle_ = 0;
}
inline double USIM_CylinderBeam_Proto::_internal_dfpitchangle() const {
  return dfpitchangle_;
}
inline double USIM_CylinderBeam_Proto::dfpitchangle() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.dfPitchAngle)
  return _internal_dfpitchangle();
}
inline void USIM_CylinderBeam_Proto::_internal_set_dfpitchangle(double value) {
  
  dfpitchangle_ = value;
}
inline void USIM_CylinderBeam_Proto::set_dfpitchangle(double value) {
  _internal_set_dfpitchangle(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.dfPitchAngle)
}

// double dfradius = 9;
inline void USIM_CylinderBeam_Proto::clear_dfradius() {
  dfradius_ = 0;
}
inline double USIM_CylinderBeam_Proto::_internal_dfradius() const {
  return dfradius_;
}
inline double USIM_CylinderBeam_Proto::dfradius() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.dfradius)
  return _internal_dfradius();
}
inline void USIM_CylinderBeam_Proto::_internal_set_dfradius(double value) {
  
  dfradius_ = value;
}
inline void USIM_CylinderBeam_Proto::set_dfradius(double value) {
  _internal_set_dfradius(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.dfradius)
}

// double dfLength = 10;
inline void USIM_CylinderBeam_Proto::clear_dflength() {
  dflength_ = 0;
}
inline double USIM_CylinderBeam_Proto::_internal_dflength() const {
  return dflength_;
}
inline double USIM_CylinderBeam_Proto::dflength() const {
  // @@protoc_insertion_point(field_get:USIM_CylinderBeam_Proto.dfLength)
  return _internal_dflength();
}
inline void USIM_CylinderBeam_Proto::_internal_set_dflength(double value) {
  
  dflength_ = value;
}
inline void USIM_CylinderBeam_Proto::set_dflength(double value) {
  _internal_set_dflength(value);
  // @@protoc_insertion_point(field_set:USIM_CylinderBeam_Proto.dfLength)
}

// -------------------------------------------------------------------

// USIM_Line_Proto

// double dfSimTime = 1;
inline void USIM_Line_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_Line_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_Line_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_Line_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_Line_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_Line_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.uID)
  return _internal_uid();
}
inline void USIM_Line_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_Line_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.uID)
}

// uint32 uTerminalID = 3;
inline void USIM_Line_Proto::clear_uterminalid() {
  uterminalid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::_internal_uterminalid() const {
  return uterminalid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::uterminalid() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.uTerminalID)
  return _internal_uterminalid();
}
inline void USIM_Line_Proto::_internal_set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uterminalid_ = value;
}
inline void USIM_Line_Proto::set_uterminalid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uterminalid(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.uTerminalID)
}

// bytes sUuid = 4;
inline void USIM_Line_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_Line_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_Line_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.sUuid)
}
inline std::string* USIM_Line_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_Line_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_Line_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_Line_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_Line_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_Line_Proto.sUuid)
}
inline void USIM_Line_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_Line_Proto.sUuid)
}
inline void USIM_Line_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_Line_Proto.sUuid)
}
inline std::string* USIM_Line_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_Line_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_Line_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_Line_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_Line_Proto.sUuid)
}
inline std::string* USIM_Line_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_Line_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_Line_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_Line_Proto.sUuid)
}

// uint32 uLineType = 5;
inline void USIM_Line_Proto::clear_ulinetype() {
  ulinetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::_internal_ulinetype() const {
  return ulinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_Line_Proto::ulinetype() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.uLineType)
  return _internal_ulinetype();
}
inline void USIM_Line_Proto::_internal_set_ulinetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ulinetype_ = value;
}
inline void USIM_Line_Proto::set_ulinetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ulinetype(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.uLineType)
}

// uint64 uColor = 6;
inline void USIM_Line_Proto::clear_ucolor() {
  ucolor_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_Line_Proto::_internal_ucolor() const {
  return ucolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 USIM_Line_Proto::ucolor() const {
  // @@protoc_insertion_point(field_get:USIM_Line_Proto.uColor)
  return _internal_ucolor();
}
inline void USIM_Line_Proto::_internal_set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ucolor_ = value;
}
inline void USIM_Line_Proto::set_ucolor(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ucolor(value);
  // @@protoc_insertion_point(field_set:USIM_Line_Proto.uColor)
}

// -------------------------------------------------------------------

// USIM_GraphOnoff_Proto

// double dfSimTime = 1;
inline void USIM_GraphOnoff_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_GraphOnoff_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_GraphOnoff_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_GraphOnoff_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_GraphOnoff_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_GraphOnoff_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_GraphOnoff_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_GraphOnoff_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_GraphOnoff_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_GraphOnoff_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_GraphOnoff_Proto.uID)
  return _internal_uid();
}
inline void USIM_GraphOnoff_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_GraphOnoff_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_GraphOnoff_Proto.uID)
}

// bytes sUuid = 3;
inline void USIM_GraphOnoff_Proto::clear_suuid() {
  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_GraphOnoff_Proto::suuid() const {
  // @@protoc_insertion_point(field_get:USIM_GraphOnoff_Proto.sUuid)
  return _internal_suuid();
}
inline void USIM_GraphOnoff_Proto::set_suuid(const std::string& value) {
  _internal_set_suuid(value);
  // @@protoc_insertion_point(field_set:USIM_GraphOnoff_Proto.sUuid)
}
inline std::string* USIM_GraphOnoff_Proto::mutable_suuid() {
  // @@protoc_insertion_point(field_mutable:USIM_GraphOnoff_Proto.sUuid)
  return _internal_mutable_suuid();
}
inline const std::string& USIM_GraphOnoff_Proto::_internal_suuid() const {
  return suuid_.Get();
}
inline void USIM_GraphOnoff_Proto::_internal_set_suuid(const std::string& value) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_GraphOnoff_Proto::set_suuid(std::string&& value) {
  
  suuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_GraphOnoff_Proto.sUuid)
}
inline void USIM_GraphOnoff_Proto::set_suuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_GraphOnoff_Proto.sUuid)
}
inline void USIM_GraphOnoff_Proto::set_suuid(const void* value,
    size_t size) {
  
  suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_GraphOnoff_Proto.sUuid)
}
inline std::string* USIM_GraphOnoff_Proto::_internal_mutable_suuid() {
  
  return suuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_GraphOnoff_Proto::release_suuid() {
  // @@protoc_insertion_point(field_release:USIM_GraphOnoff_Proto.sUuid)
  return suuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_GraphOnoff_Proto::set_allocated_suuid(std::string* suuid) {
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_GraphOnoff_Proto.sUuid)
}
inline std::string* USIM_GraphOnoff_Proto::unsafe_arena_release_suuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_GraphOnoff_Proto.sUuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_GraphOnoff_Proto::unsafe_arena_set_allocated_suuid(
    std::string* suuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suuid != nullptr) {
    
  } else {
    
  }
  suuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_GraphOnoff_Proto.sUuid)
}

// -------------------------------------------------------------------

// USIM_SonarDetectInfo_Proto

// uint32 plat_id = 1;
inline void USIM_SonarDetectInfo_Proto::clear_plat_id() {
  plat_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDetectInfo_Proto::_internal_plat_id() const {
  return plat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDetectInfo_Proto::plat_id() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.plat_id)
  return _internal_plat_id();
}
inline void USIM_SonarDetectInfo_Proto::_internal_set_plat_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  plat_id_ = value;
}
inline void USIM_SonarDetectInfo_Proto::set_plat_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_plat_id(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.plat_id)
}

// bytes platname = 2;
inline void USIM_SonarDetectInfo_Proto::clear_platname() {
  platname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_SonarDetectInfo_Proto::platname() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.platname)
  return _internal_platname();
}
inline void USIM_SonarDetectInfo_Proto::set_platname(const std::string& value) {
  _internal_set_platname(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.platname)
}
inline std::string* USIM_SonarDetectInfo_Proto::mutable_platname() {
  // @@protoc_insertion_point(field_mutable:USIM_SonarDetectInfo_Proto.platname)
  return _internal_mutable_platname();
}
inline const std::string& USIM_SonarDetectInfo_Proto::_internal_platname() const {
  return platname_.Get();
}
inline void USIM_SonarDetectInfo_Proto::_internal_set_platname(const std::string& value) {
  
  platname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_SonarDetectInfo_Proto::set_platname(std::string&& value) {
  
  platname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_SonarDetectInfo_Proto.platname)
}
inline void USIM_SonarDetectInfo_Proto::set_platname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_SonarDetectInfo_Proto.platname)
}
inline void USIM_SonarDetectInfo_Proto::set_platname(const void* value,
    size_t size) {
  
  platname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_SonarDetectInfo_Proto.platname)
}
inline std::string* USIM_SonarDetectInfo_Proto::_internal_mutable_platname() {
  
  return platname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_SonarDetectInfo_Proto::release_platname() {
  // @@protoc_insertion_point(field_release:USIM_SonarDetectInfo_Proto.platname)
  return platname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_SonarDetectInfo_Proto::set_allocated_platname(std::string* platname) {
  if (platname != nullptr) {
    
  } else {
    
  }
  platname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_SonarDetectInfo_Proto.platname)
}
inline std::string* USIM_SonarDetectInfo_Proto::unsafe_arena_release_platname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_SonarDetectInfo_Proto.platname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return platname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_SonarDetectInfo_Proto::unsafe_arena_set_allocated_platname(
    std::string* platname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (platname != nullptr) {
    
  } else {
    
  }
  platname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      platname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_SonarDetectInfo_Proto.platname)
}

// bytes detector = 3;
inline void USIM_SonarDetectInfo_Proto::clear_detector() {
  detector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_SonarDetectInfo_Proto::detector() const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.detector)
  return _internal_detector();
}
inline void USIM_SonarDetectInfo_Proto::set_detector(const std::string& value) {
  _internal_set_detector(value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.detector)
}
inline std::string* USIM_SonarDetectInfo_Proto::mutable_detector() {
  // @@protoc_insertion_point(field_mutable:USIM_SonarDetectInfo_Proto.detector)
  return _internal_mutable_detector();
}
inline const std::string& USIM_SonarDetectInfo_Proto::_internal_detector() const {
  return detector_.Get();
}
inline void USIM_SonarDetectInfo_Proto::_internal_set_detector(const std::string& value) {
  
  detector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_SonarDetectInfo_Proto::set_detector(std::string&& value) {
  
  detector_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_SonarDetectInfo_Proto.detector)
}
inline void USIM_SonarDetectInfo_Proto::set_detector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_SonarDetectInfo_Proto.detector)
}
inline void USIM_SonarDetectInfo_Proto::set_detector(const void* value,
    size_t size) {
  
  detector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_SonarDetectInfo_Proto.detector)
}
inline std::string* USIM_SonarDetectInfo_Proto::_internal_mutable_detector() {
  
  return detector_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_SonarDetectInfo_Proto::release_detector() {
  // @@protoc_insertion_point(field_release:USIM_SonarDetectInfo_Proto.detector)
  return detector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_SonarDetectInfo_Proto::set_allocated_detector(std::string* detector) {
  if (detector != nullptr) {
    
  } else {
    
  }
  detector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detector,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_SonarDetectInfo_Proto.detector)
}
inline std::string* USIM_SonarDetectInfo_Proto::unsafe_arena_release_detector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_SonarDetectInfo_Proto.detector)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return detector_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_SonarDetectInfo_Proto::unsafe_arena_set_allocated_detector(
    std::string* detector) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (detector != nullptr) {
    
  } else {
    
  }
  detector_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      detector, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_SonarDetectInfo_Proto.detector)
}

// repeated uint32 para_targetID = 4;
inline int USIM_SonarDetectInfo_Proto::_internal_para_targetid_size() const {
  return para_targetid_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_targetid_size() const {
  return _internal_para_targetid_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_targetid() {
  para_targetid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDetectInfo_Proto::_internal_para_targetid(int index) const {
  return para_targetid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_SonarDetectInfo_Proto::para_targetid(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_targetID)
  return _internal_para_targetid(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_targetid(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  para_targetid_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_targetID)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  para_targetid_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_targetid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_para_targetid(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_targetID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
USIM_SonarDetectInfo_Proto::_internal_para_targetid() const {
  return para_targetid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
USIM_SonarDetectInfo_Proto::para_targetid() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_targetID)
  return _internal_para_targetid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_targetid() {
  return &para_targetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
USIM_SonarDetectInfo_Proto::mutable_para_targetid() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_targetID)
  return _internal_mutable_para_targetid();
}

// repeated double para_RSL_passive = 5;
inline int USIM_SonarDetectInfo_Proto::_internal_para_rsl_passive_size() const {
  return para_rsl_passive_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_rsl_passive_size() const {
  return _internal_para_rsl_passive_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_rsl_passive() {
  para_rsl_passive_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_rsl_passive(int index) const {
  return para_rsl_passive_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_rsl_passive(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_RSL_passive)
  return _internal_para_rsl_passive(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_rsl_passive(int index, double value) {
  para_rsl_passive_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_RSL_passive)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_rsl_passive(double value) {
  para_rsl_passive_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_rsl_passive(double value) {
  _internal_add_para_rsl_passive(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_RSL_passive)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_rsl_passive() const {
  return para_rsl_passive_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_rsl_passive() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_RSL_passive)
  return _internal_para_rsl_passive();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_rsl_passive() {
  return &para_rsl_passive_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_rsl_passive() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_RSL_passive)
  return _internal_mutable_para_rsl_passive();
}

// repeated double para_RSL_active = 6;
inline int USIM_SonarDetectInfo_Proto::_internal_para_rsl_active_size() const {
  return para_rsl_active_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_rsl_active_size() const {
  return _internal_para_rsl_active_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_rsl_active() {
  para_rsl_active_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_rsl_active(int index) const {
  return para_rsl_active_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_rsl_active(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_RSL_active)
  return _internal_para_rsl_active(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_rsl_active(int index, double value) {
  para_rsl_active_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_RSL_active)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_rsl_active(double value) {
  para_rsl_active_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_rsl_active(double value) {
  _internal_add_para_rsl_active(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_RSL_active)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_rsl_active() const {
  return para_rsl_active_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_rsl_active() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_RSL_active)
  return _internal_para_rsl_active();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_rsl_active() {
  return &para_rsl_active_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_rsl_active() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_RSL_active)
  return _internal_mutable_para_rsl_active();
}

// repeated double para_TS = 7;
inline int USIM_SonarDetectInfo_Proto::_internal_para_ts_size() const {
  return para_ts_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_ts_size() const {
  return _internal_para_ts_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_ts() {
  para_ts_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_ts(int index) const {
  return para_ts_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_ts(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_TS)
  return _internal_para_ts(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_ts(int index, double value) {
  para_ts_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_TS)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_ts(double value) {
  para_ts_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_ts(double value) {
  _internal_add_para_ts(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_TS)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_ts() const {
  return para_ts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_ts() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_TS)
  return _internal_para_ts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_ts() {
  return &para_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_ts() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_TS)
  return _internal_mutable_para_ts();
}

// repeated double para_RNR = 8;
inline int USIM_SonarDetectInfo_Proto::_internal_para_rnr_size() const {
  return para_rnr_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_rnr_size() const {
  return _internal_para_rnr_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_rnr() {
  para_rnr_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_rnr(int index) const {
  return para_rnr_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_rnr(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_RNR)
  return _internal_para_rnr(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_rnr(int index, double value) {
  para_rnr_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_RNR)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_rnr(double value) {
  para_rnr_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_rnr(double value) {
  _internal_add_para_rnr(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_RNR)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_rnr() const {
  return para_rnr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_rnr() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_RNR)
  return _internal_para_rnr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_rnr() {
  return &para_rnr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_rnr() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_RNR)
  return _internal_mutable_para_rnr();
}

// repeated double para_gain = 9;
inline int USIM_SonarDetectInfo_Proto::_internal_para_gain_size() const {
  return para_gain_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_gain_size() const {
  return _internal_para_gain_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_gain() {
  para_gain_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_gain(int index) const {
  return para_gain_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_gain(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_gain)
  return _internal_para_gain(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_gain(int index, double value) {
  para_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_gain)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_gain(double value) {
  para_gain_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_gain(double value) {
  _internal_add_para_gain(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_gain() const {
  return para_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_gain() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_gain)
  return _internal_para_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_gain() {
  return &para_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_gain() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_gain)
  return _internal_mutable_para_gain();
}

// repeated double para_pd = 10;
inline int USIM_SonarDetectInfo_Proto::_internal_para_pd_size() const {
  return para_pd_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_pd_size() const {
  return _internal_para_pd_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_pd() {
  para_pd_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_pd(int index) const {
  return para_pd_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_pd(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_pd)
  return _internal_para_pd(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_pd(int index, double value) {
  para_pd_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_pd)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_pd(double value) {
  para_pd_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_pd(double value) {
  _internal_add_para_pd(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_pd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_pd() const {
  return para_pd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_pd() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_pd)
  return _internal_para_pd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_pd() {
  return &para_pd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_pd() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_pd)
  return _internal_mutable_para_pd();
}

// repeated double para_tlt = 11;
inline int USIM_SonarDetectInfo_Proto::_internal_para_tlt_size() const {
  return para_tlt_.size();
}
inline int USIM_SonarDetectInfo_Proto::para_tlt_size() const {
  return _internal_para_tlt_size();
}
inline void USIM_SonarDetectInfo_Proto::clear_para_tlt() {
  para_tlt_.Clear();
}
inline double USIM_SonarDetectInfo_Proto::_internal_para_tlt(int index) const {
  return para_tlt_.Get(index);
}
inline double USIM_SonarDetectInfo_Proto::para_tlt(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonarDetectInfo_Proto.para_tlt)
  return _internal_para_tlt(index);
}
inline void USIM_SonarDetectInfo_Proto::set_para_tlt(int index, double value) {
  para_tlt_.Set(index, value);
  // @@protoc_insertion_point(field_set:USIM_SonarDetectInfo_Proto.para_tlt)
}
inline void USIM_SonarDetectInfo_Proto::_internal_add_para_tlt(double value) {
  para_tlt_.Add(value);
}
inline void USIM_SonarDetectInfo_Proto::add_para_tlt(double value) {
  _internal_add_para_tlt(value);
  // @@protoc_insertion_point(field_add:USIM_SonarDetectInfo_Proto.para_tlt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::_internal_para_tlt() const {
  return para_tlt_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USIM_SonarDetectInfo_Proto::para_tlt() const {
  // @@protoc_insertion_point(field_list:USIM_SonarDetectInfo_Proto.para_tlt)
  return _internal_para_tlt();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::_internal_mutable_para_tlt() {
  return &para_tlt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USIM_SonarDetectInfo_Proto::mutable_para_tlt() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonarDetectInfo_Proto.para_tlt)
  return _internal_mutable_para_tlt();
}

// -------------------------------------------------------------------

// USIM_SonobouyDetectInfo_Proto

// repeated .USIM_SonarDetectInfo_Proto para_DetectInfo = 1;
inline int USIM_SonobouyDetectInfo_Proto::_internal_para_detectinfo_size() const {
  return para_detectinfo_.size();
}
inline int USIM_SonobouyDetectInfo_Proto::para_detectinfo_size() const {
  return _internal_para_detectinfo_size();
}
inline void USIM_SonobouyDetectInfo_Proto::clear_para_detectinfo() {
  para_detectinfo_.Clear();
}
inline ::USIM_SonarDetectInfo_Proto* USIM_SonobouyDetectInfo_Proto::mutable_para_detectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_SonobouyDetectInfo_Proto.para_DetectInfo)
  return para_detectinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_SonarDetectInfo_Proto >*
USIM_SonobouyDetectInfo_Proto::mutable_para_detectinfo() {
  // @@protoc_insertion_point(field_mutable_list:USIM_SonobouyDetectInfo_Proto.para_DetectInfo)
  return &para_detectinfo_;
}
inline const ::USIM_SonarDetectInfo_Proto& USIM_SonobouyDetectInfo_Proto::_internal_para_detectinfo(int index) const {
  return para_detectinfo_.Get(index);
}
inline const ::USIM_SonarDetectInfo_Proto& USIM_SonobouyDetectInfo_Proto::para_detectinfo(int index) const {
  // @@protoc_insertion_point(field_get:USIM_SonobouyDetectInfo_Proto.para_DetectInfo)
  return _internal_para_detectinfo(index);
}
inline ::USIM_SonarDetectInfo_Proto* USIM_SonobouyDetectInfo_Proto::_internal_add_para_detectinfo() {
  return para_detectinfo_.Add();
}
inline ::USIM_SonarDetectInfo_Proto* USIM_SonobouyDetectInfo_Proto::add_para_detectinfo() {
  // @@protoc_insertion_point(field_add:USIM_SonobouyDetectInfo_Proto.para_DetectInfo)
  return _internal_add_para_detectinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_SonarDetectInfo_Proto >&
USIM_SonobouyDetectInfo_Proto::para_detectinfo() const {
  // @@protoc_insertion_point(field_list:USIM_SonobouyDetectInfo_Proto.para_DetectInfo)
  return para_detectinfo_;
}

// -------------------------------------------------------------------

// USIM_ChargeInfo_Proto

// double dfSimTime = 1;
inline void USIM_ChargeInfo_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_ChargeInfo_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_ChargeInfo_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_ChargeInfo_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_ChargeInfo_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_ChargeInfo_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_ChargeInfo_Proto.dfSimTime)
}

// uint32 uID = 2;
inline void USIM_ChargeInfo_Proto::clear_uid() {
  uid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ChargeInfo_Proto::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_ChargeInfo_Proto::uid() const {
  // @@protoc_insertion_point(field_get:USIM_ChargeInfo_Proto.uID)
  return _internal_uid();
}
inline void USIM_ChargeInfo_Proto::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uid_ = value;
}
inline void USIM_ChargeInfo_Proto::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:USIM_ChargeInfo_Proto.uID)
}

// bytes uTargetName = 3;
inline void USIM_ChargeInfo_Proto::clear_utargetname() {
  utargetname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_ChargeInfo_Proto::utargetname() const {
  // @@protoc_insertion_point(field_get:USIM_ChargeInfo_Proto.uTargetName)
  return _internal_utargetname();
}
inline void USIM_ChargeInfo_Proto::set_utargetname(const std::string& value) {
  _internal_set_utargetname(value);
  // @@protoc_insertion_point(field_set:USIM_ChargeInfo_Proto.uTargetName)
}
inline std::string* USIM_ChargeInfo_Proto::mutable_utargetname() {
  // @@protoc_insertion_point(field_mutable:USIM_ChargeInfo_Proto.uTargetName)
  return _internal_mutable_utargetname();
}
inline const std::string& USIM_ChargeInfo_Proto::_internal_utargetname() const {
  return utargetname_.Get();
}
inline void USIM_ChargeInfo_Proto::_internal_set_utargetname(const std::string& value) {
  
  utargetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_ChargeInfo_Proto::set_utargetname(std::string&& value) {
  
  utargetname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_ChargeInfo_Proto.uTargetName)
}
inline void USIM_ChargeInfo_Proto::set_utargetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  utargetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_ChargeInfo_Proto.uTargetName)
}
inline void USIM_ChargeInfo_Proto::set_utargetname(const void* value,
    size_t size) {
  
  utargetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_ChargeInfo_Proto.uTargetName)
}
inline std::string* USIM_ChargeInfo_Proto::_internal_mutable_utargetname() {
  
  return utargetname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_ChargeInfo_Proto::release_utargetname() {
  // @@protoc_insertion_point(field_release:USIM_ChargeInfo_Proto.uTargetName)
  return utargetname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_ChargeInfo_Proto::set_allocated_utargetname(std::string* utargetname) {
  if (utargetname != nullptr) {
    
  } else {
    
  }
  utargetname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), utargetname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_ChargeInfo_Proto.uTargetName)
}
inline std::string* USIM_ChargeInfo_Proto::unsafe_arena_release_utargetname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_ChargeInfo_Proto.uTargetName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return utargetname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_ChargeInfo_Proto::unsafe_arena_set_allocated_utargetname(
    std::string* utargetname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (utargetname != nullptr) {
    
  } else {
    
  }
  utargetname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      utargetname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_ChargeInfo_Proto.uTargetName)
}

// float dfcharge_Percent = 4;
inline void USIM_ChargeInfo_Proto::clear_dfcharge_percent() {
  dfcharge_percent_ = 0;
}
inline float USIM_ChargeInfo_Proto::_internal_dfcharge_percent() const {
  return dfcharge_percent_;
}
inline float USIM_ChargeInfo_Proto::dfcharge_percent() const {
  // @@protoc_insertion_point(field_get:USIM_ChargeInfo_Proto.dfcharge_Percent)
  return _internal_dfcharge_percent();
}
inline void USIM_ChargeInfo_Proto::_internal_set_dfcharge_percent(float value) {
  
  dfcharge_percent_ = value;
}
inline void USIM_ChargeInfo_Proto::set_dfcharge_percent(float value) {
  _internal_set_dfcharge_percent(value);
  // @@protoc_insertion_point(field_set:USIM_ChargeInfo_Proto.dfcharge_Percent)
}

// -------------------------------------------------------------------

// USIM_MSLng_Lat_Proto

// double dfLon = 1;
inline void USIM_MSLng_Lat_Proto::clear_dflon() {
  dflon_ = 0;
}
inline double USIM_MSLng_Lat_Proto::_internal_dflon() const {
  return dflon_;
}
inline double USIM_MSLng_Lat_Proto::dflon() const {
  // @@protoc_insertion_point(field_get:USIM_MSLng_Lat_Proto.dfLon)
  return _internal_dflon();
}
inline void USIM_MSLng_Lat_Proto::_internal_set_dflon(double value) {
  
  dflon_ = value;
}
inline void USIM_MSLng_Lat_Proto::set_dflon(double value) {
  _internal_set_dflon(value);
  // @@protoc_insertion_point(field_set:USIM_MSLng_Lat_Proto.dfLon)
}

// double dfLat = 2;
inline void USIM_MSLng_Lat_Proto::clear_dflat() {
  dflat_ = 0;
}
inline double USIM_MSLng_Lat_Proto::_internal_dflat() const {
  return dflat_;
}
inline double USIM_MSLng_Lat_Proto::dflat() const {
  // @@protoc_insertion_point(field_get:USIM_MSLng_Lat_Proto.dfLat)
  return _internal_dflat();
}
inline void USIM_MSLng_Lat_Proto::_internal_set_dflat(double value) {
  
  dflat_ = value;
}
inline void USIM_MSLng_Lat_Proto::set_dflat(double value) {
  _internal_set_dflat(value);
  // @@protoc_insertion_point(field_set:USIM_MSLng_Lat_Proto.dfLat)
}

// double dfAlt = 3;
inline void USIM_MSLng_Lat_Proto::clear_dfalt() {
  dfalt_ = 0;
}
inline double USIM_MSLng_Lat_Proto::_internal_dfalt() const {
  return dfalt_;
}
inline double USIM_MSLng_Lat_Proto::dfalt() const {
  // @@protoc_insertion_point(field_get:USIM_MSLng_Lat_Proto.dfAlt)
  return _internal_dfalt();
}
inline void USIM_MSLng_Lat_Proto::_internal_set_dfalt(double value) {
  
  dfalt_ = value;
}
inline void USIM_MSLng_Lat_Proto::set_dfalt(double value) {
  _internal_set_dfalt(value);
  // @@protoc_insertion_point(field_set:USIM_MSLng_Lat_Proto.dfAlt)
}

// float fSpeed = 4;
inline void USIM_MSLng_Lat_Proto::clear_fspeed() {
  fspeed_ = 0;
}
inline float USIM_MSLng_Lat_Proto::_internal_fspeed() const {
  return fspeed_;
}
inline float USIM_MSLng_Lat_Proto::fspeed() const {
  // @@protoc_insertion_point(field_get:USIM_MSLng_Lat_Proto.fSpeed)
  return _internal_fspeed();
}
inline void USIM_MSLng_Lat_Proto::_internal_set_fspeed(float value) {
  
  fspeed_ = value;
}
inline void USIM_MSLng_Lat_Proto::set_fspeed(float value) {
  _internal_set_fspeed(value);
  // @@protoc_insertion_point(field_set:USIM_MSLng_Lat_Proto.fSpeed)
}

// float fPause = 5;
inline void USIM_MSLng_Lat_Proto::clear_fpause() {
  fpause_ = 0;
}
inline float USIM_MSLng_Lat_Proto::_internal_fpause() const {
  return fpause_;
}
inline float USIM_MSLng_Lat_Proto::fpause() const {
  // @@protoc_insertion_point(field_get:USIM_MSLng_Lat_Proto.fPause)
  return _internal_fpause();
}
inline void USIM_MSLng_Lat_Proto::_internal_set_fpause(float value) {
  
  fpause_ = value;
}
inline void USIM_MSLng_Lat_Proto::set_fpause(float value) {
  _internal_set_fpause(value);
  // @@protoc_insertion_point(field_set:USIM_MSLng_Lat_Proto.fPause)
}

// -------------------------------------------------------------------

// USIM_TrackAreaInfo_Proto

// bytes name = 1;
inline void USIM_TrackAreaInfo_Proto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_TrackAreaInfo_Proto::name() const {
  // @@protoc_insertion_point(field_get:USIM_TrackAreaInfo_Proto.name)
  return _internal_name();
}
inline void USIM_TrackAreaInfo_Proto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:USIM_TrackAreaInfo_Proto.name)
}
inline std::string* USIM_TrackAreaInfo_Proto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:USIM_TrackAreaInfo_Proto.name)
  return _internal_mutable_name();
}
inline const std::string& USIM_TrackAreaInfo_Proto::_internal_name() const {
  return name_.Get();
}
inline void USIM_TrackAreaInfo_Proto::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_TrackAreaInfo_Proto::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_TrackAreaInfo_Proto.name)
}
inline void USIM_TrackAreaInfo_Proto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_TrackAreaInfo_Proto.name)
}
inline void USIM_TrackAreaInfo_Proto::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_TrackAreaInfo_Proto.name)
}
inline std::string* USIM_TrackAreaInfo_Proto::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_TrackAreaInfo_Proto::release_name() {
  // @@protoc_insertion_point(field_release:USIM_TrackAreaInfo_Proto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_TrackAreaInfo_Proto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_TrackAreaInfo_Proto.name)
}
inline std::string* USIM_TrackAreaInfo_Proto::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_TrackAreaInfo_Proto.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_TrackAreaInfo_Proto::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_TrackAreaInfo_Proto.name)
}

// uint32 iType = 2;
inline void USIM_TrackAreaInfo_Proto::clear_itype() {
  itype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TrackAreaInfo_Proto::_internal_itype() const {
  return itype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TrackAreaInfo_Proto::itype() const {
  // @@protoc_insertion_point(field_get:USIM_TrackAreaInfo_Proto.iType)
  return _internal_itype();
}
inline void USIM_TrackAreaInfo_Proto::_internal_set_itype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  itype_ = value;
}
inline void USIM_TrackAreaInfo_Proto::set_itype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_itype(value);
  // @@protoc_insertion_point(field_set:USIM_TrackAreaInfo_Proto.iType)
}

// uint32 iAlliance = 3;
inline void USIM_TrackAreaInfo_Proto::clear_ialliance() {
  ialliance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TrackAreaInfo_Proto::_internal_ialliance() const {
  return ialliance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TrackAreaInfo_Proto::ialliance() const {
  // @@protoc_insertion_point(field_get:USIM_TrackAreaInfo_Proto.iAlliance)
  return _internal_ialliance();
}
inline void USIM_TrackAreaInfo_Proto::_internal_set_ialliance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ialliance_ = value;
}
inline void USIM_TrackAreaInfo_Proto::set_ialliance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ialliance(value);
  // @@protoc_insertion_point(field_set:USIM_TrackAreaInfo_Proto.iAlliance)
}

// repeated .USIM_MSLng_Lat_Proto vecSPointList = 4;
inline int USIM_TrackAreaInfo_Proto::_internal_vecspointlist_size() const {
  return vecspointlist_.size();
}
inline int USIM_TrackAreaInfo_Proto::vecspointlist_size() const {
  return _internal_vecspointlist_size();
}
inline void USIM_TrackAreaInfo_Proto::clear_vecspointlist() {
  vecspointlist_.Clear();
}
inline ::USIM_MSLng_Lat_Proto* USIM_TrackAreaInfo_Proto::mutable_vecspointlist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_TrackAreaInfo_Proto.vecSPointList)
  return vecspointlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_MSLng_Lat_Proto >*
USIM_TrackAreaInfo_Proto::mutable_vecspointlist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_TrackAreaInfo_Proto.vecSPointList)
  return &vecspointlist_;
}
inline const ::USIM_MSLng_Lat_Proto& USIM_TrackAreaInfo_Proto::_internal_vecspointlist(int index) const {
  return vecspointlist_.Get(index);
}
inline const ::USIM_MSLng_Lat_Proto& USIM_TrackAreaInfo_Proto::vecspointlist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_TrackAreaInfo_Proto.vecSPointList)
  return _internal_vecspointlist(index);
}
inline ::USIM_MSLng_Lat_Proto* USIM_TrackAreaInfo_Proto::_internal_add_vecspointlist() {
  return vecspointlist_.Add();
}
inline ::USIM_MSLng_Lat_Proto* USIM_TrackAreaInfo_Proto::add_vecspointlist() {
  // @@protoc_insertion_point(field_add:USIM_TrackAreaInfo_Proto.vecSPointList)
  return _internal_add_vecspointlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_MSLng_Lat_Proto >&
USIM_TrackAreaInfo_Proto::vecspointlist() const {
  // @@protoc_insertion_point(field_list:USIM_TrackAreaInfo_Proto.vecSPointList)
  return vecspointlist_;
}

// -------------------------------------------------------------------

// USIM_UUVStateMessage_Proto

// double dfSimTime = 1;
inline void USIM_UUVStateMessage_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_UUVStateMessage_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_UUVStateMessage_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_UUVStateMessage_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_UUVStateMessage_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_UUVStateMessage_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_UUVStateMessage_Proto.dfSimTime)
}

// uint32 UUVID = 2;
inline void USIM_UUVStateMessage_Proto::clear_uuvid() {
  uuvid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_UUVStateMessage_Proto::_internal_uuvid() const {
  return uuvid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_UUVStateMessage_Proto::uuvid() const {
  // @@protoc_insertion_point(field_get:USIM_UUVStateMessage_Proto.UUVID)
  return _internal_uuvid();
}
inline void USIM_UUVStateMessage_Proto::_internal_set_uuvid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  uuvid_ = value;
}
inline void USIM_UUVStateMessage_Proto::set_uuvid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uuvid(value);
  // @@protoc_insertion_point(field_set:USIM_UUVStateMessage_Proto.UUVID)
}

// uint32 state = 3;
inline void USIM_UUVStateMessage_Proto::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_UUVStateMessage_Proto::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_UUVStateMessage_Proto::state() const {
  // @@protoc_insertion_point(field_get:USIM_UUVStateMessage_Proto.state)
  return _internal_state();
}
inline void USIM_UUVStateMessage_Proto::_internal_set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
}
inline void USIM_UUVStateMessage_Proto::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:USIM_UUVStateMessage_Proto.state)
}

// -------------------------------------------------------------------

// USIM_TransferEquip_Proto

// bytes EquipType = 1;
inline void USIM_TransferEquip_Proto::clear_equiptype() {
  equiptype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_TransferEquip_Proto::equiptype() const {
  // @@protoc_insertion_point(field_get:USIM_TransferEquip_Proto.EquipType)
  return _internal_equiptype();
}
inline void USIM_TransferEquip_Proto::set_equiptype(const std::string& value) {
  _internal_set_equiptype(value);
  // @@protoc_insertion_point(field_set:USIM_TransferEquip_Proto.EquipType)
}
inline std::string* USIM_TransferEquip_Proto::mutable_equiptype() {
  // @@protoc_insertion_point(field_mutable:USIM_TransferEquip_Proto.EquipType)
  return _internal_mutable_equiptype();
}
inline const std::string& USIM_TransferEquip_Proto::_internal_equiptype() const {
  return equiptype_.Get();
}
inline void USIM_TransferEquip_Proto::_internal_set_equiptype(const std::string& value) {
  
  equiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_TransferEquip_Proto::set_equiptype(std::string&& value) {
  
  equiptype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_TransferEquip_Proto.EquipType)
}
inline void USIM_TransferEquip_Proto::set_equiptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  equiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_TransferEquip_Proto.EquipType)
}
inline void USIM_TransferEquip_Proto::set_equiptype(const void* value,
    size_t size) {
  
  equiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_TransferEquip_Proto.EquipType)
}
inline std::string* USIM_TransferEquip_Proto::_internal_mutable_equiptype() {
  
  return equiptype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_TransferEquip_Proto::release_equiptype() {
  // @@protoc_insertion_point(field_release:USIM_TransferEquip_Proto.EquipType)
  return equiptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_TransferEquip_Proto::set_allocated_equiptype(std::string* equiptype) {
  if (equiptype != nullptr) {
    
  } else {
    
  }
  equiptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equiptype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_TransferEquip_Proto.EquipType)
}
inline std::string* USIM_TransferEquip_Proto::unsafe_arena_release_equiptype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_TransferEquip_Proto.EquipType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return equiptype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_TransferEquip_Proto::unsafe_arena_set_allocated_equiptype(
    std::string* equiptype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (equiptype != nullptr) {
    
  } else {
    
  }
  equiptype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      equiptype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_TransferEquip_Proto.EquipType)
}

// uint32 EquipNum = 2;
inline void USIM_TransferEquip_Proto::clear_equipnum() {
  equipnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TransferEquip_Proto::_internal_equipnum() const {
  return equipnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_TransferEquip_Proto::equipnum() const {
  // @@protoc_insertion_point(field_get:USIM_TransferEquip_Proto.EquipNum)
  return _internal_equipnum();
}
inline void USIM_TransferEquip_Proto::_internal_set_equipnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  equipnum_ = value;
}
inline void USIM_TransferEquip_Proto::set_equipnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_equipnum(value);
  // @@protoc_insertion_point(field_set:USIM_TransferEquip_Proto.EquipNum)
}

// -------------------------------------------------------------------

// USIM_AMPHELITRANSFER_Proto

// double dfSimTime = 1;
inline void USIM_AMPHELITRANSFER_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AMPHELITRANSFER_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AMPHELITRANSFER_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AMPHELITRANSFER_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.dfSimTime)
}

// bytes transportAsset = 2;
inline void USIM_AMPHELITRANSFER_Proto::clear_transportasset() {
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::transportasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.transportAsset)
  return _internal_transportasset();
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportasset(const std::string& value) {
  _internal_set_transportasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.transportAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::mutable_transportasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.transportAsset)
  return _internal_mutable_transportasset();
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::_internal_transportasset() const {
  return transportasset_.Get();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_transportasset(const std::string& value) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportasset(std::string&& value) {
  
  transportasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPHELITRANSFER_Proto.transportAsset)
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPHELITRANSFER_Proto.transportAsset)
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportasset(const void* value,
    size_t size) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPHELITRANSFER_Proto.transportAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::_internal_mutable_transportasset() {
  
  return transportasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPHELITRANSFER_Proto::release_transportasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPHELITRANSFER_Proto.transportAsset)
  return transportasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_allocated_transportasset(std::string* transportasset) {
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPHELITRANSFER_Proto.transportAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::unsafe_arena_release_transportasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPHELITRANSFER_Proto.transportAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::unsafe_arena_set_allocated_transportasset(
    std::string* transportasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPHELITRANSFER_Proto.transportAsset)
}

// bytes transportAssetType = 3;
inline void USIM_AMPHELITRANSFER_Proto::clear_transportassettype() {
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::transportassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.transportAssetType)
  return _internal_transportassettype();
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportassettype(const std::string& value) {
  _internal_set_transportassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::mutable_transportassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.transportAssetType)
  return _internal_mutable_transportassettype();
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::_internal_transportassettype() const {
  return transportassettype_.Get();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_transportassettype(const std::string& value) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportassettype(std::string&& value) {
  
  transportassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}
inline void USIM_AMPHELITRANSFER_Proto::set_transportassettype(const void* value,
    size_t size) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::_internal_mutable_transportassettype() {
  
  return transportassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPHELITRANSFER_Proto::release_transportassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPHELITRANSFER_Proto.transportAssetType)
  return transportassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_allocated_transportassettype(std::string* transportassettype) {
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::unsafe_arena_release_transportassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPHELITRANSFER_Proto.transportAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::unsafe_arena_set_allocated_transportassettype(
    std::string* transportassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPHELITRANSFER_Proto.transportAssetType)
}

// bytes heliAsset = 4;
inline void USIM_AMPHELITRANSFER_Proto::clear_heliasset() {
  heliasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::heliasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.heliAsset)
  return _internal_heliasset();
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliasset(const std::string& value) {
  _internal_set_heliasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.heliAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::mutable_heliasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.heliAsset)
  return _internal_mutable_heliasset();
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::_internal_heliasset() const {
  return heliasset_.Get();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_heliasset(const std::string& value) {
  
  heliasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliasset(std::string&& value) {
  
  heliasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPHELITRANSFER_Proto.heliAsset)
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  heliasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPHELITRANSFER_Proto.heliAsset)
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliasset(const void* value,
    size_t size) {
  
  heliasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPHELITRANSFER_Proto.heliAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::_internal_mutable_heliasset() {
  
  return heliasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPHELITRANSFER_Proto::release_heliasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPHELITRANSFER_Proto.heliAsset)
  return heliasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_allocated_heliasset(std::string* heliasset) {
  if (heliasset != nullptr) {
    
  } else {
    
  }
  heliasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heliasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPHELITRANSFER_Proto.heliAsset)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::unsafe_arena_release_heliasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPHELITRANSFER_Proto.heliAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return heliasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::unsafe_arena_set_allocated_heliasset(
    std::string* heliasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (heliasset != nullptr) {
    
  } else {
    
  }
  heliasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      heliasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPHELITRANSFER_Proto.heliAsset)
}

// bytes heliAssetType = 5;
inline void USIM_AMPHELITRANSFER_Proto::clear_heliassettype() {
  heliassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::heliassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.heliAssetType)
  return _internal_heliassettype();
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliassettype(const std::string& value) {
  _internal_set_heliassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::mutable_heliassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.heliAssetType)
  return _internal_mutable_heliassettype();
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::_internal_heliassettype() const {
  return heliassettype_.Get();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_heliassettype(const std::string& value) {
  
  heliassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliassettype(std::string&& value) {
  
  heliassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  heliassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}
inline void USIM_AMPHELITRANSFER_Proto::set_heliassettype(const void* value,
    size_t size) {
  
  heliassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::_internal_mutable_heliassettype() {
  
  return heliassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPHELITRANSFER_Proto::release_heliassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPHELITRANSFER_Proto.heliAssetType)
  return heliassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_allocated_heliassettype(std::string* heliassettype) {
  if (heliassettype != nullptr) {
    
  } else {
    
  }
  heliassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heliassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::unsafe_arena_release_heliassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPHELITRANSFER_Proto.heliAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return heliassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::unsafe_arena_set_allocated_heliassettype(
    std::string* heliassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (heliassettype != nullptr) {
    
  } else {
    
  }
  heliassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      heliassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPHELITRANSFER_Proto.heliAssetType)
}

// bytes assetFlag = 6;
inline void USIM_AMPHELITRANSFER_Proto::clear_assetflag() {
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::assetflag() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.assetFlag)
  return _internal_assetflag();
}
inline void USIM_AMPHELITRANSFER_Proto::set_assetflag(const std::string& value) {
  _internal_set_assetflag(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.assetFlag)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::mutable_assetflag() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.assetFlag)
  return _internal_mutable_assetflag();
}
inline const std::string& USIM_AMPHELITRANSFER_Proto::_internal_assetflag() const {
  return assetflag_.Get();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_assetflag(const std::string& value) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_assetflag(std::string&& value) {
  
  assetflag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPHELITRANSFER_Proto.assetFlag)
}
inline void USIM_AMPHELITRANSFER_Proto::set_assetflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPHELITRANSFER_Proto.assetFlag)
}
inline void USIM_AMPHELITRANSFER_Proto::set_assetflag(const void* value,
    size_t size) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPHELITRANSFER_Proto.assetFlag)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::_internal_mutable_assetflag() {
  
  return assetflag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPHELITRANSFER_Proto::release_assetflag() {
  // @@protoc_insertion_point(field_release:USIM_AMPHELITRANSFER_Proto.assetFlag)
  return assetflag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::set_allocated_assetflag(std::string* assetflag) {
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetflag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPHELITRANSFER_Proto.assetFlag)
}
inline std::string* USIM_AMPHELITRANSFER_Proto::unsafe_arena_release_assetflag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPHELITRANSFER_Proto.assetFlag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assetflag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPHELITRANSFER_Proto::unsafe_arena_set_allocated_assetflag(
    std::string* assetflag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assetflag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPHELITRANSFER_Proto.assetFlag)
}

// uint32 iStaffNum = 7;
inline void USIM_AMPHELITRANSFER_Proto::clear_istaffnum() {
  istaffnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPHELITRANSFER_Proto::_internal_istaffnum() const {
  return istaffnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPHELITRANSFER_Proto::istaffnum() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.iStaffNum)
  return _internal_istaffnum();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_istaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  istaffnum_ = value;
}
inline void USIM_AMPHELITRANSFER_Proto::set_istaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_istaffnum(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.iStaffNum)
}

// repeated .USIM_TransferEquip_Proto EquipList = 8;
inline int USIM_AMPHELITRANSFER_Proto::_internal_equiplist_size() const {
  return equiplist_.size();
}
inline int USIM_AMPHELITRANSFER_Proto::equiplist_size() const {
  return _internal_equiplist_size();
}
inline void USIM_AMPHELITRANSFER_Proto::clear_equiplist() {
  equiplist_.Clear();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPHELITRANSFER_Proto::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_AMPHELITRANSFER_Proto.EquipList)
  return equiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
USIM_AMPHELITRANSFER_Proto::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_AMPHELITRANSFER_Proto.EquipList)
  return &equiplist_;
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPHELITRANSFER_Proto::_internal_equiplist(int index) const {
  return equiplist_.Get(index);
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPHELITRANSFER_Proto::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.EquipList)
  return _internal_equiplist(index);
}
inline ::USIM_TransferEquip_Proto* USIM_AMPHELITRANSFER_Proto::_internal_add_equiplist() {
  return equiplist_.Add();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPHELITRANSFER_Proto::add_equiplist() {
  // @@protoc_insertion_point(field_add:USIM_AMPHELITRANSFER_Proto.EquipList)
  return _internal_add_equiplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
USIM_AMPHELITRANSFER_Proto::equiplist() const {
  // @@protoc_insertion_point(field_list:USIM_AMPHELITRANSFER_Proto.EquipList)
  return equiplist_;
}

// double fDamageLevel = 9;
inline void USIM_AMPHELITRANSFER_Proto::clear_fdamagelevel() {
  fdamagelevel_ = 0;
}
inline double USIM_AMPHELITRANSFER_Proto::_internal_fdamagelevel() const {
  return fdamagelevel_;
}
inline double USIM_AMPHELITRANSFER_Proto::fdamagelevel() const {
  // @@protoc_insertion_point(field_get:USIM_AMPHELITRANSFER_Proto.fDamageLevel)
  return _internal_fdamagelevel();
}
inline void USIM_AMPHELITRANSFER_Proto::_internal_set_fdamagelevel(double value) {
  
  fdamagelevel_ = value;
}
inline void USIM_AMPHELITRANSFER_Proto::set_fdamagelevel(double value) {
  _internal_set_fdamagelevel(value);
  // @@protoc_insertion_point(field_set:USIM_AMPHELITRANSFER_Proto.fDamageLevel)
}

// -------------------------------------------------------------------

// USIM_AMPLANDINGUNLOAD_Proto

// double dfSimTime = 1;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AMPLANDINGUNLOAD_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AMPLANDINGUNLOAD_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.dfSimTime)
}

// bytes unloadAsset = 2;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_unloadasset() {
  unloadasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::unloadasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
  return _internal_unloadasset();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadasset(const std::string& value) {
  _internal_set_unloadasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::mutable_unloadasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
  return _internal_mutable_unloadasset();
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::_internal_unloadasset() const {
  return unloadasset_.Get();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_unloadasset(const std::string& value) {
  
  unloadasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadasset(std::string&& value) {
  
  unloadasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unloadasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadasset(const void* value,
    size_t size) {
  
  unloadasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::_internal_mutable_unloadasset() {
  
  return unloadasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::release_unloadasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
  return unloadasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_allocated_unloadasset(std::string* unloadasset) {
  if (unloadasset != nullptr) {
    
  } else {
    
  }
  unloadasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unloadasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_release_unloadasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return unloadasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_set_allocated_unloadasset(
    std::string* unloadasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unloadasset != nullptr) {
    
  } else {
    
  }
  unloadasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unloadasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.unloadAsset)
}

// bytes unloadAssetType = 3;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_unloadassettype() {
  unloadassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::unloadassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
  return _internal_unloadassettype();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadassettype(const std::string& value) {
  _internal_set_unloadassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::mutable_unloadassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
  return _internal_mutable_unloadassettype();
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::_internal_unloadassettype() const {
  return unloadassettype_.Get();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_unloadassettype(const std::string& value) {
  
  unloadassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadassettype(std::string&& value) {
  
  unloadassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unloadassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_unloadassettype(const void* value,
    size_t size) {
  
  unloadassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::_internal_mutable_unloadassettype() {
  
  return unloadassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::release_unloadassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
  return unloadassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_allocated_unloadassettype(std::string* unloadassettype) {
  if (unloadassettype != nullptr) {
    
  } else {
    
  }
  unloadassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unloadassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_release_unloadassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return unloadassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_set_allocated_unloadassettype(
    std::string* unloadassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unloadassettype != nullptr) {
    
  } else {
    
  }
  unloadassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unloadassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.unloadAssetType)
}

// bytes assetFlag = 4;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_assetflag() {
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::assetflag() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
  return _internal_assetflag();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_assetflag(const std::string& value) {
  _internal_set_assetflag(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::mutable_assetflag() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
  return _internal_mutable_assetflag();
}
inline const std::string& USIM_AMPLANDINGUNLOAD_Proto::_internal_assetflag() const {
  return assetflag_.Get();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_assetflag(const std::string& value) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_assetflag(std::string&& value) {
  
  assetflag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_assetflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_assetflag(const void* value,
    size_t size) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::_internal_mutable_assetflag() {
  
  return assetflag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::release_assetflag() {
  // @@protoc_insertion_point(field_release:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
  return assetflag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_allocated_assetflag(std::string* assetflag) {
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetflag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}
inline std::string* USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_release_assetflag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assetflag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPLANDINGUNLOAD_Proto::unsafe_arena_set_allocated_assetflag(
    std::string* assetflag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assetflag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPLANDINGUNLOAD_Proto.assetFlag)
}

// uint32 inloadStaffNum = 5;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_inloadstaffnum() {
  inloadstaffnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPLANDINGUNLOAD_Proto::_internal_inloadstaffnum() const {
  return inloadstaffnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPLANDINGUNLOAD_Proto::inloadstaffnum() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.inloadStaffNum)
  return _internal_inloadstaffnum();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_inloadstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  inloadstaffnum_ = value;
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_inloadstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inloadstaffnum(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.inloadStaffNum)
}

// repeated .USIM_TransferEquip_Proto EquipList = 6;
inline int USIM_AMPLANDINGUNLOAD_Proto::_internal_equiplist_size() const {
  return equiplist_.size();
}
inline int USIM_AMPLANDINGUNLOAD_Proto::equiplist_size() const {
  return _internal_equiplist_size();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_equiplist() {
  equiplist_.Clear();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPLANDINGUNLOAD_Proto::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_AMPLANDINGUNLOAD_Proto.EquipList)
  return equiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
USIM_AMPLANDINGUNLOAD_Proto::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_AMPLANDINGUNLOAD_Proto.EquipList)
  return &equiplist_;
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPLANDINGUNLOAD_Proto::_internal_equiplist(int index) const {
  return equiplist_.Get(index);
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPLANDINGUNLOAD_Proto::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.EquipList)
  return _internal_equiplist(index);
}
inline ::USIM_TransferEquip_Proto* USIM_AMPLANDINGUNLOAD_Proto::_internal_add_equiplist() {
  return equiplist_.Add();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPLANDINGUNLOAD_Proto::add_equiplist() {
  // @@protoc_insertion_point(field_add:USIM_AMPLANDINGUNLOAD_Proto.EquipList)
  return _internal_add_equiplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
USIM_AMPLANDINGUNLOAD_Proto::equiplist() const {
  // @@protoc_insertion_point(field_list:USIM_AMPLANDINGUNLOAD_Proto.EquipList)
  return equiplist_;
}

// double fDamageLevel = 7;
inline void USIM_AMPLANDINGUNLOAD_Proto::clear_fdamagelevel() {
  fdamagelevel_ = 0;
}
inline double USIM_AMPLANDINGUNLOAD_Proto::_internal_fdamagelevel() const {
  return fdamagelevel_;
}
inline double USIM_AMPLANDINGUNLOAD_Proto::fdamagelevel() const {
  // @@protoc_insertion_point(field_get:USIM_AMPLANDINGUNLOAD_Proto.fDamageLevel)
  return _internal_fdamagelevel();
}
inline void USIM_AMPLANDINGUNLOAD_Proto::_internal_set_fdamagelevel(double value) {
  
  fdamagelevel_ = value;
}
inline void USIM_AMPLANDINGUNLOAD_Proto::set_fdamagelevel(double value) {
  _internal_set_fdamagelevel(value);
  // @@protoc_insertion_point(field_set:USIM_AMPLANDINGUNLOAD_Proto.fDamageLevel)
}

// -------------------------------------------------------------------

// USIM_AMPTRANSFER_Proto

// double dfSimTime = 1;
inline void USIM_AMPTRANSFER_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AMPTRANSFER_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AMPTRANSFER_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AMPTRANSFER_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.dfSimTime)
}

// bytes TransportAsset = 2;
inline void USIM_AMPTRANSFER_Proto::clear_transportasset() {
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPTRANSFER_Proto::transportasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.TransportAsset)
  return _internal_transportasset();
}
inline void USIM_AMPTRANSFER_Proto::set_transportasset(const std::string& value) {
  _internal_set_transportasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.TransportAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::mutable_transportasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.TransportAsset)
  return _internal_mutable_transportasset();
}
inline const std::string& USIM_AMPTRANSFER_Proto::_internal_transportasset() const {
  return transportasset_.Get();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_transportasset(const std::string& value) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_transportasset(std::string&& value) {
  
  transportasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPTRANSFER_Proto.TransportAsset)
}
inline void USIM_AMPTRANSFER_Proto::set_transportasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPTRANSFER_Proto.TransportAsset)
}
inline void USIM_AMPTRANSFER_Proto::set_transportasset(const void* value,
    size_t size) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPTRANSFER_Proto.TransportAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::_internal_mutable_transportasset() {
  
  return transportasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPTRANSFER_Proto::release_transportasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPTRANSFER_Proto.TransportAsset)
  return transportasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_allocated_transportasset(std::string* transportasset) {
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPTRANSFER_Proto.TransportAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::unsafe_arena_release_transportasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPTRANSFER_Proto.TransportAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPTRANSFER_Proto::unsafe_arena_set_allocated_transportasset(
    std::string* transportasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPTRANSFER_Proto.TransportAsset)
}

// bytes TransportAssetType = 3;
inline void USIM_AMPTRANSFER_Proto::clear_transportassettype() {
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPTRANSFER_Proto::transportassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.TransportAssetType)
  return _internal_transportassettype();
}
inline void USIM_AMPTRANSFER_Proto::set_transportassettype(const std::string& value) {
  _internal_set_transportassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.TransportAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::mutable_transportassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.TransportAssetType)
  return _internal_mutable_transportassettype();
}
inline const std::string& USIM_AMPTRANSFER_Proto::_internal_transportassettype() const {
  return transportassettype_.Get();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_transportassettype(const std::string& value) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_transportassettype(std::string&& value) {
  
  transportassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPTRANSFER_Proto.TransportAssetType)
}
inline void USIM_AMPTRANSFER_Proto::set_transportassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPTRANSFER_Proto.TransportAssetType)
}
inline void USIM_AMPTRANSFER_Proto::set_transportassettype(const void* value,
    size_t size) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPTRANSFER_Proto.TransportAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::_internal_mutable_transportassettype() {
  
  return transportassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPTRANSFER_Proto::release_transportassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPTRANSFER_Proto.TransportAssetType)
  return transportassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_allocated_transportassettype(std::string* transportassettype) {
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPTRANSFER_Proto.TransportAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::unsafe_arena_release_transportassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPTRANSFER_Proto.TransportAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPTRANSFER_Proto::unsafe_arena_set_allocated_transportassettype(
    std::string* transportassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPTRANSFER_Proto.TransportAssetType)
}

// bytes SubAsset = 4;
inline void USIM_AMPTRANSFER_Proto::clear_subasset() {
  subasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPTRANSFER_Proto::subasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.SubAsset)
  return _internal_subasset();
}
inline void USIM_AMPTRANSFER_Proto::set_subasset(const std::string& value) {
  _internal_set_subasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.SubAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::mutable_subasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.SubAsset)
  return _internal_mutable_subasset();
}
inline const std::string& USIM_AMPTRANSFER_Proto::_internal_subasset() const {
  return subasset_.Get();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_subasset(const std::string& value) {
  
  subasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_subasset(std::string&& value) {
  
  subasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPTRANSFER_Proto.SubAsset)
}
inline void USIM_AMPTRANSFER_Proto::set_subasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPTRANSFER_Proto.SubAsset)
}
inline void USIM_AMPTRANSFER_Proto::set_subasset(const void* value,
    size_t size) {
  
  subasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPTRANSFER_Proto.SubAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::_internal_mutable_subasset() {
  
  return subasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPTRANSFER_Proto::release_subasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPTRANSFER_Proto.SubAsset)
  return subasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_allocated_subasset(std::string* subasset) {
  if (subasset != nullptr) {
    
  } else {
    
  }
  subasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPTRANSFER_Proto.SubAsset)
}
inline std::string* USIM_AMPTRANSFER_Proto::unsafe_arena_release_subasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPTRANSFER_Proto.SubAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPTRANSFER_Proto::unsafe_arena_set_allocated_subasset(
    std::string* subasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subasset != nullptr) {
    
  } else {
    
  }
  subasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPTRANSFER_Proto.SubAsset)
}

// bytes SubAssetType = 5;
inline void USIM_AMPTRANSFER_Proto::clear_subassettype() {
  subassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPTRANSFER_Proto::subassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.SubAssetType)
  return _internal_subassettype();
}
inline void USIM_AMPTRANSFER_Proto::set_subassettype(const std::string& value) {
  _internal_set_subassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.SubAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::mutable_subassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.SubAssetType)
  return _internal_mutable_subassettype();
}
inline const std::string& USIM_AMPTRANSFER_Proto::_internal_subassettype() const {
  return subassettype_.Get();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_subassettype(const std::string& value) {
  
  subassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_subassettype(std::string&& value) {
  
  subassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPTRANSFER_Proto.SubAssetType)
}
inline void USIM_AMPTRANSFER_Proto::set_subassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPTRANSFER_Proto.SubAssetType)
}
inline void USIM_AMPTRANSFER_Proto::set_subassettype(const void* value,
    size_t size) {
  
  subassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPTRANSFER_Proto.SubAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::_internal_mutable_subassettype() {
  
  return subassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPTRANSFER_Proto::release_subassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPTRANSFER_Proto.SubAssetType)
  return subassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_allocated_subassettype(std::string* subassettype) {
  if (subassettype != nullptr) {
    
  } else {
    
  }
  subassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPTRANSFER_Proto.SubAssetType)
}
inline std::string* USIM_AMPTRANSFER_Proto::unsafe_arena_release_subassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPTRANSFER_Proto.SubAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPTRANSFER_Proto::unsafe_arena_set_allocated_subassettype(
    std::string* subassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subassettype != nullptr) {
    
  } else {
    
  }
  subassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPTRANSFER_Proto.SubAssetType)
}

// bytes AssetFlag = 6;
inline void USIM_AMPTRANSFER_Proto::clear_assetflag() {
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPTRANSFER_Proto::assetflag() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.AssetFlag)
  return _internal_assetflag();
}
inline void USIM_AMPTRANSFER_Proto::set_assetflag(const std::string& value) {
  _internal_set_assetflag(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.AssetFlag)
}
inline std::string* USIM_AMPTRANSFER_Proto::mutable_assetflag() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.AssetFlag)
  return _internal_mutable_assetflag();
}
inline const std::string& USIM_AMPTRANSFER_Proto::_internal_assetflag() const {
  return assetflag_.Get();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_assetflag(const std::string& value) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_assetflag(std::string&& value) {
  
  assetflag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPTRANSFER_Proto.AssetFlag)
}
inline void USIM_AMPTRANSFER_Proto::set_assetflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPTRANSFER_Proto.AssetFlag)
}
inline void USIM_AMPTRANSFER_Proto::set_assetflag(const void* value,
    size_t size) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPTRANSFER_Proto.AssetFlag)
}
inline std::string* USIM_AMPTRANSFER_Proto::_internal_mutable_assetflag() {
  
  return assetflag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPTRANSFER_Proto::release_assetflag() {
  // @@protoc_insertion_point(field_release:USIM_AMPTRANSFER_Proto.AssetFlag)
  return assetflag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPTRANSFER_Proto::set_allocated_assetflag(std::string* assetflag) {
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetflag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPTRANSFER_Proto.AssetFlag)
}
inline std::string* USIM_AMPTRANSFER_Proto::unsafe_arena_release_assetflag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPTRANSFER_Proto.AssetFlag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assetflag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPTRANSFER_Proto::unsafe_arena_set_allocated_assetflag(
    std::string* assetflag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assetflag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPTRANSFER_Proto.AssetFlag)
}

// uint32 TransferStaffNum = 7;
inline void USIM_AMPTRANSFER_Proto::clear_transferstaffnum() {
  transferstaffnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPTRANSFER_Proto::_internal_transferstaffnum() const {
  return transferstaffnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPTRANSFER_Proto::transferstaffnum() const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.TransferStaffNum)
  return _internal_transferstaffnum();
}
inline void USIM_AMPTRANSFER_Proto::_internal_set_transferstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  transferstaffnum_ = value;
}
inline void USIM_AMPTRANSFER_Proto::set_transferstaffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transferstaffnum(value);
  // @@protoc_insertion_point(field_set:USIM_AMPTRANSFER_Proto.TransferStaffNum)
}

// repeated .USIM_TransferEquip_Proto EquipList = 8;
inline int USIM_AMPTRANSFER_Proto::_internal_equiplist_size() const {
  return equiplist_.size();
}
inline int USIM_AMPTRANSFER_Proto::equiplist_size() const {
  return _internal_equiplist_size();
}
inline void USIM_AMPTRANSFER_Proto::clear_equiplist() {
  equiplist_.Clear();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPTRANSFER_Proto::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_AMPTRANSFER_Proto.EquipList)
  return equiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
USIM_AMPTRANSFER_Proto::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_AMPTRANSFER_Proto.EquipList)
  return &equiplist_;
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPTRANSFER_Proto::_internal_equiplist(int index) const {
  return equiplist_.Get(index);
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPTRANSFER_Proto::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_AMPTRANSFER_Proto.EquipList)
  return _internal_equiplist(index);
}
inline ::USIM_TransferEquip_Proto* USIM_AMPTRANSFER_Proto::_internal_add_equiplist() {
  return equiplist_.Add();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPTRANSFER_Proto::add_equiplist() {
  // @@protoc_insertion_point(field_add:USIM_AMPTRANSFER_Proto.EquipList)
  return _internal_add_equiplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
USIM_AMPTRANSFER_Proto::equiplist() const {
  // @@protoc_insertion_point(field_list:USIM_AMPTRANSFER_Proto.EquipList)
  return equiplist_;
}

// -------------------------------------------------------------------

// USIM_AMPFLASHING_Proto

// double dfSimTime = 1;
inline void USIM_AMPFLASHING_Proto::clear_dfsimtime() {
  dfsimtime_ = 0;
}
inline double USIM_AMPFLASHING_Proto::_internal_dfsimtime() const {
  return dfsimtime_;
}
inline double USIM_AMPFLASHING_Proto::dfsimtime() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.dfSimTime)
  return _internal_dfsimtime();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_dfsimtime(double value) {
  
  dfsimtime_ = value;
}
inline void USIM_AMPFLASHING_Proto::set_dfsimtime(double value) {
  _internal_set_dfsimtime(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.dfSimTime)
}

// bytes TransportAsset = 2;
inline void USIM_AMPFLASHING_Proto::clear_transportasset() {
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPFLASHING_Proto::transportasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.TransportAsset)
  return _internal_transportasset();
}
inline void USIM_AMPFLASHING_Proto::set_transportasset(const std::string& value) {
  _internal_set_transportasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.TransportAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::mutable_transportasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.TransportAsset)
  return _internal_mutable_transportasset();
}
inline const std::string& USIM_AMPFLASHING_Proto::_internal_transportasset() const {
  return transportasset_.Get();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_transportasset(const std::string& value) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_transportasset(std::string&& value) {
  
  transportasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPFLASHING_Proto.TransportAsset)
}
inline void USIM_AMPFLASHING_Proto::set_transportasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPFLASHING_Proto.TransportAsset)
}
inline void USIM_AMPFLASHING_Proto::set_transportasset(const void* value,
    size_t size) {
  
  transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPFLASHING_Proto.TransportAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::_internal_mutable_transportasset() {
  
  return transportasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPFLASHING_Proto::release_transportasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPFLASHING_Proto.TransportAsset)
  return transportasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_allocated_transportasset(std::string* transportasset) {
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPFLASHING_Proto.TransportAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::unsafe_arena_release_transportasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPFLASHING_Proto.TransportAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPFLASHING_Proto::unsafe_arena_set_allocated_transportasset(
    std::string* transportasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportasset != nullptr) {
    
  } else {
    
  }
  transportasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPFLASHING_Proto.TransportAsset)
}

// bytes TransportAssetType = 3;
inline void USIM_AMPFLASHING_Proto::clear_transportassettype() {
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPFLASHING_Proto::transportassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.TransportAssetType)
  return _internal_transportassettype();
}
inline void USIM_AMPFLASHING_Proto::set_transportassettype(const std::string& value) {
  _internal_set_transportassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.TransportAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::mutable_transportassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.TransportAssetType)
  return _internal_mutable_transportassettype();
}
inline const std::string& USIM_AMPFLASHING_Proto::_internal_transportassettype() const {
  return transportassettype_.Get();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_transportassettype(const std::string& value) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_transportassettype(std::string&& value) {
  
  transportassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPFLASHING_Proto.TransportAssetType)
}
inline void USIM_AMPFLASHING_Proto::set_transportassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPFLASHING_Proto.TransportAssetType)
}
inline void USIM_AMPFLASHING_Proto::set_transportassettype(const void* value,
    size_t size) {
  
  transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPFLASHING_Proto.TransportAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::_internal_mutable_transportassettype() {
  
  return transportassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPFLASHING_Proto::release_transportassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPFLASHING_Proto.TransportAssetType)
  return transportassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_allocated_transportassettype(std::string* transportassettype) {
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transportassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPFLASHING_Proto.TransportAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::unsafe_arena_release_transportassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPFLASHING_Proto.TransportAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transportassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPFLASHING_Proto::unsafe_arena_set_allocated_transportassettype(
    std::string* transportassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transportassettype != nullptr) {
    
  } else {
    
  }
  transportassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transportassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPFLASHING_Proto.TransportAssetType)
}

// bytes FlashingAsset = 4;
inline void USIM_AMPFLASHING_Proto::clear_flashingasset() {
  flashingasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPFLASHING_Proto::flashingasset() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.FlashingAsset)
  return _internal_flashingasset();
}
inline void USIM_AMPFLASHING_Proto::set_flashingasset(const std::string& value) {
  _internal_set_flashingasset(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.FlashingAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::mutable_flashingasset() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.FlashingAsset)
  return _internal_mutable_flashingasset();
}
inline const std::string& USIM_AMPFLASHING_Proto::_internal_flashingasset() const {
  return flashingasset_.Get();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_flashingasset(const std::string& value) {
  
  flashingasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_flashingasset(std::string&& value) {
  
  flashingasset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPFLASHING_Proto.FlashingAsset)
}
inline void USIM_AMPFLASHING_Proto::set_flashingasset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flashingasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPFLASHING_Proto.FlashingAsset)
}
inline void USIM_AMPFLASHING_Proto::set_flashingasset(const void* value,
    size_t size) {
  
  flashingasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPFLASHING_Proto.FlashingAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::_internal_mutable_flashingasset() {
  
  return flashingasset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPFLASHING_Proto::release_flashingasset() {
  // @@protoc_insertion_point(field_release:USIM_AMPFLASHING_Proto.FlashingAsset)
  return flashingasset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_allocated_flashingasset(std::string* flashingasset) {
  if (flashingasset != nullptr) {
    
  } else {
    
  }
  flashingasset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flashingasset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPFLASHING_Proto.FlashingAsset)
}
inline std::string* USIM_AMPFLASHING_Proto::unsafe_arena_release_flashingasset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPFLASHING_Proto.FlashingAsset)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flashingasset_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPFLASHING_Proto::unsafe_arena_set_allocated_flashingasset(
    std::string* flashingasset) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flashingasset != nullptr) {
    
  } else {
    
  }
  flashingasset_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flashingasset, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPFLASHING_Proto.FlashingAsset)
}

// bytes FlashingAssetType = 5;
inline void USIM_AMPFLASHING_Proto::clear_flashingassettype() {
  flashingassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPFLASHING_Proto::flashingassettype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.FlashingAssetType)
  return _internal_flashingassettype();
}
inline void USIM_AMPFLASHING_Proto::set_flashingassettype(const std::string& value) {
  _internal_set_flashingassettype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.FlashingAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::mutable_flashingassettype() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.FlashingAssetType)
  return _internal_mutable_flashingassettype();
}
inline const std::string& USIM_AMPFLASHING_Proto::_internal_flashingassettype() const {
  return flashingassettype_.Get();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_flashingassettype(const std::string& value) {
  
  flashingassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_flashingassettype(std::string&& value) {
  
  flashingassettype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPFLASHING_Proto.FlashingAssetType)
}
inline void USIM_AMPFLASHING_Proto::set_flashingassettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flashingassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPFLASHING_Proto.FlashingAssetType)
}
inline void USIM_AMPFLASHING_Proto::set_flashingassettype(const void* value,
    size_t size) {
  
  flashingassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPFLASHING_Proto.FlashingAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::_internal_mutable_flashingassettype() {
  
  return flashingassettype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPFLASHING_Proto::release_flashingassettype() {
  // @@protoc_insertion_point(field_release:USIM_AMPFLASHING_Proto.FlashingAssetType)
  return flashingassettype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_allocated_flashingassettype(std::string* flashingassettype) {
  if (flashingassettype != nullptr) {
    
  } else {
    
  }
  flashingassettype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flashingassettype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPFLASHING_Proto.FlashingAssetType)
}
inline std::string* USIM_AMPFLASHING_Proto::unsafe_arena_release_flashingassettype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPFLASHING_Proto.FlashingAssetType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flashingassettype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPFLASHING_Proto::unsafe_arena_set_allocated_flashingassettype(
    std::string* flashingassettype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flashingassettype != nullptr) {
    
  } else {
    
  }
  flashingassettype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flashingassettype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPFLASHING_Proto.FlashingAssetType)
}

// bytes AssetFlag = 6;
inline void USIM_AMPFLASHING_Proto::clear_assetflag() {
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USIM_AMPFLASHING_Proto::assetflag() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.AssetFlag)
  return _internal_assetflag();
}
inline void USIM_AMPFLASHING_Proto::set_assetflag(const std::string& value) {
  _internal_set_assetflag(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.AssetFlag)
}
inline std::string* USIM_AMPFLASHING_Proto::mutable_assetflag() {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.AssetFlag)
  return _internal_mutable_assetflag();
}
inline const std::string& USIM_AMPFLASHING_Proto::_internal_assetflag() const {
  return assetflag_.Get();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_assetflag(const std::string& value) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_assetflag(std::string&& value) {
  
  assetflag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:USIM_AMPFLASHING_Proto.AssetFlag)
}
inline void USIM_AMPFLASHING_Proto::set_assetflag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:USIM_AMPFLASHING_Proto.AssetFlag)
}
inline void USIM_AMPFLASHING_Proto::set_assetflag(const void* value,
    size_t size) {
  
  assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:USIM_AMPFLASHING_Proto.AssetFlag)
}
inline std::string* USIM_AMPFLASHING_Proto::_internal_mutable_assetflag() {
  
  return assetflag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USIM_AMPFLASHING_Proto::release_assetflag() {
  // @@protoc_insertion_point(field_release:USIM_AMPFLASHING_Proto.AssetFlag)
  return assetflag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USIM_AMPFLASHING_Proto::set_allocated_assetflag(std::string* assetflag) {
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetflag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:USIM_AMPFLASHING_Proto.AssetFlag)
}
inline std::string* USIM_AMPFLASHING_Proto::unsafe_arena_release_assetflag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:USIM_AMPFLASHING_Proto.AssetFlag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return assetflag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void USIM_AMPFLASHING_Proto::unsafe_arena_set_allocated_assetflag(
    std::string* assetflag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assetflag != nullptr) {
    
  } else {
    
  }
  assetflag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assetflag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:USIM_AMPFLASHING_Proto.AssetFlag)
}

// uint32 FlashType = 7;
inline void USIM_AMPFLASHING_Proto::clear_flashtype() {
  flashtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPFLASHING_Proto::_internal_flashtype() const {
  return flashtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPFLASHING_Proto::flashtype() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.FlashType)
  return _internal_flashtype();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_flashtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flashtype_ = value;
}
inline void USIM_AMPFLASHING_Proto::set_flashtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flashtype(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.FlashType)
}

// uint32 StaffNum = 8;
inline void USIM_AMPFLASHING_Proto::clear_staffnum() {
  staffnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPFLASHING_Proto::_internal_staffnum() const {
  return staffnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 USIM_AMPFLASHING_Proto::staffnum() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.StaffNum)
  return _internal_staffnum();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_staffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  staffnum_ = value;
}
inline void USIM_AMPFLASHING_Proto::set_staffnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_staffnum(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.StaffNum)
}

// repeated .USIM_TransferEquip_Proto EquipList = 9;
inline int USIM_AMPFLASHING_Proto::_internal_equiplist_size() const {
  return equiplist_.size();
}
inline int USIM_AMPFLASHING_Proto::equiplist_size() const {
  return _internal_equiplist_size();
}
inline void USIM_AMPFLASHING_Proto::clear_equiplist() {
  equiplist_.Clear();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPFLASHING_Proto::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:USIM_AMPFLASHING_Proto.EquipList)
  return equiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >*
USIM_AMPFLASHING_Proto::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:USIM_AMPFLASHING_Proto.EquipList)
  return &equiplist_;
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPFLASHING_Proto::_internal_equiplist(int index) const {
  return equiplist_.Get(index);
}
inline const ::USIM_TransferEquip_Proto& USIM_AMPFLASHING_Proto::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.EquipList)
  return _internal_equiplist(index);
}
inline ::USIM_TransferEquip_Proto* USIM_AMPFLASHING_Proto::_internal_add_equiplist() {
  return equiplist_.Add();
}
inline ::USIM_TransferEquip_Proto* USIM_AMPFLASHING_Proto::add_equiplist() {
  // @@protoc_insertion_point(field_add:USIM_AMPFLASHING_Proto.EquipList)
  return _internal_add_equiplist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::USIM_TransferEquip_Proto >&
USIM_AMPFLASHING_Proto::equiplist() const {
  // @@protoc_insertion_point(field_list:USIM_AMPFLASHING_Proto.EquipList)
  return equiplist_;
}

// double fDamageLevel = 10;
inline void USIM_AMPFLASHING_Proto::clear_fdamagelevel() {
  fdamagelevel_ = 0;
}
inline double USIM_AMPFLASHING_Proto::_internal_fdamagelevel() const {
  return fdamagelevel_;
}
inline double USIM_AMPFLASHING_Proto::fdamagelevel() const {
  // @@protoc_insertion_point(field_get:USIM_AMPFLASHING_Proto.fDamageLevel)
  return _internal_fdamagelevel();
}
inline void USIM_AMPFLASHING_Proto::_internal_set_fdamagelevel(double value) {
  
  fdamagelevel_ = value;
}
inline void USIM_AMPFLASHING_Proto::set_fdamagelevel(double value) {
  _internal_set_fdamagelevel(value);
  // @@protoc_insertion_point(field_set:USIM_AMPFLASHING_Proto.fDamageLevel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::USIM_Alliance_Proto> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::USIM_Alliance_Proto>() {
  return ::USIM_Alliance_Proto_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_USimDataStructm_2eproto
