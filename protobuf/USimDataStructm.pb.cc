// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: USimDataStructm.proto

#include "USimDataStructm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_USimDataStructm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_USimDataStructm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_USimDataStructm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_USimDataStructm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto;
class USIM_TimeStepMessage_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_TimeStepMessage_Proto> _instance;
} _USIM_TimeStepMessage_Proto_default_instance_;
class USIM_SIMINFO_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_SIMINFO_Proto> _instance;
} _USIM_SIMINFO_Proto_default_instance_;
class USIM_CommandStructInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CommandStructInfo_Proto> _instance;
} _USIM_CommandStructInfo_Proto_default_instance_;
class USIM_PlatInfoMessage_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_PlatInfoMessage_Proto> _instance;
} _USIM_PlatInfoMessage_Proto_default_instance_;
class USIM_EquipmentInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_EquipmentInfo_Proto> _instance;
} _USIM_EquipmentInfo_Proto_default_instance_;
class USIM_EquipmentLoadInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_EquipmentLoadInfo_Proto> _instance;
} _USIM_EquipmentLoadInfo_Proto_default_instance_;
class USIM_Detection_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_Detection_Proto> _instance;
} _USIM_Detection_Proto_default_instance_;
class USIM_Fusion_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_Fusion_Proto> _instance;
} _USIM_Fusion_Proto_default_instance_;
class USIM_DetectionEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_DetectionEvent_Proto> _instance;
} _USIM_DetectionEvent_Proto_default_instance_;
class USIM_FusionEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_FusionEvent_Proto> _instance;
} _USIM_FusionEvent_Proto_default_instance_;
class USIM_CommunicationEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CommunicationEvent_Proto> _instance;
} _USIM_CommunicationEvent_Proto_default_instance_;
class USIM_CommandControlEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CommandControlEvent_Proto> _instance;
} _USIM_CommandControlEvent_Proto_default_instance_;
class USIM_WeaponSystemEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_WeaponSystemEvent_Proto> _instance;
} _USIM_WeaponSystemEvent_Proto_default_instance_;
class USIM_WeaponLaunchEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_WeaponLaunchEvent_Proto> _instance;
} _USIM_WeaponLaunchEvent_Proto_default_instance_;
class USIM_DecoyLaunchEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_DecoyLaunchEvent_Proto> _instance;
} _USIM_DecoyLaunchEvent_Proto_default_instance_;
class USIM_ElectronicWarEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_ElectronicWarEvent_Proto> _instance;
} _USIM_ElectronicWarEvent_Proto_default_instance_;
class USIM_SensorStateEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_SensorStateEvent_Proto> _instance;
} _USIM_SensorStateEvent_Proto_default_instance_;
class USIM_BattleResultEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_BattleResultEvent_Proto> _instance;
} _USIM_BattleResultEvent_Proto_default_instance_;
class USIM_DamageEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_DamageEvent_Proto> _instance;
} _USIM_DamageEvent_Proto_default_instance_;
class USIM_LodisticsEvent_ProtpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_LodisticsEvent_Protp> _instance;
} _USIM_LodisticsEvent_Protp_default_instance_;
class USIM_AssociEntityLaunchEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AssociEntityLaunchEvent_Proto> _instance;
} _USIM_AssociEntityLaunchEvent_Proto_default_instance_;
class USIM_AssociEntityRecoveryEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AssociEntityRecoveryEvent_Proto> _instance;
} _USIM_AssociEntityRecoveryEvent_Proto_default_instance_;
class USIM_StartAssetRecoveryEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_StartAssetRecoveryEvent_Proto> _instance;
} _USIM_StartAssetRecoveryEvent_Proto_default_instance_;
class USIM_AircraftTakeoffEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AircraftTakeoffEvent_Proto> _instance;
} _USIM_AircraftTakeoffEvent_Proto_default_instance_;
class USIM_AircraftLandEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AircraftLandEvent_Proto> _instance;
} _USIM_AircraftLandEvent_Proto_default_instance_;
class USIM_AircraftReturnEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AircraftReturnEvent_Proto> _instance;
} _USIM_AircraftReturnEvent_Proto_default_instance_;
class USIM_BuoyReleaseEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_BuoyReleaseEvent_Proto> _instance;
} _USIM_BuoyReleaseEvent_Proto_default_instance_;
class USIM_SonarDropReuseEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_SonarDropReuseEvent_Proto> _instance;
} _USIM_SonarDropReuseEvent_Proto_default_instance_;
class USIM_ForceDeliveryEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_ForceDeliveryEvent_Proto> _instance;
} _USIM_ForceDeliveryEvent_Proto_default_instance_;
class USIM_ForceReusingEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_ForceReusingEvent_Proto> _instance;
} _USIM_ForceReusingEvent_Proto_default_instance_;
class USIM_IssuingTaskAssignment_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_IssuingTaskAssignment_Proto> _instance;
} _USIM_IssuingTaskAssignment_Proto_default_instance_;
class USIM_CommandTaskCompleted_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CommandTaskCompleted_Proto> _instance;
} _USIM_CommandTaskCompleted_Proto_default_instance_;
class USIM_AircraftDeckAbortEvent_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AircraftDeckAbortEvent_Proto> _instance;
} _USIM_AircraftDeckAbortEvent_Proto_default_instance_;
class USIM_DyamicCycle_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_DyamicCycle_Proto> _instance;
} _USIM_DyamicCycle_Proto_default_instance_;
class USIM_WedgeBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_WedgeBeam_Proto> _instance;
} _USIM_WedgeBeam_Proto_default_instance_;
class USIN_SphereBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIN_SphereBeam_Proto> _instance;
} _USIN_SphereBeam_Proto_default_instance_;
class USIM_CircleBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CircleBeam_Proto> _instance;
} _USIM_CircleBeam_Proto_default_instance_;
class USIM_ConeBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_ConeBeam_Proto> _instance;
} _USIM_ConeBeam_Proto_default_instance_;
class USIM_PyramidBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_PyramidBeam_Proto> _instance;
} _USIM_PyramidBeam_Proto_default_instance_;
class USIM_CylinderBeam_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_CylinderBeam_Proto> _instance;
} _USIM_CylinderBeam_Proto_default_instance_;
class USIM_Line_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_Line_Proto> _instance;
} _USIM_Line_Proto_default_instance_;
class USIM_GraphOnoff_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_GraphOnoff_Proto> _instance;
} _USIM_GraphOnoff_Proto_default_instance_;
class USIM_SonarDetectInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_SonarDetectInfo_Proto> _instance;
} _USIM_SonarDetectInfo_Proto_default_instance_;
class USIM_SonobouyDetectInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_SonobouyDetectInfo_Proto> _instance;
} _USIM_SonobouyDetectInfo_Proto_default_instance_;
class USIM_ChargeInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_ChargeInfo_Proto> _instance;
} _USIM_ChargeInfo_Proto_default_instance_;
class USIM_MSLng_Lat_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_MSLng_Lat_Proto> _instance;
} _USIM_MSLng_Lat_Proto_default_instance_;
class USIM_TrackAreaInfo_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_TrackAreaInfo_Proto> _instance;
} _USIM_TrackAreaInfo_Proto_default_instance_;
class USIM_UUVStateMessage_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_UUVStateMessage_Proto> _instance;
} _USIM_UUVStateMessage_Proto_default_instance_;
class USIM_TransferEquip_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_TransferEquip_Proto> _instance;
} _USIM_TransferEquip_Proto_default_instance_;
class USIM_AMPHELITRANSFER_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AMPHELITRANSFER_Proto> _instance;
} _USIM_AMPHELITRANSFER_Proto_default_instance_;
class USIM_AMPLANDINGUNLOAD_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AMPLANDINGUNLOAD_Proto> _instance;
} _USIM_AMPLANDINGUNLOAD_Proto_default_instance_;
class USIM_AMPTRANSFER_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AMPTRANSFER_Proto> _instance;
} _USIM_AMPTRANSFER_Proto_default_instance_;
class USIM_AMPFLASHING_ProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USIM_AMPFLASHING_Proto> _instance;
} _USIM_AMPFLASHING_Proto_default_instance_;
static void InitDefaultsscc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AMPFLASHING_Proto_default_instance_;
    new (ptr) ::USIM_AMPFLASHING_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AMPFLASHING_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AMPHELITRANSFER_Proto_default_instance_;
    new (ptr) ::USIM_AMPHELITRANSFER_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AMPHELITRANSFER_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AMPLANDINGUNLOAD_Proto_default_instance_;
    new (ptr) ::USIM_AMPLANDINGUNLOAD_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AMPLANDINGUNLOAD_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AMPTRANSFER_Proto_default_instance_;
    new (ptr) ::USIM_AMPTRANSFER_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AMPTRANSFER_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AircraftDeckAbortEvent_Proto_default_instance_;
    new (ptr) ::USIM_AircraftDeckAbortEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AircraftDeckAbortEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_AircraftLandEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AircraftLandEvent_Proto_default_instance_;
    new (ptr) ::USIM_AircraftLandEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AircraftLandEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AircraftLandEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AircraftLandEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_AircraftReturnEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AircraftReturnEvent_Proto_default_instance_;
    new (ptr) ::USIM_AircraftReturnEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AircraftReturnEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AircraftReturnEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AircraftReturnEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AircraftTakeoffEvent_Proto_default_instance_;
    new (ptr) ::USIM_AircraftTakeoffEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AircraftTakeoffEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AssociEntityLaunchEvent_Proto_default_instance_;
    new (ptr) ::USIM_AssociEntityLaunchEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AssociEntityLaunchEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_AssociEntityRecoveryEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_AssociEntityRecoveryEvent_Proto_default_instance_;
    new (ptr) ::USIM_AssociEntityRecoveryEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_AssociEntityRecoveryEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_AssociEntityRecoveryEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_AssociEntityRecoveryEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_BattleResultEvent_Proto_default_instance_;
    new (ptr) ::USIM_BattleResultEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_BattleResultEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_BuoyReleaseEvent_Proto_default_instance_;
    new (ptr) ::USIM_BuoyReleaseEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_BuoyReleaseEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_ChargeInfo_Proto_default_instance_;
    new (ptr) ::USIM_ChargeInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_ChargeInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CircleBeam_Proto_default_instance_;
    new (ptr) ::USIM_CircleBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CircleBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CommandControlEvent_Proto_default_instance_;
    new (ptr) ::USIM_CommandControlEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CommandControlEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CommandStructInfo_Proto_default_instance_;
    new (ptr) ::USIM_CommandStructInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CommandStructInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CommandTaskCompleted_Proto_default_instance_;
    new (ptr) ::USIM_CommandTaskCompleted_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CommandTaskCompleted_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CommunicationEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CommunicationEvent_Proto_default_instance_;
    new (ptr) ::USIM_CommunicationEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CommunicationEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CommunicationEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CommunicationEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_ConeBeam_Proto_default_instance_;
    new (ptr) ::USIM_ConeBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_ConeBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_CylinderBeam_Proto_default_instance_;
    new (ptr) ::USIM_CylinderBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_CylinderBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_DamageEvent_Proto_default_instance_;
    new (ptr) ::USIM_DamageEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_DamageEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_DecoyLaunchEvent_Proto_default_instance_;
    new (ptr) ::USIM_DecoyLaunchEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_DecoyLaunchEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_DetectionEvent_Proto_default_instance_;
    new (ptr) ::USIM_DetectionEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_DetectionEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_Detection_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_Detection_Proto_default_instance_;
    new (ptr) ::USIM_Detection_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_Detection_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_Detection_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_Detection_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_DyamicCycle_Proto_default_instance_;
    new (ptr) ::USIM_DyamicCycle_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_DyamicCycle_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_ElectronicWarEvent_Proto_default_instance_;
    new (ptr) ::USIM_ElectronicWarEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_ElectronicWarEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_EquipmentInfo_Proto_default_instance_;
    new (ptr) ::USIM_EquipmentInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_EquipmentInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_EquipmentLoadInfo_Proto_default_instance_;
    new (ptr) ::USIM_EquipmentLoadInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_EquipmentLoadInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_ForceDeliveryEvent_Proto_default_instance_;
    new (ptr) ::USIM_ForceDeliveryEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_ForceDeliveryEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_ForceReusingEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_ForceReusingEvent_Proto_default_instance_;
    new (ptr) ::USIM_ForceReusingEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_ForceReusingEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_ForceReusingEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_ForceReusingEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_FusionEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_FusionEvent_Proto_default_instance_;
    new (ptr) ::USIM_FusionEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_FusionEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_FusionEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_FusionEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_Fusion_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_Fusion_Proto_default_instance_;
    new (ptr) ::USIM_Fusion_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_Fusion_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_Fusion_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_Fusion_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_GraphOnoff_Proto_default_instance_;
    new (ptr) ::USIM_GraphOnoff_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_GraphOnoff_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_IssuingTaskAssignment_Proto_default_instance_;
    new (ptr) ::USIM_IssuingTaskAssignment_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_IssuingTaskAssignment_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_Line_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_Line_Proto_default_instance_;
    new (ptr) ::USIM_Line_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_Line_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_Line_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_Line_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_LodisticsEvent_Protp_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_LodisticsEvent_Protp_default_instance_;
    new (ptr) ::USIM_LodisticsEvent_Protp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_LodisticsEvent_Protp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_LodisticsEvent_Protp_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_LodisticsEvent_Protp_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_MSLng_Lat_Proto_default_instance_;
    new (ptr) ::USIM_MSLng_Lat_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_MSLng_Lat_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_PlatInfoMessage_Proto_default_instance_;
    new (ptr) ::USIM_PlatInfoMessage_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_PlatInfoMessage_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_PyramidBeam_Proto_default_instance_;
    new (ptr) ::USIM_PyramidBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_PyramidBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_SIMINFO_Proto_default_instance_;
    new (ptr) ::USIM_SIMINFO_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_SIMINFO_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_SensorStateEvent_Proto_default_instance_;
    new (ptr) ::USIM_SensorStateEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_SensorStateEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_SonarDetectInfo_Proto_default_instance_;
    new (ptr) ::USIM_SonarDetectInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_SonarDetectInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_SonarDropReuseEvent_Proto_default_instance_;
    new (ptr) ::USIM_SonarDropReuseEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_SonarDropReuseEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_SonobouyDetectInfo_Proto_default_instance_;
    new (ptr) ::USIM_SonobouyDetectInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_SonobouyDetectInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_StartAssetRecoveryEvent_Proto_default_instance_;
    new (ptr) ::USIM_StartAssetRecoveryEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_StartAssetRecoveryEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_TimeStepMessage_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_TimeStepMessage_Proto_default_instance_;
    new (ptr) ::USIM_TimeStepMessage_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_TimeStepMessage_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_TimeStepMessage_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_TimeStepMessage_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_TrackAreaInfo_Proto_default_instance_;
    new (ptr) ::USIM_TrackAreaInfo_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_TrackAreaInfo_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto}, {
      &scc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto.base,}};

static void InitDefaultsscc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_TransferEquip_Proto_default_instance_;
    new (ptr) ::USIM_TransferEquip_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_TransferEquip_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_UUVStateMessage_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_UUVStateMessage_Proto_default_instance_;
    new (ptr) ::USIM_UUVStateMessage_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_UUVStateMessage_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_UUVStateMessage_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_UUVStateMessage_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_WeaponLaunchEvent_Proto_default_instance_;
    new (ptr) ::USIM_WeaponLaunchEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_WeaponLaunchEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_WeaponSystemEvent_Proto_default_instance_;
    new (ptr) ::USIM_WeaponSystemEvent_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_WeaponSystemEvent_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIM_WedgeBeam_Proto_default_instance_;
    new (ptr) ::USIM_WedgeBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIM_WedgeBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto}, {}};

static void InitDefaultsscc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_USIN_SphereBeam_Proto_default_instance_;
    new (ptr) ::USIN_SphereBeam_Proto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::USIN_SphereBeam_Proto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_USimDataStructm_2eproto[53];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_USimDataStructm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_USimDataStructm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_USimDataStructm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, wyear_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, wmonth_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, wday_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, whour_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, wminite_),
  PROTOBUF_FIELD_OFFSET(::USIM_TimeStepMessage_Proto, wsencond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_SIMINFO_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_SIMINFO_Proto, usimstatus_),
  PROTOBUF_FIELD_OFFSET(::USIM_SIMINFO_Proto, sscinarioname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, ualliance_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, utype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, snodename_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, sparentnodename_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandStructInfo_Proto, scentername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, splatname_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, scommandnodename_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dffuel_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dflife_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, ualliance_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, ucolor_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, ukind_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, uclass_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, stype_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dflon_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dflat_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfalt_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfheading_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfvx_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfvy_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, df_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfyaw_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, pitch_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, roll_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, dfswaying_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, surging_),
  PROTOBUF_FIELD_OFFSET(::USIM_PlatInfoMessage_Proto, heaving_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, sequipmentname_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfmaxrange_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfminrange_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, uweaponnum_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfcenterheading_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, isrelative_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfwidthb_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, ubeamtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, balive_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, stargettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfmaxelevation_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentInfo_Proto, dfminelevation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentLoadInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentLoadInfo_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentLoadInfo_Proto, splatname_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentLoadInfo_Proto, uequipmenttype_),
  PROTOBUF_FIELD_OFFSET(::USIM_EquipmentLoadInfo_Proto, vecequipmentinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, csensorname_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, utargetnumber_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, uattribute_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, ukind_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, uclass_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, utype_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, dfdistance_),
  PROTOBUF_FIELD_OFFSET(::USIM_Detection_Proto, dforientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, utracknumber_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, utargetaffinity_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, ctargettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dftargetlon_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dftargetlat_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dftargetalt_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dftargetheading_),
  PROTOBUF_FIELD_OFFSET(::USIM_Fusion_Proto, dftargetspeed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, uplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, utargetplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, csensorname_),
  PROTOBUF_FIELD_OFFSET(::USIM_DetectionEvent_Proto, ueventtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, utargetplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_FusionEvent_Proto, ueventtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, ureceiverid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, ueventtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommunicationEvent_Proto, uframeno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, uhostid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, sslaveid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, sslaveequipmentname_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, utargettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, dflon_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, dflat_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, dfalt_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, ucommandtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, ueventtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandControlEvent_Proto, uframeno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, ctargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, uweaponsystemeventtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponSystemEvent_Proto, cweaponname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, cweaponname_),
  PROTOBUF_FIELD_OFFSET(::USIM_WeaponLaunchEvent_Proto, uweaponnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_DecoyLaunchEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_DecoyLaunchEvent_Proto, dfsitime_),
  PROTOBUF_FIELD_OFFSET(::USIM_DecoyLaunchEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DecoyLaunchEvent_Proto, cbaitname_),
  PROTOBUF_FIELD_OFFSET(::USIM_DecoyLaunchEvent_Proto, ubaitnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, cjammingsystemname_),
  PROTOBUF_FIELD_OFFSET(::USIM_ElectronicWarEvent_Proto, ueventtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_SensorStateEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_SensorStateEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_SensorStateEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_SensorStateEvent_Proto, ssensorname_),
  PROTOBUF_FIELD_OFFSET(::USIM_SensorStateEvent_Proto, usensoraction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, sweaponname_),
  PROTOBUF_FIELD_OFFSET(::USIM_BattleResultEvent_Proto, uengageresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, uattackerid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, udamageplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, sweaponname_),
  PROTOBUF_FIELD_OFFSET(::USIM_DamageEvent_Proto, udamageresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_LodisticsEvent_Protp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_LodisticsEvent_Protp, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_LodisticsEvent_Protp, usenderid_),
  PROTOBUF_FIELD_OFFSET(::USIM_LodisticsEvent_Protp, ureceiverid_),
  PROTOBUF_FIELD_OFFSET(::USIM_LodisticsEvent_Protp, csupplytype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityLaunchEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityLaunchEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityLaunchEvent_Proto, splatname_),
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityLaunchEvent_Proto, uplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityLaunchEvent_Proto, ubaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityRecoveryEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityRecoveryEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityRecoveryEvent_Proto, uplatid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AssociEntityRecoveryEvent_Proto, ubaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, recovery_asset_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, recovery_asset_prename_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, baseasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, turnaroundtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, availabletime_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, maintaindelay_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, maintaintime_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, recovery_begin_time_),
  PROTOBUF_FIELD_OFFSET(::USIM_StartAssetRecoveryEvent_Proto, dfsimtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftTakeoffEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftTakeoffEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftTakeoffEvent_Proto, splanename_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftTakeoffEvent_Proto, uplaneid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftTakeoffEvent_Proto, uairbaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftLandEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftLandEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftLandEvent_Proto, uplaneid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftLandEvent_Proto, uairbaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftReturnEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftReturnEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftReturnEvent_Proto, uplaneid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftReturnEvent_Proto, uairbaseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_BuoyReleaseEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_BuoyReleaseEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_BuoyReleaseEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_BuoyReleaseEvent_Proto, ubuoyid_),
  PROTOBUF_FIELD_OFFSET(::USIM_BuoyReleaseEvent_Proto, sbuoy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, usonarid_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, ssonarname_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDropReuseEvent_Proto, ueventtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_ForceDeliveryEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_ForceDeliveryEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_ForceDeliveryEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ForceDeliveryEvent_Proto, cforcename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_ForceReusingEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_ForceReusingEvent_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_ForceReusingEvent_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ForceReusingEvent_Proto, uforceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, time_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, grouptrack_p_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, thewarfarecommander_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, commandertrackid_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, commanderorderid_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, taskedasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, targetoperatingmedium_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, targetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, targetclassification_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, grouptrackcomponentcount_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, ordertype_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, motiontype_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, actualtarget_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, commandertacticstable_),
  PROTOBUF_FIELD_OFFSET(::USIM_IssuingTaskAssignment_Proto, triggeredtactic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, time_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, grouptrack_p_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, thewarfarecommander_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, commandertrackid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, commanderorderid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, taskedasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, targetoperatingmedium_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, targetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, targetclassification_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, grouptrackcomponentcount_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, ordertype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CommandTaskCompleted_Proto, actualtarget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, time_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, airbase_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, aircraft_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, sortietype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, callsign_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, warfarecommandername_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, orderid_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, missiontype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, missionplanname_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, intentions_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, major_p_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, maintaindelay_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, maintaintime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, turnarundtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AircraftDeckAbortEvent_Proto, availabletime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, utargetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_DyamicCycle_Proto, ucolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, utype_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, bfiled_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, ucolor_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, udisplaytype_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dfazimuthangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dfpitchangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dflropeningangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dfudopeningangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dfclosecutdistance_),
  PROTOBUF_FIELD_OFFSET(::USIM_WedgeBeam_Proto, dflength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, type_),
  PROTOBUF_FIELD_OFFSET(::USIN_SphereBeam_Proto, dfradius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, dfudopeningangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_CircleBeam_Proto, dflength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, uterminalid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, dfradius_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, dfazimuthangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, dfpitchangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_ConeBeam_Proto, dfopeningangle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, uterminalid_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, utype_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, bfiled_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, ucolor_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, udisplaytype_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dfazimuthangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dfpitchangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dflropeningangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dfudopeningangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dfradius_),
  PROTOBUF_FIELD_OFFSET(::USIM_PyramidBeam_Proto, dflength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, bfiled_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, ucolor_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, udisplaytype_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, dfazimuthangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, dfpitchangle_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, dfradius_),
  PROTOBUF_FIELD_OFFSET(::USIM_CylinderBeam_Proto, dflength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, uterminalid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, suuid_),
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, ulinetype_),
  PROTOBUF_FIELD_OFFSET(::USIM_Line_Proto, ucolor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_GraphOnoff_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_GraphOnoff_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_GraphOnoff_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_GraphOnoff_Proto, suuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, plat_id_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, platname_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, detector_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_targetid_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_rsl_passive_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_rsl_active_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_ts_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_rnr_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_gain_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_pd_),
  PROTOBUF_FIELD_OFFSET(::USIM_SonarDetectInfo_Proto, para_tlt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_SonobouyDetectInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_SonobouyDetectInfo_Proto, para_detectinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_ChargeInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_ChargeInfo_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_ChargeInfo_Proto, uid_),
  PROTOBUF_FIELD_OFFSET(::USIM_ChargeInfo_Proto, utargetname_),
  PROTOBUF_FIELD_OFFSET(::USIM_ChargeInfo_Proto, dfcharge_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, dflon_),
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, dflat_),
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, dfalt_),
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, fspeed_),
  PROTOBUF_FIELD_OFFSET(::USIM_MSLng_Lat_Proto, fpause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_TrackAreaInfo_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_TrackAreaInfo_Proto, name_),
  PROTOBUF_FIELD_OFFSET(::USIM_TrackAreaInfo_Proto, itype_),
  PROTOBUF_FIELD_OFFSET(::USIM_TrackAreaInfo_Proto, ialliance_),
  PROTOBUF_FIELD_OFFSET(::USIM_TrackAreaInfo_Proto, vecspointlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_UUVStateMessage_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_UUVStateMessage_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_UUVStateMessage_Proto, uuvid_),
  PROTOBUF_FIELD_OFFSET(::USIM_UUVStateMessage_Proto, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_TransferEquip_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_TransferEquip_Proto, equiptype_),
  PROTOBUF_FIELD_OFFSET(::USIM_TransferEquip_Proto, equipnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, transportasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, transportassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, heliasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, heliassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, assetflag_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, istaffnum_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, equiplist_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPHELITRANSFER_Proto, fdamagelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, unloadasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, unloadassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, assetflag_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, inloadstaffnum_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, equiplist_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPLANDINGUNLOAD_Proto, fdamagelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, transportasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, transportassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, subasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, subassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, assetflag_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, transferstaffnum_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPTRANSFER_Proto, equiplist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, dfsimtime_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, transportasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, transportassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, flashingasset_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, flashingassettype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, assetflag_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, flashtype_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, staffnum_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, equiplist_),
  PROTOBUF_FIELD_OFFSET(::USIM_AMPFLASHING_Proto, fdamagelevel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::USIM_TimeStepMessage_Proto)},
  { 12, -1, sizeof(::USIM_SIMINFO_Proto)},
  { 19, -1, sizeof(::USIM_CommandStructInfo_Proto)},
  { 29, -1, sizeof(::USIM_PlatInfoMessage_Proto)},
  { 58, -1, sizeof(::USIM_EquipmentInfo_Proto)},
  { 75, -1, sizeof(::USIM_EquipmentLoadInfo_Proto)},
  { 84, -1, sizeof(::USIM_Detection_Proto)},
  { 100, -1, sizeof(::USIM_Fusion_Proto)},
  { 115, -1, sizeof(::USIM_DetectionEvent_Proto)},
  { 125, -1, sizeof(::USIM_FusionEvent_Proto)},
  { 135, -1, sizeof(::USIM_CommunicationEvent_Proto)},
  { 146, -1, sizeof(::USIM_CommandControlEvent_Proto)},
  { 163, -1, sizeof(::USIM_WeaponSystemEvent_Proto)},
  { 173, -1, sizeof(::USIM_WeaponLaunchEvent_Proto)},
  { 183, -1, sizeof(::USIM_DecoyLaunchEvent_Proto)},
  { 192, -1, sizeof(::USIM_ElectronicWarEvent_Proto)},
  { 202, -1, sizeof(::USIM_SensorStateEvent_Proto)},
  { 211, -1, sizeof(::USIM_BattleResultEvent_Proto)},
  { 221, -1, sizeof(::USIM_DamageEvent_Proto)},
  { 231, -1, sizeof(::USIM_LodisticsEvent_Protp)},
  { 240, -1, sizeof(::USIM_AssociEntityLaunchEvent_Proto)},
  { 249, -1, sizeof(::USIM_AssociEntityRecoveryEvent_Proto)},
  { 257, -1, sizeof(::USIM_StartAssetRecoveryEvent_Proto)},
  { 271, -1, sizeof(::USIM_AircraftTakeoffEvent_Proto)},
  { 280, -1, sizeof(::USIM_AircraftLandEvent_Proto)},
  { 288, -1, sizeof(::USIM_AircraftReturnEvent_Proto)},
  { 296, -1, sizeof(::USIM_BuoyReleaseEvent_Proto)},
  { 305, -1, sizeof(::USIM_SonarDropReuseEvent_Proto)},
  { 315, -1, sizeof(::USIM_ForceDeliveryEvent_Proto)},
  { 323, -1, sizeof(::USIM_ForceReusingEvent_Proto)},
  { 331, -1, sizeof(::USIM_IssuingTaskAssignment_Proto)},
  { 351, -1, sizeof(::USIM_CommandTaskCompleted_Proto)},
  { 368, -1, sizeof(::USIM_AircraftDeckAbortEvent_Proto)},
  { 388, -1, sizeof(::USIM_DyamicCycle_Proto)},
  { 398, -1, sizeof(::USIM_WedgeBeam_Proto)},
  { 416, -1, sizeof(::USIN_SphereBeam_Proto)},
  { 426, -1, sizeof(::USIM_CircleBeam_Proto)},
  { 436, -1, sizeof(::USIM_ConeBeam_Proto)},
  { 449, -1, sizeof(::USIM_PyramidBeam_Proto)},
  { 468, -1, sizeof(::USIM_CylinderBeam_Proto)},
  { 483, -1, sizeof(::USIM_Line_Proto)},
  { 494, -1, sizeof(::USIM_GraphOnoff_Proto)},
  { 502, -1, sizeof(::USIM_SonarDetectInfo_Proto)},
  { 518, -1, sizeof(::USIM_SonobouyDetectInfo_Proto)},
  { 524, -1, sizeof(::USIM_ChargeInfo_Proto)},
  { 533, -1, sizeof(::USIM_MSLng_Lat_Proto)},
  { 543, -1, sizeof(::USIM_TrackAreaInfo_Proto)},
  { 552, -1, sizeof(::USIM_UUVStateMessage_Proto)},
  { 560, -1, sizeof(::USIM_TransferEquip_Proto)},
  { 567, -1, sizeof(::USIM_AMPHELITRANSFER_Proto)},
  { 581, -1, sizeof(::USIM_AMPLANDINGUNLOAD_Proto)},
  { 593, -1, sizeof(::USIM_AMPTRANSFER_Proto)},
  { 606, -1, sizeof(::USIM_AMPFLASHING_Proto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_TimeStepMessage_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_SIMINFO_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CommandStructInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_PlatInfoMessage_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_EquipmentInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_EquipmentLoadInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_Detection_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_Fusion_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_DetectionEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_FusionEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CommunicationEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CommandControlEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_WeaponSystemEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_WeaponLaunchEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_DecoyLaunchEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_ElectronicWarEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_SensorStateEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_BattleResultEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_DamageEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_LodisticsEvent_Protp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AssociEntityLaunchEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AssociEntityRecoveryEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_StartAssetRecoveryEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AircraftTakeoffEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AircraftLandEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AircraftReturnEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_BuoyReleaseEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_SonarDropReuseEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_ForceDeliveryEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_ForceReusingEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_IssuingTaskAssignment_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CommandTaskCompleted_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AircraftDeckAbortEvent_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_DyamicCycle_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_WedgeBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIN_SphereBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CircleBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_ConeBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_PyramidBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_CylinderBeam_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_Line_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_GraphOnoff_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_SonarDetectInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_SonobouyDetectInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_ChargeInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_MSLng_Lat_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_TrackAreaInfo_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_UUVStateMessage_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_TransferEquip_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AMPHELITRANSFER_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AMPLANDINGUNLOAD_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AMPTRANSFER_Proto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_USIM_AMPFLASHING_Proto_default_instance_),
};

const char descriptor_table_protodef_USimDataStructm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025USimDataStructm.proto\"\216\001\n\032USIM_TimeSte"
  "pMessage_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\r\n\005wYe"
  "ar\030\002 \001(\r\022\016\n\006wMonth\030\003 \001(\r\022\014\n\004wDay\030\004 \001(\r\022\r"
  "\n\005wHour\030\005 \001(\r\022\017\n\007wMinite\030\006 \001(\r\022\020\n\010wSenco"
  "nd\030\007 \001(\r\"\?\n\022USIM_SIMINFO_Proto\022\022\n\nuSimSt"
  "atus\030\001 \001(\r\022\025\n\rsScinarioName\030\002 \001(\014\"\227\001\n\034US"
  "IM_CommandStructInfo_Proto\022\'\n\tuAlliance\030"
  "\001 \001(\0162\024.USIM_Alliance_Proto\022\r\n\005uType\030\002 \001"
  "(\r\022\021\n\tsNodeName\030\003 \001(\014\022\027\n\017sParentNodeName"
  "\030\004 \001(\014\022\023\n\013sCenterName\030\005 \001(\014\"\271\003\n\032USIM_Pla"
  "tInfoMessage_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\021\n"
  "\tsPlatName\030\002 \001(\014\022\013\n\003uID\030\003 \001(\r\022\030\n\020sComman"
  "dNodeName\030\004 \001(\014\022\016\n\006dfFuel\030\005 \001(\002\022\016\n\006dfLif"
  "e\030\006 \001(\002\022\'\n\tuAlliance\030\007 \001(\0162\024.USIM_Allian"
  "ce_Proto\022\016\n\006uColor\030\010 \001(\004\022\r\n\005uKind\030\t \001(\r\022"
  "\016\n\006uClass\030\n \001(\r\022\r\n\005sType\030\013 \001(\014\022\r\n\005dfLon\030"
  "\014 \001(\001\022\r\n\005dfLat\030\r \001(\001\022\r\n\005dfAlt\030\016 \001(\001\022\021\n\td"
  "fHeading\030\017 \001(\002\022\014\n\004dfVx\030\020 \001(\002\022\014\n\004dfVy\030\021 \001"
  "(\002\022\n\n\002df\030\022 \001(\002\022\r\n\005dfyaw\030\023 \001(\002\022\r\n\005pitch\030\024"
  " \001(\002\022\014\n\004roll\030\025 \001(\002\022\021\n\tdfSwaying\030\026 \001(\002\022\017\n"
  "\007surging\030\027 \001(\002\022\017\n\007heaving\030\030 \001(\002\"\225\002\n\030USIM"
  "_EquipmentInfo_Proto\022\026\n\016sEquipmentName\030\001"
  " \001(\014\022\022\n\ndfMaxRange\030\002 \001(\001\022\022\n\ndfMinRange\030\003"
  " \001(\001\022\022\n\nuWeaponNum\030\004 \001(\r\022\027\n\017dfCenterHead"
  "ing\030\005 \001(\001\022\022\n\nisRelative\030\006 \001(\010\022\020\n\010dfWidth"
  "B\030\007 \001(\001\022\021\n\tuBeamType\030\010 \001(\r\022\016\n\006bAlive\030\t \001"
  "(\010\022\023\n\013sTargetType\030\n \001(\014\022\026\n\016dfMaxElevatio"
  "n\030\013 \001(\001\022\026\n\016dfMinElevation\030\014 \001(\001\"\217\001\n\034USIM"
  "_EquipmentLoadInfo_Proto\022\013\n\003uID\030\001 \001(\r\022\021\n"
  "\tsplatname\030\002 \001(\014\022\026\n\016uEquipmentType\030\003 \001(\r"
  "\0227\n\024vecEquipmentInfoList\030\004 \003(\0132\031.USIM_Eq"
  "uipmentInfo_Proto\"\342\001\n\024USIM_Detection_Pro"
  "to\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\023\n\013cS"
  "ensorName\030\003 \001(\014\022\021\n\tuTargetID\030\004 \001(\r\022\025\n\ruT"
  "argetNumber\030\005 \001(\r\022\022\n\nuAttribute\030\006 \001(\r\022\r\n"
  "\005uKind\030\007 \001(\r\022\016\n\006uClass\030\010 \001(\r\022\r\n\005uType\030\t "
  "\001(\r\022\022\n\ndfDistance\030\n \001(\001\022\025\n\rdfOrientation"
  "\030\013 \001(\001\"\346\001\n\021USIM_Fusion_Proto\022\021\n\tdfSimTim"
  "e\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\024\n\014uTrackNumber\030\003 \001"
  "(\r\022\027\n\017uTargetAffinity\030\004 \001(\r\022\023\n\013cTargetTy"
  "pe\030\005 \001(\r\022\023\n\013dfTargetLon\030\006 \001(\001\022\023\n\013dfTarge"
  "tLat\030\007 \001(\001\022\023\n\013dfTargetAlt\030\010 \001(\001\022\027\n\017dfTar"
  "getHeading\030\t \001(\001\022\025\n\rdfTargetSpeed\030\n \001(\001\""
  "\177\n\031USIM_DetectionEvent_Proto\022\021\n\tdfSimTim"
  "e\030\001 \001(\001\022\017\n\007uPlatID\030\002 \001(\r\022\025\n\ruTargetPlatI"
  "D\030\003 \001(\r\022\023\n\013cSensorName\030\004 \001(\014\022\022\n\nuEventTy"
  "pe\030\005 \001(\r\"v\n\026USIM_FusionEvent_Proto\022\021\n\tdf"
  "SimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\021\n\tuTargetID\030"
  "\003 \001(\r\022\025\n\ruTargetPlatID\030\004 \001(\r\022\022\n\nuEventTy"
  "pe\030\005 \001(\r\"\215\001\n\035USIM_CommunicationEvent_Pro"
  "to\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\023\n\013uR"
  "eceiverID\030\003 \001(\r\022\021\n\tuTargetID\030\004 \001(\r\022\022\n\nuE"
  "ventType\030\005 \001(\r\022\020\n\010uframeNo\030\006 \001(\r\"\204\002\n\036USI"
  "M_CommandControlEvent_Proto\022\021\n\tdfSimTime"
  "\030\001 \001(\001\022\017\n\007uHostID\030\002 \001(\r\022\020\n\010sSlaveID\030\003 \001("
  "\r\022\033\n\023sSlaveEquipmentName\030\004 \001(\014\022\023\n\013uTarge"
  "tType\030\005 \001(\r\022\021\n\tuTargetID\030\006 \001(\r\022\r\n\005dfLon\030"
  "\007 \001(\001\022\r\n\005dfLat\030\010 \001(\001\022\r\n\005dfAlt\030\t \001(\001\022\024\n\014u"
  "CommandType\030\n \001(\r\022\022\n\nuEventType\030\013 \001(\r\022\020\n"
  "\010uframeNo\030\014 \001(\r\"\206\001\n\034USIM_WeaponSystemEve"
  "nt_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r"
  "\022\021\n\tcTargetID\030\003 \001(\r\022\036\n\026uWeaponSystemEven"
  "tType\030\004 \001(\r\022\023\n\013cWeaponName\030\005 \001(\014\"z\n\034USIM"
  "_WeaponLaunchEvent_Proto\022\021\n\tdfSimTime\030\001 "
  "\001(\001\022\013\n\003uID\030\002 \001(\r\022\021\n\tuTargetID\030\003 \001(\r\022\023\n\013c"
  "WeaponName\030\004 \001(\014\022\022\n\nuWeaponNum\030\005 \001(\r\"a\n\033"
  "USIM_DecoyLaunchEvent_Proto\022\020\n\010dfSiTime\030"
  "\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\021\n\tcBaitName\030\003 \001(\014\022\020\n"
  "\010uBaitNum\030\004 \001(\r\"\202\001\n\035USIM_ElectronicWarEv"
  "ent_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001("
  "\r\022\021\n\tuTargetID\030\003 \001(\r\022\032\n\022cJammingSystemNa"
  "me\030\004 \001(\014\022\022\n\nuEventType\030\005 \001(\r\"i\n\033USIM_Sen"
  "sorStateEvent_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013"
  "\n\003uID\030\002 \001(\r\022\023\n\013sSensorName\030\003 \001(\014\022\025\n\ruSen"
  "sorAction\030\004 \001(\r\"}\n\034USIM_BattleResultEven"
  "t_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022"
  "\021\n\tuTargetID\030\003 \001(\r\022\023\n\013sWeaponName\030\004 \001(\014\022"
  "\025\n\ruEngageResult\030\005 \001(\r\"\203\001\n\026USIM_DamageEv"
  "ent_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\023\n\013uAttacke"
  "rID\030\002 \001(\r\022\025\n\ruDamagePlatID\030\003 \001(\r\022\023\n\013sWea"
  "ponName\030\004 \001(\014\022\025\n\ruDamageResult\030\005 \001(\r\"k\n\031"
  "USIM_LodisticsEvent_Protp\022\021\n\tdfSimTime\030\001"
  " \001(\001\022\021\n\tuSenderID\030\002 \001(\r\022\023\n\013uReceiverID\030\003"
  " \001(\r\022\023\n\013cSupplyType\030\004 \001(\r\"l\n\"USIM_Associ"
  "EntityLaunchEvent_Proto\022\021\n\tdfSimTime\030\001 \001"
  "(\001\022\021\n\tsPlatName\030\002 \001(\014\022\017\n\007uPlatID\030\003 \001(\r\022\017"
  "\n\007ubaseID\030\004 \001(\r\"[\n$USIM_AssociEntityReco"
  "veryEvent_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\017\n\007uP"
  "latID\030\002 \001(\r\022\017\n\007ubaseID\030\003 \001(\r\"\373\001\n\"USIM_St"
  "artAssetRecoveryEvent_Proto\022\026\n\016recovery_"
  "Asset\030\001 \001(\014\022\036\n\026recovery_Asset_prename\030\002 "
  "\001(\014\022\021\n\tBaseAsset\030\003 \001(\014\022\026\n\016TurnaroundTime"
  "\030\004 \001(\001\022\025\n\rAvailableTime\030\005 \001(\001\022\025\n\rMaintai"
  "nDelay\030\006 \001(\001\022\024\n\014MaintainTime\030\007 \001(\001\022\033\n\023re"
  "covery_begin_time\030\010 \001(\001\022\021\n\tdfSimTime\030\t \001"
  "(\001\"n\n\037USIM_AircraftTakeoffEvent_Proto\022\021\n"
  "\tdfSimTime\030\001 \001(\001\022\022\n\nsPlaneName\030\002 \001(\014\022\020\n\010"
  "uPlaneID\030\003 \001(\r\022\022\n\nuAirbaseID\030\004 \001(\r\"W\n\034US"
  "IM_AircraftLandEvent_Proto\022\021\n\tdfSimTime\030"
  "\001 \001(\001\022\020\n\010uPlaneID\030\002 \001(\r\022\022\n\nuAirbaseID\030\003 "
  "\001(\r\"Y\n\036USIM_AircraftReturnEvent_Proto\022\021\n"
  "\tdfSimTime\030\001 \001(\001\022\020\n\010uPlaneID\030\002 \001(\r\022\022\n\nuA"
  "irbaseID\030\003 \001(\r\"]\n\033USIM_BuoyReleaseEvent_"
  "Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\017\n"
  "\007uBuoyID\030\003 \001(\r\022\r\n\005sBuoy\030\004 \001(\014\"z\n\036USIM_So"
  "narDropReuseEvent_Proto\022\021\n\tdfSimTime\030\001 \001"
  "(\001\022\013\n\003uID\030\002 \001(\r\022\020\n\010uSonarID\030\003 \001(\r\022\022\n\nsSo"
  "narName\030\004 \001(\014\022\022\n\nuEventType\030\005 \001(\r\"S\n\035USI"
  "M_ForceDeliveryEvent_Proto\022\021\n\tdfSimTime\030"
  "\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\022\n\ncForceName\030\003 \001(\014\"P"
  "\n\034USIM_ForceReusingEvent_Proto\022\021\n\tdfSimT"
  "ime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\020\n\010uForceID\030\003 \001(\r"
  "\"\222\003\n USIM_IssuingTaskAssignment_Proto\022\014\n"
  "\004time\030\001 \001(\001\022\024\n\014GroupTrack_p\030\002 \001(\r\022\033\n\023The"
  "WarfareCommander\030\003 \001(\014\022\030\n\020CommanderTrack"
  "ID\030\004 \001(\r\022\030\n\020CommanderOrderID\030\005 \001(\014\022\023\n\013Ta"
  "skedAsset\030\006 \001(\014\022\035\n\025TargetOperatingMedium"
  "\030\007 \001(\014\022\020\n\010TargetID\030\010 \001(\014\022\034\n\024TargetClassi"
  "fication\030\t \001(\014\022 \n\030GroupTrackComponentCou"
  "nt\030\n \001(\r\022\021\n\tOrderType\030\013 \001(\014\022\022\n\nMotionTyp"
  "e\030\014 \001(\014\022\024\n\014ActualTarget\030\r \001(\014\022\035\n\025Command"
  "erTacticsTable\030\016 \001(\014\022\027\n\017TriggeredTactic\030"
  "\017 \001(\014\"\305\002\n\037USIM_CommandTaskCompleted_Prot"
  "o\022\014\n\004time\030\001 \001(\001\022\024\n\014GroupTrack_p\030\002 \001(\r\022\033\n"
  "\023TheWarfareCommander\030\003 \001(\014\022\030\n\020CommanderT"
  "rackID\030\004 \001(\r\022\030\n\020CommanderOrderID\030\005 \001(\014\022\023"
  "\n\013TaskedAsset\030\006 \001(\014\022\035\n\025TargetOperatingMe"
  "dium\030\007 \001(\014\022\020\n\010TargetID\030\010 \001(\014\022\034\n\024TargetCl"
  "assification\030\t \001(\014\022 \n\030GroupTrackComponen"
  "tCount\030\n \001(\r\022\021\n\tOrderType\030\013 \001(\014\022\024\n\014Actua"
  "lTarget\030\014 \001(\014\"\327\002\n!USIM_AircraftDeckAbort"
  "Event_Proto\022\014\n\004time\030\001 \001(\001\022\017\n\007Airbase\030\002 \001"
  "(\014\022\020\n\010Aircraft\030\003 \001(\014\022\022\n\nSortieType\030\004 \001(\014"
  "\022\020\n\010CallSign\030\005 \001(\014\022\034\n\024WarfareCommanderNa"
  "me\030\006 \001(\014\022\017\n\007OrderId\030\007 \001(\014\022\023\n\013MissionType"
  "\030\010 \001(\014\022\027\n\017MissionPlanname\030\t \001(\014\022\022\n\nInten"
  "tions\030\n \001(\014\022\017\n\007Major_p\030\013 \001(\r\022\025\n\rMaintain"
  "Delay\030\014 \001(\001\022\024\n\014MaintainTime\030\r \001(\001\022\025\n\rTur"
  "narundTime\030\016 \001(\001\022\025\n\rAvailableTime\030\017 \001(\001\""
  "j\n\026USIM_DyamicCycle_Proto\022\021\n\tdfSimTime\030\001"
  " \001(\001\022\013\n\003uID\030\002 \001(\r\022\021\n\tuTargetID\030\003 \001(\r\022\r\n\005"
  "sUuid\030\004 \001(\014\022\016\n\006uColor\030\005 \001(\004\"\232\002\n\024USIM_Wed"
  "geBeam_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002"
  " \001(\r\022\r\n\005sUuid\030\003 \001(\014\022\r\n\005uType\030\004 \001(\r\022\016\n\006bF"
  "iled\030\005 \001(\010\022\016\n\006uColor\030\006 \001(\004\022\024\n\014uDisplayTy"
  "pe\030\007 \001(\r\022\026\n\016dfAzimuthAngle\030\010 \001(\002\022\024\n\014dfPi"
  "tchAngle\030\t \001(\002\022\030\n\020dfLROpeningAngle\030\n \001(\002"
  "\022\030\n\020dfUDOpeningAngle\030\013 \001(\002\022\032\n\022dfCloseCut"
  "Distance\030\014 \001(\001\022\020\n\010dfLength\030\r \001(\001\"f\n\025USIN"
  "_SphereBeam_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003"
  "uID\030\002 \001(\r\022\r\n\005sUuid\030\003 \001(\014\022\014\n\004type\030\004 \001(\r\022\020"
  "\n\010dfradius\030\005 \001(\001\"r\n\025USIM_CircleBeam_Prot"
  "o\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\r\n\005sUu"
  "id\030\003 \001(\014\022\030\n\020dfUDOpeningAngle\030\004 \001(\001\022\020\n\010df"
  "Length\030\005 \001(\001\"\261\001\n\023USIM_ConeBeam_Proto\022\021\n\t"
  "dfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\023\n\013uTermina"
  "lID\030\003 \001(\r\022\r\n\005sUuid\030\004 \001(\014\022\020\n\010dfradius\030\005 \001"
  "(\001\022\026\n\016dfAzimuthAngle\030\006 \001(\001\022\024\n\014dfPitchAng"
  "le\030\007 \001(\001\022\026\n\016dfOpeningAngle\030\010 \001(\001\"\247\002\n\026USI"
  "M_PyramidBeam_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013"
  "\n\003uID\030\002 \001(\r\022\023\n\013uTerminalID\030\003 \001(\r\022\r\n\005sUui"
  "d\030\004 \001(\014\022\r\n\005uType\030\005 \001(\r\022\016\n\006bFiled\030\006 \001(\010\022\016"
  "\n\006uColor\030\007 \001(\004\022\024\n\014uDisplayType\030\010 \001(\r\022\026\n\016"
  "dfAzimuthAngle\030\t \001(\001\022\024\n\014dfPitchAngle\030\n \001"
  "(\001\022\030\n\020dfLROpeningAngle\030\013 \001(\001\022\030\n\020dfUDOpen"
  "ingAngle\030\014 \001(\001\022\020\n\010dfradius\030\r \001(\001\022\020\n\010dfLe"
  "ngth\030\016 \001(\001\"\320\001\n\027USIM_CylinderBeam_Proto\022\021"
  "\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\r\n\005sUuid\030"
  "\003 \001(\014\022\016\n\006bFiled\030\004 \001(\010\022\016\n\006uColor\030\005 \001(\004\022\024\n"
  "\014uDisplayType\030\006 \001(\r\022\026\n\016dfAzimuthAngle\030\007 "
  "\001(\001\022\024\n\014dfPitchAngle\030\010 \001(\001\022\020\n\010dfradius\030\t "
  "\001(\001\022\020\n\010dfLength\030\n \001(\001\"x\n\017USIM_Line_Proto"
  "\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r\022\023\n\013uTer"
  "minalID\030\003 \001(\r\022\r\n\005sUuid\030\004 \001(\014\022\021\n\tuLineTyp"
  "e\030\005 \001(\r\022\016\n\006uColor\030\006 \001(\004\"F\n\025USIM_GraphOno"
  "ff_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID\030\002 \001(\r"
  "\022\r\n\005sUuid\030\003 \001(\014\"\364\001\n\032USIM_SonarDetectInfo"
  "_Proto\022\017\n\007plat_id\030\001 \001(\r\022\020\n\010platname\030\002 \001("
  "\014\022\020\n\010detector\030\003 \001(\014\022\025\n\rpara_targetID\030\004 \003"
  "(\r\022\030\n\020para_RSL_passive\030\005 \003(\001\022\027\n\017para_RSL"
  "_active\030\006 \003(\001\022\017\n\007para_TS\030\007 \003(\001\022\020\n\010para_R"
  "NR\030\010 \003(\001\022\021\n\tpara_gain\030\t \003(\001\022\017\n\007para_pd\030\n"
  " \003(\001\022\020\n\010para_tlt\030\013 \003(\001\"U\n\035USIM_SonobouyD"
  "etectInfo_Proto\0224\n\017para_DetectInfo\030\001 \003(\013"
  "2\033.USIM_SonarDetectInfo_Proto\"f\n\025USIM_Ch"
  "argeInfo_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\013\n\003uID"
  "\030\002 \001(\r\022\023\n\013uTargetName\030\003 \001(\014\022\030\n\020dfcharge_"
  "Percent\030\004 \001(\002\"c\n\024USIM_MSLng_Lat_Proto\022\r\n"
  "\005dfLon\030\001 \001(\001\022\r\n\005dfLat\030\002 \001(\001\022\r\n\005dfAlt\030\003 \001"
  "(\001\022\016\n\006fSpeed\030\004 \001(\002\022\016\n\006fPause\030\005 \001(\002\"x\n\030US"
  "IM_TrackAreaInfo_Proto\022\014\n\004name\030\001 \001(\014\022\r\n\005"
  "iType\030\002 \001(\r\022\021\n\tiAlliance\030\003 \001(\r\022,\n\rvecSPo"
  "intList\030\004 \003(\0132\025.USIM_MSLng_Lat_Proto\"M\n\032"
  "USIM_UUVStateMessage_Proto\022\021\n\tdfSimTime\030"
  "\001 \001(\001\022\r\n\005UUVID\030\002 \001(\r\022\r\n\005state\030\003 \001(\r\"\?\n\030U"
  "SIM_TransferEquip_Proto\022\021\n\tEquipType\030\001 \001"
  "(\014\022\020\n\010EquipNum\030\002 \001(\r\"\367\001\n\032USIM_AMPHELITRA"
  "NSFER_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\026\n\016transp"
  "ortAsset\030\002 \001(\014\022\032\n\022transportAssetType\030\003 \001"
  "(\014\022\021\n\theliAsset\030\004 \001(\014\022\025\n\rheliAssetType\030\005"
  " \001(\014\022\021\n\tassetFlag\030\006 \001(\014\022\021\n\tiStaffNum\030\007 \001"
  "(\r\022,\n\tEquipList\030\010 \003(\0132\031.USIM_TransferEqu"
  "ip_Proto\022\024\n\014fDamageLevel\030\t \001(\001\"\315\001\n\033USIM_"
  "AMPLANDINGUNLOAD_Proto\022\021\n\tdfSimTime\030\001 \001("
  "\001\022\023\n\013unloadAsset\030\002 \001(\014\022\027\n\017unloadAssetTyp"
  "e\030\003 \001(\014\022\021\n\tassetFlag\030\004 \001(\014\022\026\n\016inloadStaf"
  "fNum\030\005 \001(\r\022,\n\tEquipList\030\006 \003(\0132\031.USIM_Tra"
  "nsferEquip_Proto\022\024\n\014fDamageLevel\030\007 \001(\001\"\342"
  "\001\n\026USIM_AMPTRANSFER_Proto\022\021\n\tdfSimTime\030\001"
  " \001(\001\022\026\n\016TransportAsset\030\002 \001(\014\022\032\n\022Transpor"
  "tAssetType\030\003 \001(\014\022\020\n\010SubAsset\030\004 \001(\014\022\024\n\014Su"
  "bAssetType\030\005 \001(\014\022\021\n\tAssetFlag\030\006 \001(\014\022\030\n\020T"
  "ransferStaffNum\030\007 \001(\r\022,\n\tEquipList\030\010 \003(\013"
  "2\031.USIM_TransferEquip_Proto\"\215\002\n\026USIM_AMP"
  "FLASHING_Proto\022\021\n\tdfSimTime\030\001 \001(\001\022\026\n\016Tra"
  "nsportAsset\030\002 \001(\014\022\032\n\022TransportAssetType\030"
  "\003 \001(\014\022\025\n\rFlashingAsset\030\004 \001(\014\022\031\n\021Flashing"
  "AssetType\030\005 \001(\014\022\021\n\tAssetFlag\030\006 \001(\014\022\021\n\tFl"
  "ashType\030\007 \001(\r\022\020\n\010StaffNum\030\010 \001(\r\022,\n\tEquip"
  "List\030\t \003(\0132\031.USIM_TransferEquip_Proto\022\024\n"
  "\014fDamageLevel\030\n \001(\001*\237\001\n\023USIM_Alliance_Pr"
  "oto\022\030\n\024USIM_Alliance_UNKNOW\020\000\022\014\n\010USIM_RE"
  "D\020\001\022\r\n\tUSIM_BLUE\020\002\022\016\n\nUSIM_WHITE\020\003\022\016\n\nUS"
  "IM_GREEN\020\004\022\017\n\013USIM_PURPLE\020\005\022\017\n\013USIM_ORAN"
  "GE\020\006\022\017\n\013USIM_YELLOW\020\007b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_USimDataStructm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_USimDataStructm_2eproto_sccs[53] = {
  &scc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AircraftLandEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AircraftReturnEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_AssociEntityRecoveryEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CommunicationEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_Detection_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_ForceReusingEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_FusionEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_Fusion_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_Line_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_LodisticsEvent_Protp_USimDataStructm_2eproto.base,
  &scc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_TimeStepMessage_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_UUVStateMessage_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto.base,
  &scc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_USimDataStructm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_USimDataStructm_2eproto = {
  false, false, descriptor_table_protodef_USimDataStructm_2eproto, "USimDataStructm.proto", 8989,
  &descriptor_table_USimDataStructm_2eproto_once, descriptor_table_USimDataStructm_2eproto_sccs, descriptor_table_USimDataStructm_2eproto_deps, 53, 0,
  schemas, file_default_instances, TableStruct_USimDataStructm_2eproto::offsets,
  file_level_metadata_USimDataStructm_2eproto, 53, file_level_enum_descriptors_USimDataStructm_2eproto, file_level_service_descriptors_USimDataStructm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_USimDataStructm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_USimDataStructm_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* USIM_Alliance_Proto_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_USimDataStructm_2eproto);
  return file_level_enum_descriptors_USimDataStructm_2eproto[0];
}
bool USIM_Alliance_Proto_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void USIM_TimeStepMessage_Proto::InitAsDefaultInstance() {
}
class USIM_TimeStepMessage_Proto::_Internal {
 public:
};

USIM_TimeStepMessage_Proto::USIM_TimeStepMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_TimeStepMessage_Proto)
}
USIM_TimeStepMessage_Proto::USIM_TimeStepMessage_Proto(const USIM_TimeStepMessage_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&wsencond_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(wsencond_));
  // @@protoc_insertion_point(copy_constructor:USIM_TimeStepMessage_Proto)
}

void USIM_TimeStepMessage_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wsencond_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(wsencond_));
}

USIM_TimeStepMessage_Proto::~USIM_TimeStepMessage_Proto() {
  // @@protoc_insertion_point(destructor:USIM_TimeStepMessage_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_TimeStepMessage_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_TimeStepMessage_Proto::ArenaDtor(void* object) {
  USIM_TimeStepMessage_Proto* _this = reinterpret_cast< USIM_TimeStepMessage_Proto* >(object);
  (void)_this;
}
void USIM_TimeStepMessage_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_TimeStepMessage_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_TimeStepMessage_Proto& USIM_TimeStepMessage_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_TimeStepMessage_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_TimeStepMessage_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_TimeStepMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wsencond_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(wsencond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_TimeStepMessage_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 wYear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          wyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wMonth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wmonth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wDay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wHour = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          whour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wMinite = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          wminite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wSencond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          wsencond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_TimeStepMessage_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_TimeStepMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 wYear = 2;
  if (this->wyear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wyear(), target);
  }

  // uint32 wMonth = 3;
  if (this->wmonth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wmonth(), target);
  }

  // uint32 wDay = 4;
  if (this->wday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wday(), target);
  }

  // uint32 wHour = 5;
  if (this->whour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_whour(), target);
  }

  // uint32 wMinite = 6;
  if (this->wminite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wminite(), target);
  }

  // uint32 wSencond = 7;
  if (this->wsencond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_wsencond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_TimeStepMessage_Proto)
  return target;
}

size_t USIM_TimeStepMessage_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_TimeStepMessage_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 wYear = 2;
  if (this->wyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wyear());
  }

  // uint32 wMonth = 3;
  if (this->wmonth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wmonth());
  }

  // uint32 wDay = 4;
  if (this->wday() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wday());
  }

  // uint32 wHour = 5;
  if (this->whour() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_whour());
  }

  // uint32 wMinite = 6;
  if (this->wminite() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wminite());
  }

  // uint32 wSencond = 7;
  if (this->wsencond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wsencond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_TimeStepMessage_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_TimeStepMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_TimeStepMessage_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_TimeStepMessage_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_TimeStepMessage_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_TimeStepMessage_Proto)
    MergeFrom(*source);
  }
}

void USIM_TimeStepMessage_Proto::MergeFrom(const USIM_TimeStepMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_TimeStepMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.wyear() != 0) {
    _internal_set_wyear(from._internal_wyear());
  }
  if (from.wmonth() != 0) {
    _internal_set_wmonth(from._internal_wmonth());
  }
  if (from.wday() != 0) {
    _internal_set_wday(from._internal_wday());
  }
  if (from.whour() != 0) {
    _internal_set_whour(from._internal_whour());
  }
  if (from.wminite() != 0) {
    _internal_set_wminite(from._internal_wminite());
  }
  if (from.wsencond() != 0) {
    _internal_set_wsencond(from._internal_wsencond());
  }
}

void USIM_TimeStepMessage_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_TimeStepMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_TimeStepMessage_Proto::CopyFrom(const USIM_TimeStepMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_TimeStepMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_TimeStepMessage_Proto::IsInitialized() const {
  return true;
}

void USIM_TimeStepMessage_Proto::InternalSwap(USIM_TimeStepMessage_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_TimeStepMessage_Proto, wsencond_)
      + sizeof(USIM_TimeStepMessage_Proto::wsencond_)
      - PROTOBUF_FIELD_OFFSET(USIM_TimeStepMessage_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_TimeStepMessage_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_SIMINFO_Proto::InitAsDefaultInstance() {
}
class USIM_SIMINFO_Proto::_Internal {
 public:
};

USIM_SIMINFO_Proto::USIM_SIMINFO_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_SIMINFO_Proto)
}
USIM_SIMINFO_Proto::USIM_SIMINFO_Proto(const USIM_SIMINFO_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sscinarioname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sscinarioname().empty()) {
    sscinarioname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sscinarioname(),
      GetArena());
  }
  usimstatus_ = from.usimstatus_;
  // @@protoc_insertion_point(copy_constructor:USIM_SIMINFO_Proto)
}

void USIM_SIMINFO_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto.base);
  sscinarioname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usimstatus_ = 0u;
}

USIM_SIMINFO_Proto::~USIM_SIMINFO_Proto() {
  // @@protoc_insertion_point(destructor:USIM_SIMINFO_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_SIMINFO_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sscinarioname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_SIMINFO_Proto::ArenaDtor(void* object) {
  USIM_SIMINFO_Proto* _this = reinterpret_cast< USIM_SIMINFO_Proto* >(object);
  (void)_this;
}
void USIM_SIMINFO_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_SIMINFO_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_SIMINFO_Proto& USIM_SIMINFO_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_SIMINFO_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_SIMINFO_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_SIMINFO_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sscinarioname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usimstatus_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_SIMINFO_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uSimStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          usimstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sScinarioName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sscinarioname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_SIMINFO_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_SIMINFO_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uSimStatus = 1;
  if (this->usimstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_usimstatus(), target);
  }

  // bytes sScinarioName = 2;
  if (this->sscinarioname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sscinarioname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_SIMINFO_Proto)
  return target;
}

size_t USIM_SIMINFO_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_SIMINFO_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sScinarioName = 2;
  if (this->sscinarioname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sscinarioname());
  }

  // uint32 uSimStatus = 1;
  if (this->usimstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usimstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_SIMINFO_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_SIMINFO_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_SIMINFO_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_SIMINFO_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_SIMINFO_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_SIMINFO_Proto)
    MergeFrom(*source);
  }
}

void USIM_SIMINFO_Proto::MergeFrom(const USIM_SIMINFO_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_SIMINFO_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sscinarioname().size() > 0) {
    _internal_set_sscinarioname(from._internal_sscinarioname());
  }
  if (from.usimstatus() != 0) {
    _internal_set_usimstatus(from._internal_usimstatus());
  }
}

void USIM_SIMINFO_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_SIMINFO_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_SIMINFO_Proto::CopyFrom(const USIM_SIMINFO_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_SIMINFO_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_SIMINFO_Proto::IsInitialized() const {
  return true;
}

void USIM_SIMINFO_Proto::InternalSwap(USIM_SIMINFO_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sscinarioname_.Swap(&other->sscinarioname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(usimstatus_, other->usimstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_SIMINFO_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CommandStructInfo_Proto::InitAsDefaultInstance() {
}
class USIM_CommandStructInfo_Proto::_Internal {
 public:
};

USIM_CommandStructInfo_Proto::USIM_CommandStructInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CommandStructInfo_Proto)
}
USIM_CommandStructInfo_Proto::USIM_CommandStructInfo_Proto(const USIM_CommandStructInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  snodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snodename().empty()) {
    snodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snodename(),
      GetArena());
  }
  sparentnodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sparentnodename().empty()) {
    sparentnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sparentnodename(),
      GetArena());
  }
  scentername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scentername().empty()) {
    scentername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scentername(),
      GetArena());
  }
  ::memcpy(&ualliance_, &from.ualliance_,
    static_cast<size_t>(reinterpret_cast<char*>(&utype_) -
    reinterpret_cast<char*>(&ualliance_)) + sizeof(utype_));
  // @@protoc_insertion_point(copy_constructor:USIM_CommandStructInfo_Proto)
}

void USIM_CommandStructInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto.base);
  snodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparentnodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scentername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ualliance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utype_) -
      reinterpret_cast<char*>(&ualliance_)) + sizeof(utype_));
}

USIM_CommandStructInfo_Proto::~USIM_CommandStructInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CommandStructInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CommandStructInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  snodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sparentnodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scentername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_CommandStructInfo_Proto::ArenaDtor(void* object) {
  USIM_CommandStructInfo_Proto* _this = reinterpret_cast< USIM_CommandStructInfo_Proto* >(object);
  (void)_this;
}
void USIM_CommandStructInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CommandStructInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CommandStructInfo_Proto& USIM_CommandStructInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CommandStructInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CommandStructInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CommandStructInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sparentnodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scentername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ualliance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utype_) -
      reinterpret_cast<char*>(&ualliance_)) + sizeof(utype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CommandStructInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .USIM_Alliance_Proto uAlliance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ualliance(static_cast<::USIM_Alliance_Proto>(val));
        } else goto handle_unusual;
        continue;
      // uint32 uType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          utype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sNodeName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_snodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sParentNodeName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sparentnodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sCenterName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_scentername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CommandStructInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CommandStructInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .USIM_Alliance_Proto uAlliance = 1;
  if (this->ualliance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ualliance(), target);
  }

  // uint32 uType = 2;
  if (this->utype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_utype(), target);
  }

  // bytes sNodeName = 3;
  if (this->snodename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_snodename(), target);
  }

  // bytes sParentNodeName = 4;
  if (this->sparentnodename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sparentnodename(), target);
  }

  // bytes sCenterName = 5;
  if (this->scentername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_scentername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CommandStructInfo_Proto)
  return target;
}

size_t USIM_CommandStructInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CommandStructInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sNodeName = 3;
  if (this->snodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_snodename());
  }

  // bytes sParentNodeName = 4;
  if (this->sparentnodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sparentnodename());
  }

  // bytes sCenterName = 5;
  if (this->scentername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scentername());
  }

  // .USIM_Alliance_Proto uAlliance = 1;
  if (this->ualliance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ualliance());
  }

  // uint32 uType = 2;
  if (this->utype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CommandStructInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CommandStructInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CommandStructInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CommandStructInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CommandStructInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CommandStructInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_CommandStructInfo_Proto::MergeFrom(const USIM_CommandStructInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CommandStructInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snodename().size() > 0) {
    _internal_set_snodename(from._internal_snodename());
  }
  if (from.sparentnodename().size() > 0) {
    _internal_set_sparentnodename(from._internal_sparentnodename());
  }
  if (from.scentername().size() > 0) {
    _internal_set_scentername(from._internal_scentername());
  }
  if (from.ualliance() != 0) {
    _internal_set_ualliance(from._internal_ualliance());
  }
  if (from.utype() != 0) {
    _internal_set_utype(from._internal_utype());
  }
}

void USIM_CommandStructInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CommandStructInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CommandStructInfo_Proto::CopyFrom(const USIM_CommandStructInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CommandStructInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CommandStructInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_CommandStructInfo_Proto::InternalSwap(USIM_CommandStructInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  snodename_.Swap(&other->snodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sparentnodename_.Swap(&other->sparentnodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scentername_.Swap(&other->scentername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CommandStructInfo_Proto, utype_)
      + sizeof(USIM_CommandStructInfo_Proto::utype_)
      - PROTOBUF_FIELD_OFFSET(USIM_CommandStructInfo_Proto, ualliance_)>(
          reinterpret_cast<char*>(&ualliance_),
          reinterpret_cast<char*>(&other->ualliance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CommandStructInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_PlatInfoMessage_Proto::InitAsDefaultInstance() {
}
class USIM_PlatInfoMessage_Proto::_Internal {
 public:
};

USIM_PlatInfoMessage_Proto::USIM_PlatInfoMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_PlatInfoMessage_Proto)
}
USIM_PlatInfoMessage_Proto::USIM_PlatInfoMessage_Proto(const USIM_PlatInfoMessage_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_splatname().empty()) {
    splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_splatname(),
      GetArena());
  }
  scommandnodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scommandnodename().empty()) {
    scommandnodename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scommandnodename(),
      GetArena());
  }
  stype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stype().empty()) {
    stype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stype(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&heaving_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(heaving_));
  // @@protoc_insertion_point(copy_constructor:USIM_PlatInfoMessage_Proto)
}

void USIM_PlatInfoMessage_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto.base);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scommandnodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heaving_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(heaving_));
}

USIM_PlatInfoMessage_Proto::~USIM_PlatInfoMessage_Proto() {
  // @@protoc_insertion_point(destructor:USIM_PlatInfoMessage_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_PlatInfoMessage_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  splatname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scommandnodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_PlatInfoMessage_Proto::ArenaDtor(void* object) {
  USIM_PlatInfoMessage_Proto* _this = reinterpret_cast< USIM_PlatInfoMessage_Proto* >(object);
  (void)_this;
}
void USIM_PlatInfoMessage_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_PlatInfoMessage_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_PlatInfoMessage_Proto& USIM_PlatInfoMessage_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_PlatInfoMessage_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_PlatInfoMessage_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_PlatInfoMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scommandnodename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heaving_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(heaving_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_PlatInfoMessage_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes sPlatName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_splatname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sCommandNodeName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scommandnodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dfFuel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dffuel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfLife = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dflife_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .USIM_Alliance_Proto uAlliance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ualliance(static_cast<::USIM_Alliance_Proto>(val));
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uKind = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ukind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uClass = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          uclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_stype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfLon = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          dflon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          dflat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfAlt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          dfalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float dfHeading = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          dfheading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfVx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          dfvx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfVy = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          dfvy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float df = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          df_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfyaw = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          dfyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float roll = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfSwaying = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          dfswaying_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float surging = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          surging_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float heaving = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          heaving_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_PlatInfoMessage_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_PlatInfoMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes sPlatName = 2;
  if (this->splatname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_splatname(), target);
  }

  // uint32 uID = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uid(), target);
  }

  // bytes sCommandNodeName = 4;
  if (this->scommandnodename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_scommandnodename(), target);
  }

  // float dfFuel = 5;
  if (!(this->dffuel() <= 0 && this->dffuel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dffuel(), target);
  }

  // float dfLife = 6;
  if (!(this->dflife() <= 0 && this->dflife() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_dflife(), target);
  }

  // .USIM_Alliance_Proto uAlliance = 7;
  if (this->ualliance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_ualliance(), target);
  }

  // uint64 uColor = 8;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_ucolor(), target);
  }

  // uint32 uKind = 9;
  if (this->ukind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_ukind(), target);
  }

  // uint32 uClass = 10;
  if (this->uclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_uclass(), target);
  }

  // bytes sType = 11;
  if (this->stype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_stype(), target);
  }

  // double dfLon = 12;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dflon(), target);
  }

  // double dfLat = 13;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_dflat(), target);
  }

  // double dfAlt = 14;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_dfalt(), target);
  }

  // float dfHeading = 15;
  if (!(this->dfheading() <= 0 && this->dfheading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_dfheading(), target);
  }

  // float dfVx = 16;
  if (!(this->dfvx() <= 0 && this->dfvx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_dfvx(), target);
  }

  // float dfVy = 17;
  if (!(this->dfvy() <= 0 && this->dfvy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_dfvy(), target);
  }

  // float df = 18;
  if (!(this->df() <= 0 && this->df() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_df(), target);
  }

  // float dfyaw = 19;
  if (!(this->dfyaw() <= 0 && this->dfyaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_dfyaw(), target);
  }

  // float pitch = 20;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_pitch(), target);
  }

  // float roll = 21;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_roll(), target);
  }

  // float dfSwaying = 22;
  if (!(this->dfswaying() <= 0 && this->dfswaying() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_dfswaying(), target);
  }

  // float surging = 23;
  if (!(this->surging() <= 0 && this->surging() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_surging(), target);
  }

  // float heaving = 24;
  if (!(this->heaving() <= 0 && this->heaving() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_heaving(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_PlatInfoMessage_Proto)
  return target;
}

size_t USIM_PlatInfoMessage_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_PlatInfoMessage_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sPlatName = 2;
  if (this->splatname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_splatname());
  }

  // bytes sCommandNodeName = 4;
  if (this->scommandnodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_scommandnodename());
  }

  // bytes sType = 11;
  if (this->stype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stype());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // float dfFuel = 5;
  if (!(this->dffuel() <= 0 && this->dffuel() >= 0)) {
    total_size += 1 + 4;
  }

  // float dfLife = 6;
  if (!(this->dflife() <= 0 && this->dflife() >= 0)) {
    total_size += 1 + 4;
  }

  // .USIM_Alliance_Proto uAlliance = 7;
  if (this->ualliance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ualliance());
  }

  // uint64 uColor = 8;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  // uint32 uKind = 9;
  if (this->ukind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ukind());
  }

  // uint32 uClass = 10;
  if (this->uclass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uclass());
  }

  // double dfLon = 12;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLat = 13;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfAlt = 14;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    total_size += 1 + 8;
  }

  // float dfHeading = 15;
  if (!(this->dfheading() <= 0 && this->dfheading() >= 0)) {
    total_size += 1 + 4;
  }

  // float dfVx = 16;
  if (!(this->dfvx() <= 0 && this->dfvx() >= 0)) {
    total_size += 2 + 4;
  }

  // float dfVy = 17;
  if (!(this->dfvy() <= 0 && this->dfvy() >= 0)) {
    total_size += 2 + 4;
  }

  // float df = 18;
  if (!(this->df() <= 0 && this->df() >= 0)) {
    total_size += 2 + 4;
  }

  // float dfyaw = 19;
  if (!(this->dfyaw() <= 0 && this->dfyaw() >= 0)) {
    total_size += 2 + 4;
  }

  // float pitch = 20;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 2 + 4;
  }

  // float roll = 21;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 2 + 4;
  }

  // float dfSwaying = 22;
  if (!(this->dfswaying() <= 0 && this->dfswaying() >= 0)) {
    total_size += 2 + 4;
  }

  // float surging = 23;
  if (!(this->surging() <= 0 && this->surging() >= 0)) {
    total_size += 2 + 4;
  }

  // float heaving = 24;
  if (!(this->heaving() <= 0 && this->heaving() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_PlatInfoMessage_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_PlatInfoMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_PlatInfoMessage_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_PlatInfoMessage_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_PlatInfoMessage_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_PlatInfoMessage_Proto)
    MergeFrom(*source);
  }
}

void USIM_PlatInfoMessage_Proto::MergeFrom(const USIM_PlatInfoMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_PlatInfoMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.splatname().size() > 0) {
    _internal_set_splatname(from._internal_splatname());
  }
  if (from.scommandnodename().size() > 0) {
    _internal_set_scommandnodename(from._internal_scommandnodename());
  }
  if (from.stype().size() > 0) {
    _internal_set_stype(from._internal_stype());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (!(from.dffuel() <= 0 && from.dffuel() >= 0)) {
    _internal_set_dffuel(from._internal_dffuel());
  }
  if (!(from.dflife() <= 0 && from.dflife() >= 0)) {
    _internal_set_dflife(from._internal_dflife());
  }
  if (from.ualliance() != 0) {
    _internal_set_ualliance(from._internal_ualliance());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
  if (from.ukind() != 0) {
    _internal_set_ukind(from._internal_ukind());
  }
  if (from.uclass() != 0) {
    _internal_set_uclass(from._internal_uclass());
  }
  if (!(from.dflon() <= 0 && from.dflon() >= 0)) {
    _internal_set_dflon(from._internal_dflon());
  }
  if (!(from.dflat() <= 0 && from.dflat() >= 0)) {
    _internal_set_dflat(from._internal_dflat());
  }
  if (!(from.dfalt() <= 0 && from.dfalt() >= 0)) {
    _internal_set_dfalt(from._internal_dfalt());
  }
  if (!(from.dfheading() <= 0 && from.dfheading() >= 0)) {
    _internal_set_dfheading(from._internal_dfheading());
  }
  if (!(from.dfvx() <= 0 && from.dfvx() >= 0)) {
    _internal_set_dfvx(from._internal_dfvx());
  }
  if (!(from.dfvy() <= 0 && from.dfvy() >= 0)) {
    _internal_set_dfvy(from._internal_dfvy());
  }
  if (!(from.df() <= 0 && from.df() >= 0)) {
    _internal_set_df(from._internal_df());
  }
  if (!(from.dfyaw() <= 0 && from.dfyaw() >= 0)) {
    _internal_set_dfyaw(from._internal_dfyaw());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.dfswaying() <= 0 && from.dfswaying() >= 0)) {
    _internal_set_dfswaying(from._internal_dfswaying());
  }
  if (!(from.surging() <= 0 && from.surging() >= 0)) {
    _internal_set_surging(from._internal_surging());
  }
  if (!(from.heaving() <= 0 && from.heaving() >= 0)) {
    _internal_set_heaving(from._internal_heaving());
  }
}

void USIM_PlatInfoMessage_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_PlatInfoMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_PlatInfoMessage_Proto::CopyFrom(const USIM_PlatInfoMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_PlatInfoMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_PlatInfoMessage_Proto::IsInitialized() const {
  return true;
}

void USIM_PlatInfoMessage_Proto::InternalSwap(USIM_PlatInfoMessage_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  splatname_.Swap(&other->splatname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scommandnodename_.Swap(&other->scommandnodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stype_.Swap(&other->stype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_PlatInfoMessage_Proto, heaving_)
      + sizeof(USIM_PlatInfoMessage_Proto::heaving_)
      - PROTOBUF_FIELD_OFFSET(USIM_PlatInfoMessage_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_PlatInfoMessage_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_EquipmentInfo_Proto::InitAsDefaultInstance() {
}
class USIM_EquipmentInfo_Proto::_Internal {
 public:
};

USIM_EquipmentInfo_Proto::USIM_EquipmentInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_EquipmentInfo_Proto)
}
USIM_EquipmentInfo_Proto::USIM_EquipmentInfo_Proto(const USIM_EquipmentInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequipmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sequipmentname().empty()) {
    sequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sequipmentname(),
      GetArena());
  }
  stargettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stargettype().empty()) {
    stargettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_stargettype(),
      GetArena());
  }
  ::memcpy(&dfmaxrange_, &from.dfmaxrange_,
    static_cast<size_t>(reinterpret_cast<char*>(&ubeamtype_) -
    reinterpret_cast<char*>(&dfmaxrange_)) + sizeof(ubeamtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_EquipmentInfo_Proto)
}

void USIM_EquipmentInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto.base);
  sequipmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stargettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfmaxrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubeamtype_) -
      reinterpret_cast<char*>(&dfmaxrange_)) + sizeof(ubeamtype_));
}

USIM_EquipmentInfo_Proto::~USIM_EquipmentInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_EquipmentInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_EquipmentInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequipmentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stargettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_EquipmentInfo_Proto::ArenaDtor(void* object) {
  USIM_EquipmentInfo_Proto* _this = reinterpret_cast< USIM_EquipmentInfo_Proto* >(object);
  (void)_this;
}
void USIM_EquipmentInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_EquipmentInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_EquipmentInfo_Proto& USIM_EquipmentInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_EquipmentInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_EquipmentInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_EquipmentInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequipmentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stargettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfmaxrange_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubeamtype_) -
      reinterpret_cast<char*>(&dfmaxrange_)) + sizeof(ubeamtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_EquipmentInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes sEquipmentName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sequipmentname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfMaxRange = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dfmaxrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfMinRange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dfminrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uWeaponNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uweaponnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfCenterHeading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          dfcenterheading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isRelative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          isrelative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfWidthB = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dfwidthb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uBeamType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ubeamtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bAlive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          balive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sTargetType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_stargettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfMaxElevation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          dfmaxelevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfMinElevation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          dfminelevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_EquipmentInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_EquipmentInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sEquipmentName = 1;
  if (this->sequipmentname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sequipmentname(), target);
  }

  // double dfMaxRange = 2;
  if (!(this->dfmaxrange() <= 0 && this->dfmaxrange() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dfmaxrange(), target);
  }

  // double dfMinRange = 3;
  if (!(this->dfminrange() <= 0 && this->dfminrange() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dfminrange(), target);
  }

  // uint32 uWeaponNum = 4;
  if (this->uweaponnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uweaponnum(), target);
  }

  // double dfCenterHeading = 5;
  if (!(this->dfcenterheading() <= 0 && this->dfcenterheading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dfcenterheading(), target);
  }

  // bool isRelative = 6;
  if (this->isrelative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_isrelative(), target);
  }

  // double dfWidthB = 7;
  if (!(this->dfwidthb() <= 0 && this->dfwidthb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dfwidthb(), target);
  }

  // uint32 uBeamType = 8;
  if (this->ubeamtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ubeamtype(), target);
  }

  // bool bAlive = 9;
  if (this->balive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_balive(), target);
  }

  // bytes sTargetType = 10;
  if (this->stargettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_stargettype(), target);
  }

  // double dfMaxElevation = 11;
  if (!(this->dfmaxelevation() <= 0 && this->dfmaxelevation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_dfmaxelevation(), target);
  }

  // double dfMinElevation = 12;
  if (!(this->dfminelevation() <= 0 && this->dfminelevation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dfminelevation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_EquipmentInfo_Proto)
  return target;
}

size_t USIM_EquipmentInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_EquipmentInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sEquipmentName = 1;
  if (this->sequipmentname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sequipmentname());
  }

  // bytes sTargetType = 10;
  if (this->stargettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stargettype());
  }

  // double dfMaxRange = 2;
  if (!(this->dfmaxrange() <= 0 && this->dfmaxrange() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfMinRange = 3;
  if (!(this->dfminrange() <= 0 && this->dfminrange() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfCenterHeading = 5;
  if (!(this->dfcenterheading() <= 0 && this->dfcenterheading() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uWeaponNum = 4;
  if (this->uweaponnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uweaponnum());
  }

  // bool isRelative = 6;
  if (this->isrelative() != 0) {
    total_size += 1 + 1;
  }

  // bool bAlive = 9;
  if (this->balive() != 0) {
    total_size += 1 + 1;
  }

  // double dfWidthB = 7;
  if (!(this->dfwidthb() <= 0 && this->dfwidthb() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfMaxElevation = 11;
  if (!(this->dfmaxelevation() <= 0 && this->dfmaxelevation() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfMinElevation = 12;
  if (!(this->dfminelevation() <= 0 && this->dfminelevation() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uBeamType = 8;
  if (this->ubeamtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ubeamtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_EquipmentInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_EquipmentInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_EquipmentInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_EquipmentInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_EquipmentInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_EquipmentInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_EquipmentInfo_Proto::MergeFrom(const USIM_EquipmentInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_EquipmentInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequipmentname().size() > 0) {
    _internal_set_sequipmentname(from._internal_sequipmentname());
  }
  if (from.stargettype().size() > 0) {
    _internal_set_stargettype(from._internal_stargettype());
  }
  if (!(from.dfmaxrange() <= 0 && from.dfmaxrange() >= 0)) {
    _internal_set_dfmaxrange(from._internal_dfmaxrange());
  }
  if (!(from.dfminrange() <= 0 && from.dfminrange() >= 0)) {
    _internal_set_dfminrange(from._internal_dfminrange());
  }
  if (!(from.dfcenterheading() <= 0 && from.dfcenterheading() >= 0)) {
    _internal_set_dfcenterheading(from._internal_dfcenterheading());
  }
  if (from.uweaponnum() != 0) {
    _internal_set_uweaponnum(from._internal_uweaponnum());
  }
  if (from.isrelative() != 0) {
    _internal_set_isrelative(from._internal_isrelative());
  }
  if (from.balive() != 0) {
    _internal_set_balive(from._internal_balive());
  }
  if (!(from.dfwidthb() <= 0 && from.dfwidthb() >= 0)) {
    _internal_set_dfwidthb(from._internal_dfwidthb());
  }
  if (!(from.dfmaxelevation() <= 0 && from.dfmaxelevation() >= 0)) {
    _internal_set_dfmaxelevation(from._internal_dfmaxelevation());
  }
  if (!(from.dfminelevation() <= 0 && from.dfminelevation() >= 0)) {
    _internal_set_dfminelevation(from._internal_dfminelevation());
  }
  if (from.ubeamtype() != 0) {
    _internal_set_ubeamtype(from._internal_ubeamtype());
  }
}

void USIM_EquipmentInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_EquipmentInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_EquipmentInfo_Proto::CopyFrom(const USIM_EquipmentInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_EquipmentInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_EquipmentInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_EquipmentInfo_Proto::InternalSwap(USIM_EquipmentInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sequipmentname_.Swap(&other->sequipmentname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stargettype_.Swap(&other->stargettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_EquipmentInfo_Proto, ubeamtype_)
      + sizeof(USIM_EquipmentInfo_Proto::ubeamtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_EquipmentInfo_Proto, dfmaxrange_)>(
          reinterpret_cast<char*>(&dfmaxrange_),
          reinterpret_cast<char*>(&other->dfmaxrange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_EquipmentInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_EquipmentLoadInfo_Proto::InitAsDefaultInstance() {
}
class USIM_EquipmentLoadInfo_Proto::_Internal {
 public:
};

USIM_EquipmentLoadInfo_Proto::USIM_EquipmentLoadInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vecequipmentinfolist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_EquipmentLoadInfo_Proto)
}
USIM_EquipmentLoadInfo_Proto::USIM_EquipmentLoadInfo_Proto(const USIM_EquipmentLoadInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecequipmentinfolist_(from.vecequipmentinfolist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_splatname().empty()) {
    splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_splatname(),
      GetArena());
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uequipmenttype_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(uequipmenttype_));
  // @@protoc_insertion_point(copy_constructor:USIM_EquipmentLoadInfo_Proto)
}

void USIM_EquipmentLoadInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto.base);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uequipmenttype_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(uequipmenttype_));
}

USIM_EquipmentLoadInfo_Proto::~USIM_EquipmentLoadInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_EquipmentLoadInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_EquipmentLoadInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  splatname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_EquipmentLoadInfo_Proto::ArenaDtor(void* object) {
  USIM_EquipmentLoadInfo_Proto* _this = reinterpret_cast< USIM_EquipmentLoadInfo_Proto* >(object);
  (void)_this;
}
void USIM_EquipmentLoadInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_EquipmentLoadInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_EquipmentLoadInfo_Proto& USIM_EquipmentLoadInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_EquipmentLoadInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_EquipmentLoadInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_EquipmentLoadInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecequipmentinfolist_.Clear();
  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uequipmenttype_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(uequipmenttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_EquipmentLoadInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 uID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes splatname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_splatname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEquipmentType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uequipmenttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_EquipmentInfo_Proto vecEquipmentInfoList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecequipmentinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_EquipmentLoadInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_EquipmentLoadInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uID = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uid(), target);
  }

  // bytes splatname = 2;
  if (this->splatname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_splatname(), target);
  }

  // uint32 uEquipmentType = 3;
  if (this->uequipmenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uequipmenttype(), target);
  }

  // repeated .USIM_EquipmentInfo_Proto vecEquipmentInfoList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vecequipmentinfolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vecequipmentinfolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_EquipmentLoadInfo_Proto)
  return target;
}

size_t USIM_EquipmentLoadInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_EquipmentLoadInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_EquipmentInfo_Proto vecEquipmentInfoList = 4;
  total_size += 1UL * this->_internal_vecequipmentinfolist_size();
  for (const auto& msg : this->vecequipmentinfolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes splatname = 2;
  if (this->splatname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_splatname());
  }

  // uint32 uID = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uEquipmentType = 3;
  if (this->uequipmenttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uequipmenttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_EquipmentLoadInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_EquipmentLoadInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_EquipmentLoadInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_EquipmentLoadInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_EquipmentLoadInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_EquipmentLoadInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_EquipmentLoadInfo_Proto::MergeFrom(const USIM_EquipmentLoadInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_EquipmentLoadInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vecequipmentinfolist_.MergeFrom(from.vecequipmentinfolist_);
  if (from.splatname().size() > 0) {
    _internal_set_splatname(from._internal_splatname());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.uequipmenttype() != 0) {
    _internal_set_uequipmenttype(from._internal_uequipmenttype());
  }
}

void USIM_EquipmentLoadInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_EquipmentLoadInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_EquipmentLoadInfo_Proto::CopyFrom(const USIM_EquipmentLoadInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_EquipmentLoadInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_EquipmentLoadInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_EquipmentLoadInfo_Proto::InternalSwap(USIM_EquipmentLoadInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vecequipmentinfolist_.InternalSwap(&other->vecequipmentinfolist_);
  splatname_.Swap(&other->splatname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_EquipmentLoadInfo_Proto, uequipmenttype_)
      + sizeof(USIM_EquipmentLoadInfo_Proto::uequipmenttype_)
      - PROTOBUF_FIELD_OFFSET(USIM_EquipmentLoadInfo_Proto, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_EquipmentLoadInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_Detection_Proto::InitAsDefaultInstance() {
}
class USIM_Detection_Proto::_Internal {
 public:
};

USIM_Detection_Proto::USIM_Detection_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_Detection_Proto)
}
USIM_Detection_Proto::USIM_Detection_Proto(const USIM_Detection_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csensorname().empty()) {
    csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_csensorname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&utype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(utype_));
  // @@protoc_insertion_point(copy_constructor:USIM_Detection_Proto)
}

void USIM_Detection_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_Detection_Proto_USimDataStructm_2eproto.base);
  csensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(utype_));
}

USIM_Detection_Proto::~USIM_Detection_Proto() {
  // @@protoc_insertion_point(destructor:USIM_Detection_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_Detection_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  csensorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_Detection_Proto::ArenaDtor(void* object) {
  USIM_Detection_Proto* _this = reinterpret_cast< USIM_Detection_Proto* >(object);
  (void)_this;
}
void USIM_Detection_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_Detection_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_Detection_Proto& USIM_Detection_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_Detection_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_Detection_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_Detection_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(utype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_Detection_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cSensorName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_csensorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          utargetnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uAttribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uattribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uKind = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ukind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uClass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          uclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          utype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfDistance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dfdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfOrientation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          dforientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_Detection_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_Detection_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes cSensorName = 3;
  if (this->csensorname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_csensorname(), target);
  }

  // uint32 uTargetID = 4;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_utargetid(), target);
  }

  // uint32 uTargetNumber = 5;
  if (this->utargetnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_utargetnumber(), target);
  }

  // uint32 uAttribute = 6;
  if (this->uattribute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uattribute(), target);
  }

  // uint32 uKind = 7;
  if (this->ukind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ukind(), target);
  }

  // uint32 uClass = 8;
  if (this->uclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uclass(), target);
  }

  // uint32 uType = 9;
  if (this->utype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_utype(), target);
  }

  // double dfDistance = 10;
  if (!(this->dfdistance() <= 0 && this->dfdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dfdistance(), target);
  }

  // double dfOrientation = 11;
  if (!(this->dforientation() <= 0 && this->dforientation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_dforientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_Detection_Proto)
  return target;
}

size_t USIM_Detection_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_Detection_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cSensorName = 3;
  if (this->csensorname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_csensorname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 4;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uTargetNumber = 5;
  if (this->utargetnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetnumber());
  }

  // uint32 uAttribute = 6;
  if (this->uattribute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uattribute());
  }

  // uint32 uKind = 7;
  if (this->ukind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ukind());
  }

  // uint32 uClass = 8;
  if (this->uclass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uclass());
  }

  // double dfDistance = 10;
  if (!(this->dfdistance() <= 0 && this->dfdistance() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfOrientation = 11;
  if (!(this->dforientation() <= 0 && this->dforientation() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uType = 9;
  if (this->utype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_Detection_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_Detection_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_Detection_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_Detection_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_Detection_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_Detection_Proto)
    MergeFrom(*source);
  }
}

void USIM_Detection_Proto::MergeFrom(const USIM_Detection_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_Detection_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.csensorname().size() > 0) {
    _internal_set_csensorname(from._internal_csensorname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.utargetnumber() != 0) {
    _internal_set_utargetnumber(from._internal_utargetnumber());
  }
  if (from.uattribute() != 0) {
    _internal_set_uattribute(from._internal_uattribute());
  }
  if (from.ukind() != 0) {
    _internal_set_ukind(from._internal_ukind());
  }
  if (from.uclass() != 0) {
    _internal_set_uclass(from._internal_uclass());
  }
  if (!(from.dfdistance() <= 0 && from.dfdistance() >= 0)) {
    _internal_set_dfdistance(from._internal_dfdistance());
  }
  if (!(from.dforientation() <= 0 && from.dforientation() >= 0)) {
    _internal_set_dforientation(from._internal_dforientation());
  }
  if (from.utype() != 0) {
    _internal_set_utype(from._internal_utype());
  }
}

void USIM_Detection_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_Detection_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_Detection_Proto::CopyFrom(const USIM_Detection_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_Detection_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_Detection_Proto::IsInitialized() const {
  return true;
}

void USIM_Detection_Proto::InternalSwap(USIM_Detection_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  csensorname_.Swap(&other->csensorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_Detection_Proto, utype_)
      + sizeof(USIM_Detection_Proto::utype_)
      - PROTOBUF_FIELD_OFFSET(USIM_Detection_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_Detection_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_Fusion_Proto::InitAsDefaultInstance() {
}
class USIM_Fusion_Proto::_Internal {
 public:
};

USIM_Fusion_Proto::USIM_Fusion_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_Fusion_Proto)
}
USIM_Fusion_Proto::USIM_Fusion_Proto(const USIM_Fusion_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dftargetspeed_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dftargetspeed_));
  // @@protoc_insertion_point(copy_constructor:USIM_Fusion_Proto)
}

void USIM_Fusion_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dftargetspeed_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dftargetspeed_));
}

USIM_Fusion_Proto::~USIM_Fusion_Proto() {
  // @@protoc_insertion_point(destructor:USIM_Fusion_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_Fusion_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_Fusion_Proto::ArenaDtor(void* object) {
  USIM_Fusion_Proto* _this = reinterpret_cast< USIM_Fusion_Proto* >(object);
  (void)_this;
}
void USIM_Fusion_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_Fusion_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_Fusion_Proto& USIM_Fusion_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_Fusion_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_Fusion_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_Fusion_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dftargetspeed_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dftargetspeed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_Fusion_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTrackNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetAffinity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utargetaffinity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cTargetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ctargettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfTargetLon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          dftargetlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfTargetLat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dftargetlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfTargetAlt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dftargetalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfTargetHeading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dftargetheading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfTargetSpeed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dftargetspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_Fusion_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_Fusion_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTrackNumber = 3;
  if (this->utracknumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utracknumber(), target);
  }

  // uint32 uTargetAffinity = 4;
  if (this->utargetaffinity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_utargetaffinity(), target);
  }

  // uint32 cTargetType = 5;
  if (this->ctargettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ctargettype(), target);
  }

  // double dfTargetLon = 6;
  if (!(this->dftargetlon() <= 0 && this->dftargetlon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dftargetlon(), target);
  }

  // double dfTargetLat = 7;
  if (!(this->dftargetlat() <= 0 && this->dftargetlat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dftargetlat(), target);
  }

  // double dfTargetAlt = 8;
  if (!(this->dftargetalt() <= 0 && this->dftargetalt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_dftargetalt(), target);
  }

  // double dfTargetHeading = 9;
  if (!(this->dftargetheading() <= 0 && this->dftargetheading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dftargetheading(), target);
  }

  // double dfTargetSpeed = 10;
  if (!(this->dftargetspeed() <= 0 && this->dftargetspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dftargetspeed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_Fusion_Proto)
  return target;
}

size_t USIM_Fusion_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_Fusion_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTrackNumber = 3;
  if (this->utracknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utracknumber());
  }

  // uint32 uTargetAffinity = 4;
  if (this->utargetaffinity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetaffinity());
  }

  // uint32 cTargetType = 5;
  if (this->ctargettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ctargettype());
  }

  // double dfTargetLon = 6;
  if (!(this->dftargetlon() <= 0 && this->dftargetlon() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfTargetLat = 7;
  if (!(this->dftargetlat() <= 0 && this->dftargetlat() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfTargetAlt = 8;
  if (!(this->dftargetalt() <= 0 && this->dftargetalt() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfTargetHeading = 9;
  if (!(this->dftargetheading() <= 0 && this->dftargetheading() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfTargetSpeed = 10;
  if (!(this->dftargetspeed() <= 0 && this->dftargetspeed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_Fusion_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_Fusion_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_Fusion_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_Fusion_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_Fusion_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_Fusion_Proto)
    MergeFrom(*source);
  }
}

void USIM_Fusion_Proto::MergeFrom(const USIM_Fusion_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_Fusion_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utracknumber() != 0) {
    _internal_set_utracknumber(from._internal_utracknumber());
  }
  if (from.utargetaffinity() != 0) {
    _internal_set_utargetaffinity(from._internal_utargetaffinity());
  }
  if (from.ctargettype() != 0) {
    _internal_set_ctargettype(from._internal_ctargettype());
  }
  if (!(from.dftargetlon() <= 0 && from.dftargetlon() >= 0)) {
    _internal_set_dftargetlon(from._internal_dftargetlon());
  }
  if (!(from.dftargetlat() <= 0 && from.dftargetlat() >= 0)) {
    _internal_set_dftargetlat(from._internal_dftargetlat());
  }
  if (!(from.dftargetalt() <= 0 && from.dftargetalt() >= 0)) {
    _internal_set_dftargetalt(from._internal_dftargetalt());
  }
  if (!(from.dftargetheading() <= 0 && from.dftargetheading() >= 0)) {
    _internal_set_dftargetheading(from._internal_dftargetheading());
  }
  if (!(from.dftargetspeed() <= 0 && from.dftargetspeed() >= 0)) {
    _internal_set_dftargetspeed(from._internal_dftargetspeed());
  }
}

void USIM_Fusion_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_Fusion_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_Fusion_Proto::CopyFrom(const USIM_Fusion_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_Fusion_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_Fusion_Proto::IsInitialized() const {
  return true;
}

void USIM_Fusion_Proto::InternalSwap(USIM_Fusion_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_Fusion_Proto, dftargetspeed_)
      + sizeof(USIM_Fusion_Proto::dftargetspeed_)
      - PROTOBUF_FIELD_OFFSET(USIM_Fusion_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_Fusion_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_DetectionEvent_Proto::InitAsDefaultInstance() {
}
class USIM_DetectionEvent_Proto::_Internal {
 public:
};

USIM_DetectionEvent_Proto::USIM_DetectionEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_DetectionEvent_Proto)
}
USIM_DetectionEvent_Proto::USIM_DetectionEvent_Proto(const USIM_DetectionEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  csensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_csensorname().empty()) {
    csensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_csensorname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ueventtype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_DetectionEvent_Proto)
}

void USIM_DetectionEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto.base);
  csensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
}

USIM_DetectionEvent_Proto::~USIM_DetectionEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_DetectionEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_DetectionEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  csensorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_DetectionEvent_Proto::ArenaDtor(void* object) {
  USIM_DetectionEvent_Proto* _this = reinterpret_cast< USIM_DetectionEvent_Proto* >(object);
  (void)_this;
}
void USIM_DetectionEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_DetectionEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_DetectionEvent_Proto& USIM_DetectionEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_DetectionEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_DetectionEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_DetectionEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_DetectionEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uPlatID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetPlatID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cSensorName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_csensorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_DetectionEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_DetectionEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uPlatID = 2;
  if (this->uplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uplatid(), target);
  }

  // uint32 uTargetPlatID = 3;
  if (this->utargetplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetplatid(), target);
  }

  // bytes cSensorName = 4;
  if (this->csensorname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_csensorname(), target);
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ueventtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_DetectionEvent_Proto)
  return target;
}

size_t USIM_DetectionEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_DetectionEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cSensorName = 4;
  if (this->csensorname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_csensorname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlatID = 2;
  if (this->uplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplatid());
  }

  // uint32 uTargetPlatID = 3;
  if (this->utargetplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetplatid());
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_DetectionEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_DetectionEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_DetectionEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_DetectionEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_DetectionEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_DetectionEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_DetectionEvent_Proto::MergeFrom(const USIM_DetectionEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_DetectionEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.csensorname().size() > 0) {
    _internal_set_csensorname(from._internal_csensorname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplatid() != 0) {
    _internal_set_uplatid(from._internal_uplatid());
  }
  if (from.utargetplatid() != 0) {
    _internal_set_utargetplatid(from._internal_utargetplatid());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
}

void USIM_DetectionEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_DetectionEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_DetectionEvent_Proto::CopyFrom(const USIM_DetectionEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_DetectionEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_DetectionEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_DetectionEvent_Proto::InternalSwap(USIM_DetectionEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  csensorname_.Swap(&other->csensorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_DetectionEvent_Proto, ueventtype_)
      + sizeof(USIM_DetectionEvent_Proto::ueventtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_DetectionEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_DetectionEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_FusionEvent_Proto::InitAsDefaultInstance() {
}
class USIM_FusionEvent_Proto::_Internal {
 public:
};

USIM_FusionEvent_Proto::USIM_FusionEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_FusionEvent_Proto)
}
USIM_FusionEvent_Proto::USIM_FusionEvent_Proto(const USIM_FusionEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ueventtype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_FusionEvent_Proto)
}

void USIM_FusionEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
}

USIM_FusionEvent_Proto::~USIM_FusionEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_FusionEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_FusionEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_FusionEvent_Proto::ArenaDtor(void* object) {
  USIM_FusionEvent_Proto* _this = reinterpret_cast< USIM_FusionEvent_Proto* >(object);
  (void)_this;
}
void USIM_FusionEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_FusionEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_FusionEvent_Proto& USIM_FusionEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_FusionEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_FusionEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_FusionEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_FusionEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetPlatID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utargetplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_FusionEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_FusionEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetid(), target);
  }

  // uint32 uTargetPlatID = 4;
  if (this->utargetplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_utargetplatid(), target);
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ueventtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_FusionEvent_Proto)
  return target;
}

size_t USIM_FusionEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_FusionEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uTargetPlatID = 4;
  if (this->utargetplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetplatid());
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_FusionEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_FusionEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_FusionEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_FusionEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_FusionEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_FusionEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_FusionEvent_Proto::MergeFrom(const USIM_FusionEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_FusionEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.utargetplatid() != 0) {
    _internal_set_utargetplatid(from._internal_utargetplatid());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
}

void USIM_FusionEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_FusionEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_FusionEvent_Proto::CopyFrom(const USIM_FusionEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_FusionEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_FusionEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_FusionEvent_Proto::InternalSwap(USIM_FusionEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_FusionEvent_Proto, ueventtype_)
      + sizeof(USIM_FusionEvent_Proto::ueventtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_FusionEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_FusionEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CommunicationEvent_Proto::InitAsDefaultInstance() {
}
class USIM_CommunicationEvent_Proto::_Internal {
 public:
};

USIM_CommunicationEvent_Proto::USIM_CommunicationEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CommunicationEvent_Proto)
}
USIM_CommunicationEvent_Proto::USIM_CommunicationEvent_Proto(const USIM_CommunicationEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uframeno_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
  // @@protoc_insertion_point(copy_constructor:USIM_CommunicationEvent_Proto)
}

void USIM_CommunicationEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uframeno_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
}

USIM_CommunicationEvent_Proto::~USIM_CommunicationEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CommunicationEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CommunicationEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_CommunicationEvent_Proto::ArenaDtor(void* object) {
  USIM_CommunicationEvent_Proto* _this = reinterpret_cast< USIM_CommunicationEvent_Proto* >(object);
  (void)_this;
}
void USIM_CommunicationEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CommunicationEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CommunicationEvent_Proto& USIM_CommunicationEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CommunicationEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CommunicationEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CommunicationEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uframeno_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CommunicationEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uReceiverID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ureceiverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uframeNo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          uframeno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CommunicationEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CommunicationEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uReceiverID = 3;
  if (this->ureceiverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ureceiverid(), target);
  }

  // uint32 uTargetID = 4;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_utargetid(), target);
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ueventtype(), target);
  }

  // uint32 uframeNo = 6;
  if (this->uframeno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uframeno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CommunicationEvent_Proto)
  return target;
}

size_t USIM_CommunicationEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CommunicationEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uReceiverID = 3;
  if (this->ureceiverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ureceiverid());
  }

  // uint32 uTargetID = 4;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  // uint32 uframeNo = 6;
  if (this->uframeno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uframeno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CommunicationEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CommunicationEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CommunicationEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CommunicationEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CommunicationEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CommunicationEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_CommunicationEvent_Proto::MergeFrom(const USIM_CommunicationEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CommunicationEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.ureceiverid() != 0) {
    _internal_set_ureceiverid(from._internal_ureceiverid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
  if (from.uframeno() != 0) {
    _internal_set_uframeno(from._internal_uframeno());
  }
}

void USIM_CommunicationEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CommunicationEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CommunicationEvent_Proto::CopyFrom(const USIM_CommunicationEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CommunicationEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CommunicationEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_CommunicationEvent_Proto::InternalSwap(USIM_CommunicationEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CommunicationEvent_Proto, uframeno_)
      + sizeof(USIM_CommunicationEvent_Proto::uframeno_)
      - PROTOBUF_FIELD_OFFSET(USIM_CommunicationEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CommunicationEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CommandControlEvent_Proto::InitAsDefaultInstance() {
}
class USIM_CommandControlEvent_Proto::_Internal {
 public:
};

USIM_CommandControlEvent_Proto::USIM_CommandControlEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CommandControlEvent_Proto)
}
USIM_CommandControlEvent_Proto::USIM_CommandControlEvent_Proto(const USIM_CommandControlEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sslaveequipmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sslaveequipmentname().empty()) {
    sslaveequipmentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sslaveequipmentname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uframeno_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
  // @@protoc_insertion_point(copy_constructor:USIM_CommandControlEvent_Proto)
}

void USIM_CommandControlEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto.base);
  sslaveequipmentname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uframeno_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
}

USIM_CommandControlEvent_Proto::~USIM_CommandControlEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CommandControlEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CommandControlEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sslaveequipmentname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_CommandControlEvent_Proto::ArenaDtor(void* object) {
  USIM_CommandControlEvent_Proto* _this = reinterpret_cast< USIM_CommandControlEvent_Proto* >(object);
  (void)_this;
}
void USIM_CommandControlEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CommandControlEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CommandControlEvent_Proto& USIM_CommandControlEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CommandControlEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CommandControlEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CommandControlEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sslaveequipmentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uframeno_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uframeno_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CommandControlEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uHostID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uhostid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sSlaveID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sslaveid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sSlaveEquipmentName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sslaveequipmentname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          utargettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfLon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dflon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dflat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfAlt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dfalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uCommandType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ucommandtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uframeNo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          uframeno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CommandControlEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CommandControlEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uHostID = 2;
  if (this->uhostid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uhostid(), target);
  }

  // uint32 sSlaveID = 3;
  if (this->sslaveid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sslaveid(), target);
  }

  // bytes sSlaveEquipmentName = 4;
  if (this->sslaveequipmentname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sslaveequipmentname(), target);
  }

  // uint32 uTargetType = 5;
  if (this->utargettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_utargettype(), target);
  }

  // uint32 uTargetID = 6;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_utargetid(), target);
  }

  // double dfLon = 7;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dflon(), target);
  }

  // double dfLat = 8;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_dflat(), target);
  }

  // double dfAlt = 9;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dfalt(), target);
  }

  // uint32 uCommandType = 10;
  if (this->ucommandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ucommandtype(), target);
  }

  // uint32 uEventType = 11;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ueventtype(), target);
  }

  // uint32 uframeNo = 12;
  if (this->uframeno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_uframeno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CommandControlEvent_Proto)
  return target;
}

size_t USIM_CommandControlEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CommandControlEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sSlaveEquipmentName = 4;
  if (this->sslaveequipmentname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sslaveequipmentname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uHostID = 2;
  if (this->uhostid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uhostid());
  }

  // uint32 sSlaveID = 3;
  if (this->sslaveid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sslaveid());
  }

  // uint32 uTargetType = 5;
  if (this->utargettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargettype());
  }

  // uint32 uTargetID = 6;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // double dfLon = 7;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLat = 8;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfAlt = 9;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uCommandType = 10;
  if (this->ucommandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ucommandtype());
  }

  // uint32 uEventType = 11;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  // uint32 uframeNo = 12;
  if (this->uframeno() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uframeno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CommandControlEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CommandControlEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CommandControlEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CommandControlEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CommandControlEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CommandControlEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_CommandControlEvent_Proto::MergeFrom(const USIM_CommandControlEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CommandControlEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sslaveequipmentname().size() > 0) {
    _internal_set_sslaveequipmentname(from._internal_sslaveequipmentname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uhostid() != 0) {
    _internal_set_uhostid(from._internal_uhostid());
  }
  if (from.sslaveid() != 0) {
    _internal_set_sslaveid(from._internal_sslaveid());
  }
  if (from.utargettype() != 0) {
    _internal_set_utargettype(from._internal_utargettype());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (!(from.dflon() <= 0 && from.dflon() >= 0)) {
    _internal_set_dflon(from._internal_dflon());
  }
  if (!(from.dflat() <= 0 && from.dflat() >= 0)) {
    _internal_set_dflat(from._internal_dflat());
  }
  if (!(from.dfalt() <= 0 && from.dfalt() >= 0)) {
    _internal_set_dfalt(from._internal_dfalt());
  }
  if (from.ucommandtype() != 0) {
    _internal_set_ucommandtype(from._internal_ucommandtype());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
  if (from.uframeno() != 0) {
    _internal_set_uframeno(from._internal_uframeno());
  }
}

void USIM_CommandControlEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CommandControlEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CommandControlEvent_Proto::CopyFrom(const USIM_CommandControlEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CommandControlEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CommandControlEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_CommandControlEvent_Proto::InternalSwap(USIM_CommandControlEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sslaveequipmentname_.Swap(&other->sslaveequipmentname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CommandControlEvent_Proto, uframeno_)
      + sizeof(USIM_CommandControlEvent_Proto::uframeno_)
      - PROTOBUF_FIELD_OFFSET(USIM_CommandControlEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CommandControlEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_WeaponSystemEvent_Proto::InitAsDefaultInstance() {
}
class USIM_WeaponSystemEvent_Proto::_Internal {
 public:
};

USIM_WeaponSystemEvent_Proto::USIM_WeaponSystemEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_WeaponSystemEvent_Proto)
}
USIM_WeaponSystemEvent_Proto::USIM_WeaponSystemEvent_Proto(const USIM_WeaponSystemEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cweaponname().empty()) {
    cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cweaponname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uweaponsystemeventtype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponsystemeventtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_WeaponSystemEvent_Proto)
}

void USIM_WeaponSystemEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto.base);
  cweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uweaponsystemeventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponsystemeventtype_));
}

USIM_WeaponSystemEvent_Proto::~USIM_WeaponSystemEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_WeaponSystemEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_WeaponSystemEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cweaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_WeaponSystemEvent_Proto::ArenaDtor(void* object) {
  USIM_WeaponSystemEvent_Proto* _this = reinterpret_cast< USIM_WeaponSystemEvent_Proto* >(object);
  (void)_this;
}
void USIM_WeaponSystemEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_WeaponSystemEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_WeaponSystemEvent_Proto& USIM_WeaponSystemEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_WeaponSystemEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_WeaponSystemEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_WeaponSystemEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uweaponsystemeventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponsystemeventtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_WeaponSystemEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ctargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uWeaponSystemEventType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uweaponsystemeventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cWeaponName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_cweaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_WeaponSystemEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_WeaponSystemEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 cTargetID = 3;
  if (this->ctargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ctargetid(), target);
  }

  // uint32 uWeaponSystemEventType = 4;
  if (this->uweaponsystemeventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uweaponsystemeventtype(), target);
  }

  // bytes cWeaponName = 5;
  if (this->cweaponname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_cweaponname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_WeaponSystemEvent_Proto)
  return target;
}

size_t USIM_WeaponSystemEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_WeaponSystemEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cWeaponName = 5;
  if (this->cweaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cweaponname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 cTargetID = 3;
  if (this->ctargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ctargetid());
  }

  // uint32 uWeaponSystemEventType = 4;
  if (this->uweaponsystemeventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uweaponsystemeventtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_WeaponSystemEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_WeaponSystemEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_WeaponSystemEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_WeaponSystemEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_WeaponSystemEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_WeaponSystemEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_WeaponSystemEvent_Proto::MergeFrom(const USIM_WeaponSystemEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_WeaponSystemEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cweaponname().size() > 0) {
    _internal_set_cweaponname(from._internal_cweaponname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.ctargetid() != 0) {
    _internal_set_ctargetid(from._internal_ctargetid());
  }
  if (from.uweaponsystemeventtype() != 0) {
    _internal_set_uweaponsystemeventtype(from._internal_uweaponsystemeventtype());
  }
}

void USIM_WeaponSystemEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_WeaponSystemEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_WeaponSystemEvent_Proto::CopyFrom(const USIM_WeaponSystemEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_WeaponSystemEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_WeaponSystemEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_WeaponSystemEvent_Proto::InternalSwap(USIM_WeaponSystemEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cweaponname_.Swap(&other->cweaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_WeaponSystemEvent_Proto, uweaponsystemeventtype_)
      + sizeof(USIM_WeaponSystemEvent_Proto::uweaponsystemeventtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_WeaponSystemEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_WeaponSystemEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_WeaponLaunchEvent_Proto::InitAsDefaultInstance() {
}
class USIM_WeaponLaunchEvent_Proto::_Internal {
 public:
};

USIM_WeaponLaunchEvent_Proto::USIM_WeaponLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_WeaponLaunchEvent_Proto)
}
USIM_WeaponLaunchEvent_Proto::USIM_WeaponLaunchEvent_Proto(const USIM_WeaponLaunchEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cweaponname().empty()) {
    cweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cweaponname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uweaponnum_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponnum_));
  // @@protoc_insertion_point(copy_constructor:USIM_WeaponLaunchEvent_Proto)
}

void USIM_WeaponLaunchEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto.base);
  cweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uweaponnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponnum_));
}

USIM_WeaponLaunchEvent_Proto::~USIM_WeaponLaunchEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_WeaponLaunchEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_WeaponLaunchEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cweaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_WeaponLaunchEvent_Proto::ArenaDtor(void* object) {
  USIM_WeaponLaunchEvent_Proto* _this = reinterpret_cast< USIM_WeaponLaunchEvent_Proto* >(object);
  (void)_this;
}
void USIM_WeaponLaunchEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_WeaponLaunchEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_WeaponLaunchEvent_Proto& USIM_WeaponLaunchEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_WeaponLaunchEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_WeaponLaunchEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_WeaponLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uweaponnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uweaponnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_WeaponLaunchEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cWeaponName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cweaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uWeaponNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uweaponnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_WeaponLaunchEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_WeaponLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetid(), target);
  }

  // bytes cWeaponName = 4;
  if (this->cweaponname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cweaponname(), target);
  }

  // uint32 uWeaponNum = 5;
  if (this->uweaponnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uweaponnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_WeaponLaunchEvent_Proto)
  return target;
}

size_t USIM_WeaponLaunchEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_WeaponLaunchEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cWeaponName = 4;
  if (this->cweaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cweaponname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uWeaponNum = 5;
  if (this->uweaponnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uweaponnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_WeaponLaunchEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_WeaponLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_WeaponLaunchEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_WeaponLaunchEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_WeaponLaunchEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_WeaponLaunchEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_WeaponLaunchEvent_Proto::MergeFrom(const USIM_WeaponLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_WeaponLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cweaponname().size() > 0) {
    _internal_set_cweaponname(from._internal_cweaponname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.uweaponnum() != 0) {
    _internal_set_uweaponnum(from._internal_uweaponnum());
  }
}

void USIM_WeaponLaunchEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_WeaponLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_WeaponLaunchEvent_Proto::CopyFrom(const USIM_WeaponLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_WeaponLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_WeaponLaunchEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_WeaponLaunchEvent_Proto::InternalSwap(USIM_WeaponLaunchEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cweaponname_.Swap(&other->cweaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_WeaponLaunchEvent_Proto, uweaponnum_)
      + sizeof(USIM_WeaponLaunchEvent_Proto::uweaponnum_)
      - PROTOBUF_FIELD_OFFSET(USIM_WeaponLaunchEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_WeaponLaunchEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_DecoyLaunchEvent_Proto::InitAsDefaultInstance() {
}
class USIM_DecoyLaunchEvent_Proto::_Internal {
 public:
};

USIM_DecoyLaunchEvent_Proto::USIM_DecoyLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_DecoyLaunchEvent_Proto)
}
USIM_DecoyLaunchEvent_Proto::USIM_DecoyLaunchEvent_Proto(const USIM_DecoyLaunchEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cbaitname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cbaitname().empty()) {
    cbaitname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cbaitname(),
      GetArena());
  }
  ::memcpy(&dfsitime_, &from.dfsitime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ubaitnum_) -
    reinterpret_cast<char*>(&dfsitime_)) + sizeof(ubaitnum_));
  // @@protoc_insertion_point(copy_constructor:USIM_DecoyLaunchEvent_Proto)
}

void USIM_DecoyLaunchEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto.base);
  cbaitname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsitime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaitnum_) -
      reinterpret_cast<char*>(&dfsitime_)) + sizeof(ubaitnum_));
}

USIM_DecoyLaunchEvent_Proto::~USIM_DecoyLaunchEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_DecoyLaunchEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_DecoyLaunchEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cbaitname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_DecoyLaunchEvent_Proto::ArenaDtor(void* object) {
  USIM_DecoyLaunchEvent_Proto* _this = reinterpret_cast< USIM_DecoyLaunchEvent_Proto* >(object);
  (void)_this;
}
void USIM_DecoyLaunchEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_DecoyLaunchEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_DecoyLaunchEvent_Proto& USIM_DecoyLaunchEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_DecoyLaunchEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_DecoyLaunchEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_DecoyLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cbaitname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsitime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaitnum_) -
      reinterpret_cast<char*>(&dfsitime_)) + sizeof(ubaitnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_DecoyLaunchEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSiTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsitime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cBaitName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cbaitname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uBaitNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ubaitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_DecoyLaunchEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_DecoyLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSiTime = 1;
  if (!(this->dfsitime() <= 0 && this->dfsitime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsitime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes cBaitName = 3;
  if (this->cbaitname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cbaitname(), target);
  }

  // uint32 uBaitNum = 4;
  if (this->ubaitnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ubaitnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_DecoyLaunchEvent_Proto)
  return target;
}

size_t USIM_DecoyLaunchEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_DecoyLaunchEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cBaitName = 3;
  if (this->cbaitname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cbaitname());
  }

  // double dfSiTime = 1;
  if (!(this->dfsitime() <= 0 && this->dfsitime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uBaitNum = 4;
  if (this->ubaitnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ubaitnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_DecoyLaunchEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_DecoyLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_DecoyLaunchEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_DecoyLaunchEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_DecoyLaunchEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_DecoyLaunchEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_DecoyLaunchEvent_Proto::MergeFrom(const USIM_DecoyLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_DecoyLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cbaitname().size() > 0) {
    _internal_set_cbaitname(from._internal_cbaitname());
  }
  if (!(from.dfsitime() <= 0 && from.dfsitime() >= 0)) {
    _internal_set_dfsitime(from._internal_dfsitime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.ubaitnum() != 0) {
    _internal_set_ubaitnum(from._internal_ubaitnum());
  }
}

void USIM_DecoyLaunchEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_DecoyLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_DecoyLaunchEvent_Proto::CopyFrom(const USIM_DecoyLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_DecoyLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_DecoyLaunchEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_DecoyLaunchEvent_Proto::InternalSwap(USIM_DecoyLaunchEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cbaitname_.Swap(&other->cbaitname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_DecoyLaunchEvent_Proto, ubaitnum_)
      + sizeof(USIM_DecoyLaunchEvent_Proto::ubaitnum_)
      - PROTOBUF_FIELD_OFFSET(USIM_DecoyLaunchEvent_Proto, dfsitime_)>(
          reinterpret_cast<char*>(&dfsitime_),
          reinterpret_cast<char*>(&other->dfsitime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_DecoyLaunchEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_ElectronicWarEvent_Proto::InitAsDefaultInstance() {
}
class USIM_ElectronicWarEvent_Proto::_Internal {
 public:
};

USIM_ElectronicWarEvent_Proto::USIM_ElectronicWarEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_ElectronicWarEvent_Proto)
}
USIM_ElectronicWarEvent_Proto::USIM_ElectronicWarEvent_Proto(const USIM_ElectronicWarEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cjammingsystemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cjammingsystemname().empty()) {
    cjammingsystemname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cjammingsystemname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ueventtype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_ElectronicWarEvent_Proto)
}

void USIM_ElectronicWarEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto.base);
  cjammingsystemname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
}

USIM_ElectronicWarEvent_Proto::~USIM_ElectronicWarEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_ElectronicWarEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_ElectronicWarEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cjammingsystemname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_ElectronicWarEvent_Proto::ArenaDtor(void* object) {
  USIM_ElectronicWarEvent_Proto* _this = reinterpret_cast< USIM_ElectronicWarEvent_Proto* >(object);
  (void)_this;
}
void USIM_ElectronicWarEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_ElectronicWarEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_ElectronicWarEvent_Proto& USIM_ElectronicWarEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_ElectronicWarEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_ElectronicWarEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_ElectronicWarEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cjammingsystemname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_ElectronicWarEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cJammingSystemName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_cjammingsystemname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_ElectronicWarEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_ElectronicWarEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetid(), target);
  }

  // bytes cJammingSystemName = 4;
  if (this->cjammingsystemname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_cjammingsystemname(), target);
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ueventtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_ElectronicWarEvent_Proto)
  return target;
}

size_t USIM_ElectronicWarEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_ElectronicWarEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cJammingSystemName = 4;
  if (this->cjammingsystemname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cjammingsystemname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_ElectronicWarEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_ElectronicWarEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_ElectronicWarEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_ElectronicWarEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_ElectronicWarEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_ElectronicWarEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_ElectronicWarEvent_Proto::MergeFrom(const USIM_ElectronicWarEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_ElectronicWarEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cjammingsystemname().size() > 0) {
    _internal_set_cjammingsystemname(from._internal_cjammingsystemname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
}

void USIM_ElectronicWarEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_ElectronicWarEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_ElectronicWarEvent_Proto::CopyFrom(const USIM_ElectronicWarEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_ElectronicWarEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_ElectronicWarEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_ElectronicWarEvent_Proto::InternalSwap(USIM_ElectronicWarEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cjammingsystemname_.Swap(&other->cjammingsystemname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_ElectronicWarEvent_Proto, ueventtype_)
      + sizeof(USIM_ElectronicWarEvent_Proto::ueventtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_ElectronicWarEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_ElectronicWarEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_SensorStateEvent_Proto::InitAsDefaultInstance() {
}
class USIM_SensorStateEvent_Proto::_Internal {
 public:
};

USIM_SensorStateEvent_Proto::USIM_SensorStateEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_SensorStateEvent_Proto)
}
USIM_SensorStateEvent_Proto::USIM_SensorStateEvent_Proto(const USIM_SensorStateEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssensorname().empty()) {
    ssensorname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssensorname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&usensoraction_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(usensoraction_));
  // @@protoc_insertion_point(copy_constructor:USIM_SensorStateEvent_Proto)
}

void USIM_SensorStateEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto.base);
  ssensorname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usensoraction_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(usensoraction_));
}

USIM_SensorStateEvent_Proto::~USIM_SensorStateEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_SensorStateEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_SensorStateEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssensorname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_SensorStateEvent_Proto::ArenaDtor(void* object) {
  USIM_SensorStateEvent_Proto* _this = reinterpret_cast< USIM_SensorStateEvent_Proto* >(object);
  (void)_this;
}
void USIM_SensorStateEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_SensorStateEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_SensorStateEvent_Proto& USIM_SensorStateEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_SensorStateEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_SensorStateEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_SensorStateEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssensorname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usensoraction_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(usensoraction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_SensorStateEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sSensorName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ssensorname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uSensorAction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          usensoraction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_SensorStateEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_SensorStateEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sSensorName = 3;
  if (this->ssensorname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_ssensorname(), target);
  }

  // uint32 uSensorAction = 4;
  if (this->usensoraction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_usensoraction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_SensorStateEvent_Proto)
  return target;
}

size_t USIM_SensorStateEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_SensorStateEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sSensorName = 3;
  if (this->ssensorname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ssensorname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uSensorAction = 4;
  if (this->usensoraction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usensoraction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_SensorStateEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_SensorStateEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_SensorStateEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_SensorStateEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_SensorStateEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_SensorStateEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_SensorStateEvent_Proto::MergeFrom(const USIM_SensorStateEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_SensorStateEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssensorname().size() > 0) {
    _internal_set_ssensorname(from._internal_ssensorname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.usensoraction() != 0) {
    _internal_set_usensoraction(from._internal_usensoraction());
  }
}

void USIM_SensorStateEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_SensorStateEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_SensorStateEvent_Proto::CopyFrom(const USIM_SensorStateEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_SensorStateEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_SensorStateEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_SensorStateEvent_Proto::InternalSwap(USIM_SensorStateEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssensorname_.Swap(&other->ssensorname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_SensorStateEvent_Proto, usensoraction_)
      + sizeof(USIM_SensorStateEvent_Proto::usensoraction_)
      - PROTOBUF_FIELD_OFFSET(USIM_SensorStateEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_SensorStateEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_BattleResultEvent_Proto::InitAsDefaultInstance() {
}
class USIM_BattleResultEvent_Proto::_Internal {
 public:
};

USIM_BattleResultEvent_Proto::USIM_BattleResultEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_BattleResultEvent_Proto)
}
USIM_BattleResultEvent_Proto::USIM_BattleResultEvent_Proto(const USIM_BattleResultEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sweaponname().empty()) {
    sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sweaponname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uengageresult_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uengageresult_));
  // @@protoc_insertion_point(copy_constructor:USIM_BattleResultEvent_Proto)
}

void USIM_BattleResultEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto.base);
  sweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uengageresult_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uengageresult_));
}

USIM_BattleResultEvent_Proto::~USIM_BattleResultEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_BattleResultEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_BattleResultEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sweaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_BattleResultEvent_Proto::ArenaDtor(void* object) {
  USIM_BattleResultEvent_Proto* _this = reinterpret_cast< USIM_BattleResultEvent_Proto* >(object);
  (void)_this;
}
void USIM_BattleResultEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_BattleResultEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_BattleResultEvent_Proto& USIM_BattleResultEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_BattleResultEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_BattleResultEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_BattleResultEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uengageresult_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uengageresult_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_BattleResultEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sWeaponName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sweaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEngageResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          uengageresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_BattleResultEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_BattleResultEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetid(), target);
  }

  // bytes sWeaponName = 4;
  if (this->sweaponname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sweaponname(), target);
  }

  // uint32 uEngageResult = 5;
  if (this->uengageresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uengageresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_BattleResultEvent_Proto)
  return target;
}

size_t USIM_BattleResultEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_BattleResultEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sWeaponName = 4;
  if (this->sweaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sweaponname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint32 uEngageResult = 5;
  if (this->uengageresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uengageresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_BattleResultEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_BattleResultEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_BattleResultEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_BattleResultEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_BattleResultEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_BattleResultEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_BattleResultEvent_Proto::MergeFrom(const USIM_BattleResultEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_BattleResultEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sweaponname().size() > 0) {
    _internal_set_sweaponname(from._internal_sweaponname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.uengageresult() != 0) {
    _internal_set_uengageresult(from._internal_uengageresult());
  }
}

void USIM_BattleResultEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_BattleResultEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_BattleResultEvent_Proto::CopyFrom(const USIM_BattleResultEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_BattleResultEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_BattleResultEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_BattleResultEvent_Proto::InternalSwap(USIM_BattleResultEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sweaponname_.Swap(&other->sweaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_BattleResultEvent_Proto, uengageresult_)
      + sizeof(USIM_BattleResultEvent_Proto::uengageresult_)
      - PROTOBUF_FIELD_OFFSET(USIM_BattleResultEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_BattleResultEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_DamageEvent_Proto::InitAsDefaultInstance() {
}
class USIM_DamageEvent_Proto::_Internal {
 public:
};

USIM_DamageEvent_Proto::USIM_DamageEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_DamageEvent_Proto)
}
USIM_DamageEvent_Proto::USIM_DamageEvent_Proto(const USIM_DamageEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sweaponname().empty()) {
    sweaponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sweaponname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&udamageresult_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udamageresult_));
  // @@protoc_insertion_point(copy_constructor:USIM_DamageEvent_Proto)
}

void USIM_DamageEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto.base);
  sweaponname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udamageresult_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udamageresult_));
}

USIM_DamageEvent_Proto::~USIM_DamageEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_DamageEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_DamageEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sweaponname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_DamageEvent_Proto::ArenaDtor(void* object) {
  USIM_DamageEvent_Proto* _this = reinterpret_cast< USIM_DamageEvent_Proto* >(object);
  (void)_this;
}
void USIM_DamageEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_DamageEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_DamageEvent_Proto& USIM_DamageEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_DamageEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_DamageEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_DamageEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sweaponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udamageresult_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udamageresult_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_DamageEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uAttackerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uattackerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDamagePlatID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          udamageplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sWeaponName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sweaponname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDamageResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          udamageresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_DamageEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_DamageEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uAttackerID = 2;
  if (this->uattackerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uattackerid(), target);
  }

  // uint32 uDamagePlatID = 3;
  if (this->udamageplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_udamageplatid(), target);
  }

  // bytes sWeaponName = 4;
  if (this->sweaponname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sweaponname(), target);
  }

  // uint32 uDamageResult = 5;
  if (this->udamageresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_udamageresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_DamageEvent_Proto)
  return target;
}

size_t USIM_DamageEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_DamageEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sWeaponName = 4;
  if (this->sweaponname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sweaponname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uAttackerID = 2;
  if (this->uattackerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uattackerid());
  }

  // uint32 uDamagePlatID = 3;
  if (this->udamageplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udamageplatid());
  }

  // uint32 uDamageResult = 5;
  if (this->udamageresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udamageresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_DamageEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_DamageEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_DamageEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_DamageEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_DamageEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_DamageEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_DamageEvent_Proto::MergeFrom(const USIM_DamageEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_DamageEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sweaponname().size() > 0) {
    _internal_set_sweaponname(from._internal_sweaponname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uattackerid() != 0) {
    _internal_set_uattackerid(from._internal_uattackerid());
  }
  if (from.udamageplatid() != 0) {
    _internal_set_udamageplatid(from._internal_udamageplatid());
  }
  if (from.udamageresult() != 0) {
    _internal_set_udamageresult(from._internal_udamageresult());
  }
}

void USIM_DamageEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_DamageEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_DamageEvent_Proto::CopyFrom(const USIM_DamageEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_DamageEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_DamageEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_DamageEvent_Proto::InternalSwap(USIM_DamageEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sweaponname_.Swap(&other->sweaponname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_DamageEvent_Proto, udamageresult_)
      + sizeof(USIM_DamageEvent_Proto::udamageresult_)
      - PROTOBUF_FIELD_OFFSET(USIM_DamageEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_DamageEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_LodisticsEvent_Protp::InitAsDefaultInstance() {
}
class USIM_LodisticsEvent_Protp::_Internal {
 public:
};

USIM_LodisticsEvent_Protp::USIM_LodisticsEvent_Protp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_LodisticsEvent_Protp)
}
USIM_LodisticsEvent_Protp::USIM_LodisticsEvent_Protp(const USIM_LodisticsEvent_Protp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&csupplytype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(csupplytype_));
  // @@protoc_insertion_point(copy_constructor:USIM_LodisticsEvent_Protp)
}

void USIM_LodisticsEvent_Protp::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&csupplytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(csupplytype_));
}

USIM_LodisticsEvent_Protp::~USIM_LodisticsEvent_Protp() {
  // @@protoc_insertion_point(destructor:USIM_LodisticsEvent_Protp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_LodisticsEvent_Protp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_LodisticsEvent_Protp::ArenaDtor(void* object) {
  USIM_LodisticsEvent_Protp* _this = reinterpret_cast< USIM_LodisticsEvent_Protp* >(object);
  (void)_this;
}
void USIM_LodisticsEvent_Protp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_LodisticsEvent_Protp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_LodisticsEvent_Protp& USIM_LodisticsEvent_Protp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_LodisticsEvent_Protp_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_LodisticsEvent_Protp::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_LodisticsEvent_Protp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&csupplytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(csupplytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_LodisticsEvent_Protp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uSenderID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          usenderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uReceiverID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ureceiverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cSupplyType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          csupplytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_LodisticsEvent_Protp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_LodisticsEvent_Protp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uSenderID = 2;
  if (this->usenderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_usenderid(), target);
  }

  // uint32 uReceiverID = 3;
  if (this->ureceiverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ureceiverid(), target);
  }

  // uint32 cSupplyType = 4;
  if (this->csupplytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_csupplytype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_LodisticsEvent_Protp)
  return target;
}

size_t USIM_LodisticsEvent_Protp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_LodisticsEvent_Protp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uSenderID = 2;
  if (this->usenderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usenderid());
  }

  // uint32 uReceiverID = 3;
  if (this->ureceiverid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ureceiverid());
  }

  // uint32 cSupplyType = 4;
  if (this->csupplytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csupplytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_LodisticsEvent_Protp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_LodisticsEvent_Protp)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_LodisticsEvent_Protp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_LodisticsEvent_Protp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_LodisticsEvent_Protp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_LodisticsEvent_Protp)
    MergeFrom(*source);
  }
}

void USIM_LodisticsEvent_Protp::MergeFrom(const USIM_LodisticsEvent_Protp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_LodisticsEvent_Protp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.usenderid() != 0) {
    _internal_set_usenderid(from._internal_usenderid());
  }
  if (from.ureceiverid() != 0) {
    _internal_set_ureceiverid(from._internal_ureceiverid());
  }
  if (from.csupplytype() != 0) {
    _internal_set_csupplytype(from._internal_csupplytype());
  }
}

void USIM_LodisticsEvent_Protp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_LodisticsEvent_Protp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_LodisticsEvent_Protp::CopyFrom(const USIM_LodisticsEvent_Protp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_LodisticsEvent_Protp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_LodisticsEvent_Protp::IsInitialized() const {
  return true;
}

void USIM_LodisticsEvent_Protp::InternalSwap(USIM_LodisticsEvent_Protp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_LodisticsEvent_Protp, csupplytype_)
      + sizeof(USIM_LodisticsEvent_Protp::csupplytype_)
      - PROTOBUF_FIELD_OFFSET(USIM_LodisticsEvent_Protp, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_LodisticsEvent_Protp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AssociEntityLaunchEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AssociEntityLaunchEvent_Proto::_Internal {
 public:
};

USIM_AssociEntityLaunchEvent_Proto::USIM_AssociEntityLaunchEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AssociEntityLaunchEvent_Proto)
}
USIM_AssociEntityLaunchEvent_Proto::USIM_AssociEntityLaunchEvent_Proto(const USIM_AssociEntityLaunchEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_splatname().empty()) {
    splatname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_splatname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ubaseid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
  // @@protoc_insertion_point(copy_constructor:USIM_AssociEntityLaunchEvent_Proto)
}

void USIM_AssociEntityLaunchEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto.base);
  splatname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
}

USIM_AssociEntityLaunchEvent_Proto::~USIM_AssociEntityLaunchEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AssociEntityLaunchEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AssociEntityLaunchEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  splatname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AssociEntityLaunchEvent_Proto::ArenaDtor(void* object) {
  USIM_AssociEntityLaunchEvent_Proto* _this = reinterpret_cast< USIM_AssociEntityLaunchEvent_Proto* >(object);
  (void)_this;
}
void USIM_AssociEntityLaunchEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AssociEntityLaunchEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AssociEntityLaunchEvent_Proto& USIM_AssociEntityLaunchEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AssociEntityLaunchEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AssociEntityLaunchEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AssociEntityLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  splatname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AssociEntityLaunchEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes sPlatName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_splatname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uPlatID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ubaseID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ubaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AssociEntityLaunchEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AssociEntityLaunchEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes sPlatName = 2;
  if (this->splatname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_splatname(), target);
  }

  // uint32 uPlatID = 3;
  if (this->uplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uplatid(), target);
  }

  // uint32 ubaseID = 4;
  if (this->ubaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ubaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AssociEntityLaunchEvent_Proto)
  return target;
}

size_t USIM_AssociEntityLaunchEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AssociEntityLaunchEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sPlatName = 2;
  if (this->splatname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_splatname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlatID = 3;
  if (this->uplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplatid());
  }

  // uint32 ubaseID = 4;
  if (this->ubaseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ubaseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AssociEntityLaunchEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AssociEntityLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AssociEntityLaunchEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AssociEntityLaunchEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AssociEntityLaunchEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AssociEntityLaunchEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AssociEntityLaunchEvent_Proto::MergeFrom(const USIM_AssociEntityLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AssociEntityLaunchEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.splatname().size() > 0) {
    _internal_set_splatname(from._internal_splatname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplatid() != 0) {
    _internal_set_uplatid(from._internal_uplatid());
  }
  if (from.ubaseid() != 0) {
    _internal_set_ubaseid(from._internal_ubaseid());
  }
}

void USIM_AssociEntityLaunchEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AssociEntityLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AssociEntityLaunchEvent_Proto::CopyFrom(const USIM_AssociEntityLaunchEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AssociEntityLaunchEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AssociEntityLaunchEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AssociEntityLaunchEvent_Proto::InternalSwap(USIM_AssociEntityLaunchEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  splatname_.Swap(&other->splatname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AssociEntityLaunchEvent_Proto, ubaseid_)
      + sizeof(USIM_AssociEntityLaunchEvent_Proto::ubaseid_)
      - PROTOBUF_FIELD_OFFSET(USIM_AssociEntityLaunchEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AssociEntityLaunchEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AssociEntityRecoveryEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AssociEntityRecoveryEvent_Proto::_Internal {
 public:
};

USIM_AssociEntityRecoveryEvent_Proto::USIM_AssociEntityRecoveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AssociEntityRecoveryEvent_Proto)
}
USIM_AssociEntityRecoveryEvent_Proto::USIM_AssociEntityRecoveryEvent_Proto(const USIM_AssociEntityRecoveryEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ubaseid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
  // @@protoc_insertion_point(copy_constructor:USIM_AssociEntityRecoveryEvent_Proto)
}

void USIM_AssociEntityRecoveryEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
}

USIM_AssociEntityRecoveryEvent_Proto::~USIM_AssociEntityRecoveryEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AssociEntityRecoveryEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AssociEntityRecoveryEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_AssociEntityRecoveryEvent_Proto::ArenaDtor(void* object) {
  USIM_AssociEntityRecoveryEvent_Proto* _this = reinterpret_cast< USIM_AssociEntityRecoveryEvent_Proto* >(object);
  (void)_this;
}
void USIM_AssociEntityRecoveryEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AssociEntityRecoveryEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AssociEntityRecoveryEvent_Proto& USIM_AssociEntityRecoveryEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AssociEntityRecoveryEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AssociEntityRecoveryEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AssociEntityRecoveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AssociEntityRecoveryEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uPlatID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uplatid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ubaseID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ubaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AssociEntityRecoveryEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AssociEntityRecoveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uPlatID = 2;
  if (this->uplatid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uplatid(), target);
  }

  // uint32 ubaseID = 3;
  if (this->ubaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ubaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AssociEntityRecoveryEvent_Proto)
  return target;
}

size_t USIM_AssociEntityRecoveryEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AssociEntityRecoveryEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlatID = 2;
  if (this->uplatid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplatid());
  }

  // uint32 ubaseID = 3;
  if (this->ubaseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ubaseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AssociEntityRecoveryEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AssociEntityRecoveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AssociEntityRecoveryEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AssociEntityRecoveryEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AssociEntityRecoveryEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AssociEntityRecoveryEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AssociEntityRecoveryEvent_Proto::MergeFrom(const USIM_AssociEntityRecoveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AssociEntityRecoveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplatid() != 0) {
    _internal_set_uplatid(from._internal_uplatid());
  }
  if (from.ubaseid() != 0) {
    _internal_set_ubaseid(from._internal_ubaseid());
  }
}

void USIM_AssociEntityRecoveryEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AssociEntityRecoveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AssociEntityRecoveryEvent_Proto::CopyFrom(const USIM_AssociEntityRecoveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AssociEntityRecoveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AssociEntityRecoveryEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AssociEntityRecoveryEvent_Proto::InternalSwap(USIM_AssociEntityRecoveryEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AssociEntityRecoveryEvent_Proto, ubaseid_)
      + sizeof(USIM_AssociEntityRecoveryEvent_Proto::ubaseid_)
      - PROTOBUF_FIELD_OFFSET(USIM_AssociEntityRecoveryEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AssociEntityRecoveryEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_StartAssetRecoveryEvent_Proto::InitAsDefaultInstance() {
}
class USIM_StartAssetRecoveryEvent_Proto::_Internal {
 public:
};

USIM_StartAssetRecoveryEvent_Proto::USIM_StartAssetRecoveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_StartAssetRecoveryEvent_Proto)
}
USIM_StartAssetRecoveryEvent_Proto::USIM_StartAssetRecoveryEvent_Proto(const USIM_StartAssetRecoveryEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recovery_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recovery_asset().empty()) {
    recovery_asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recovery_asset(),
      GetArena());
  }
  recovery_asset_prename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recovery_asset_prename().empty()) {
    recovery_asset_prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_recovery_asset_prename(),
      GetArena());
  }
  baseasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_baseasset().empty()) {
    baseasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_baseasset(),
      GetArena());
  }
  ::memcpy(&turnaroundtime_, &from.turnaroundtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dfsimtime_) -
    reinterpret_cast<char*>(&turnaroundtime_)) + sizeof(dfsimtime_));
  // @@protoc_insertion_point(copy_constructor:USIM_StartAssetRecoveryEvent_Proto)
}

void USIM_StartAssetRecoveryEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto.base);
  recovery_asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_asset_prename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baseasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&turnaroundtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfsimtime_) -
      reinterpret_cast<char*>(&turnaroundtime_)) + sizeof(dfsimtime_));
}

USIM_StartAssetRecoveryEvent_Proto::~USIM_StartAssetRecoveryEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_StartAssetRecoveryEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_StartAssetRecoveryEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  recovery_asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recovery_asset_prename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  baseasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_StartAssetRecoveryEvent_Proto::ArenaDtor(void* object) {
  USIM_StartAssetRecoveryEvent_Proto* _this = reinterpret_cast< USIM_StartAssetRecoveryEvent_Proto* >(object);
  (void)_this;
}
void USIM_StartAssetRecoveryEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_StartAssetRecoveryEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_StartAssetRecoveryEvent_Proto& USIM_StartAssetRecoveryEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_StartAssetRecoveryEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_StartAssetRecoveryEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_StartAssetRecoveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recovery_asset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recovery_asset_prename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  baseasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&turnaroundtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfsimtime_) -
      reinterpret_cast<char*>(&turnaroundtime_)) + sizeof(dfsimtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_StartAssetRecoveryEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes recovery_Asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_recovery_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes recovery_Asset_prename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recovery_asset_prename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes BaseAsset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_baseasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double TurnaroundTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          turnaroundtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AvailableTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          availabletime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaintainDelay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          maintaindelay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaintainTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          maintaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double recovery_begin_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          recovery_begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfSimTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_StartAssetRecoveryEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_StartAssetRecoveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes recovery_Asset = 1;
  if (this->recovery_asset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_recovery_asset(), target);
  }

  // bytes recovery_Asset_prename = 2;
  if (this->recovery_asset_prename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_recovery_asset_prename(), target);
  }

  // bytes BaseAsset = 3;
  if (this->baseasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_baseasset(), target);
  }

  // double TurnaroundTime = 4;
  if (!(this->turnaroundtime() <= 0 && this->turnaroundtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_turnaroundtime(), target);
  }

  // double AvailableTime = 5;
  if (!(this->availabletime() <= 0 && this->availabletime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_availabletime(), target);
  }

  // double MaintainDelay = 6;
  if (!(this->maintaindelay() <= 0 && this->maintaindelay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_maintaindelay(), target);
  }

  // double MaintainTime = 7;
  if (!(this->maintaintime() <= 0 && this->maintaintime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_maintaintime(), target);
  }

  // double recovery_begin_time = 8;
  if (!(this->recovery_begin_time() <= 0 && this->recovery_begin_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_recovery_begin_time(), target);
  }

  // double dfSimTime = 9;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dfsimtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_StartAssetRecoveryEvent_Proto)
  return target;
}

size_t USIM_StartAssetRecoveryEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_StartAssetRecoveryEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes recovery_Asset = 1;
  if (this->recovery_asset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recovery_asset());
  }

  // bytes recovery_Asset_prename = 2;
  if (this->recovery_asset_prename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_recovery_asset_prename());
  }

  // bytes BaseAsset = 3;
  if (this->baseasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_baseasset());
  }

  // double TurnaroundTime = 4;
  if (!(this->turnaroundtime() <= 0 && this->turnaroundtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double AvailableTime = 5;
  if (!(this->availabletime() <= 0 && this->availabletime() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaintainDelay = 6;
  if (!(this->maintaindelay() <= 0 && this->maintaindelay() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaintainTime = 7;
  if (!(this->maintaintime() <= 0 && this->maintaintime() >= 0)) {
    total_size += 1 + 8;
  }

  // double recovery_begin_time = 8;
  if (!(this->recovery_begin_time() <= 0 && this->recovery_begin_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfSimTime = 9;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_StartAssetRecoveryEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_StartAssetRecoveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_StartAssetRecoveryEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_StartAssetRecoveryEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_StartAssetRecoveryEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_StartAssetRecoveryEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_StartAssetRecoveryEvent_Proto::MergeFrom(const USIM_StartAssetRecoveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_StartAssetRecoveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.recovery_asset().size() > 0) {
    _internal_set_recovery_asset(from._internal_recovery_asset());
  }
  if (from.recovery_asset_prename().size() > 0) {
    _internal_set_recovery_asset_prename(from._internal_recovery_asset_prename());
  }
  if (from.baseasset().size() > 0) {
    _internal_set_baseasset(from._internal_baseasset());
  }
  if (!(from.turnaroundtime() <= 0 && from.turnaroundtime() >= 0)) {
    _internal_set_turnaroundtime(from._internal_turnaroundtime());
  }
  if (!(from.availabletime() <= 0 && from.availabletime() >= 0)) {
    _internal_set_availabletime(from._internal_availabletime());
  }
  if (!(from.maintaindelay() <= 0 && from.maintaindelay() >= 0)) {
    _internal_set_maintaindelay(from._internal_maintaindelay());
  }
  if (!(from.maintaintime() <= 0 && from.maintaintime() >= 0)) {
    _internal_set_maintaintime(from._internal_maintaintime());
  }
  if (!(from.recovery_begin_time() <= 0 && from.recovery_begin_time() >= 0)) {
    _internal_set_recovery_begin_time(from._internal_recovery_begin_time());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
}

void USIM_StartAssetRecoveryEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_StartAssetRecoveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_StartAssetRecoveryEvent_Proto::CopyFrom(const USIM_StartAssetRecoveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_StartAssetRecoveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_StartAssetRecoveryEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_StartAssetRecoveryEvent_Proto::InternalSwap(USIM_StartAssetRecoveryEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  recovery_asset_.Swap(&other->recovery_asset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  recovery_asset_prename_.Swap(&other->recovery_asset_prename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  baseasset_.Swap(&other->baseasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_StartAssetRecoveryEvent_Proto, dfsimtime_)
      + sizeof(USIM_StartAssetRecoveryEvent_Proto::dfsimtime_)
      - PROTOBUF_FIELD_OFFSET(USIM_StartAssetRecoveryEvent_Proto, turnaroundtime_)>(
          reinterpret_cast<char*>(&turnaroundtime_),
          reinterpret_cast<char*>(&other->turnaroundtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_StartAssetRecoveryEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AircraftTakeoffEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AircraftTakeoffEvent_Proto::_Internal {
 public:
};

USIM_AircraftTakeoffEvent_Proto::USIM_AircraftTakeoffEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AircraftTakeoffEvent_Proto)
}
USIM_AircraftTakeoffEvent_Proto::USIM_AircraftTakeoffEvent_Proto(const USIM_AircraftTakeoffEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  splanename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_splanename().empty()) {
    splanename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_splanename(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uairbaseid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  // @@protoc_insertion_point(copy_constructor:USIM_AircraftTakeoffEvent_Proto)
}

void USIM_AircraftTakeoffEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto.base);
  splanename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
}

USIM_AircraftTakeoffEvent_Proto::~USIM_AircraftTakeoffEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AircraftTakeoffEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AircraftTakeoffEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  splanename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AircraftTakeoffEvent_Proto::ArenaDtor(void* object) {
  USIM_AircraftTakeoffEvent_Proto* _this = reinterpret_cast< USIM_AircraftTakeoffEvent_Proto* >(object);
  (void)_this;
}
void USIM_AircraftTakeoffEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AircraftTakeoffEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AircraftTakeoffEvent_Proto& USIM_AircraftTakeoffEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AircraftTakeoffEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AircraftTakeoffEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AircraftTakeoffEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  splanename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AircraftTakeoffEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes sPlaneName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_splanename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uPlaneID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uplaneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uAirbaseID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uairbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AircraftTakeoffEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AircraftTakeoffEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes sPlaneName = 2;
  if (this->splanename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_splanename(), target);
  }

  // uint32 uPlaneID = 3;
  if (this->uplaneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uplaneid(), target);
  }

  // uint32 uAirbaseID = 4;
  if (this->uairbaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uairbaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AircraftTakeoffEvent_Proto)
  return target;
}

size_t USIM_AircraftTakeoffEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AircraftTakeoffEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sPlaneName = 2;
  if (this->splanename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_splanename());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlaneID = 3;
  if (this->uplaneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplaneid());
  }

  // uint32 uAirbaseID = 4;
  if (this->uairbaseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uairbaseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AircraftTakeoffEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AircraftTakeoffEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AircraftTakeoffEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AircraftTakeoffEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AircraftTakeoffEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AircraftTakeoffEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AircraftTakeoffEvent_Proto::MergeFrom(const USIM_AircraftTakeoffEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AircraftTakeoffEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.splanename().size() > 0) {
    _internal_set_splanename(from._internal_splanename());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplaneid() != 0) {
    _internal_set_uplaneid(from._internal_uplaneid());
  }
  if (from.uairbaseid() != 0) {
    _internal_set_uairbaseid(from._internal_uairbaseid());
  }
}

void USIM_AircraftTakeoffEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AircraftTakeoffEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AircraftTakeoffEvent_Proto::CopyFrom(const USIM_AircraftTakeoffEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AircraftTakeoffEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AircraftTakeoffEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AircraftTakeoffEvent_Proto::InternalSwap(USIM_AircraftTakeoffEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  splanename_.Swap(&other->splanename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AircraftTakeoffEvent_Proto, uairbaseid_)
      + sizeof(USIM_AircraftTakeoffEvent_Proto::uairbaseid_)
      - PROTOBUF_FIELD_OFFSET(USIM_AircraftTakeoffEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AircraftTakeoffEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AircraftLandEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AircraftLandEvent_Proto::_Internal {
 public:
};

USIM_AircraftLandEvent_Proto::USIM_AircraftLandEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AircraftLandEvent_Proto)
}
USIM_AircraftLandEvent_Proto::USIM_AircraftLandEvent_Proto(const USIM_AircraftLandEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uairbaseid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  // @@protoc_insertion_point(copy_constructor:USIM_AircraftLandEvent_Proto)
}

void USIM_AircraftLandEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
}

USIM_AircraftLandEvent_Proto::~USIM_AircraftLandEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AircraftLandEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AircraftLandEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_AircraftLandEvent_Proto::ArenaDtor(void* object) {
  USIM_AircraftLandEvent_Proto* _this = reinterpret_cast< USIM_AircraftLandEvent_Proto* >(object);
  (void)_this;
}
void USIM_AircraftLandEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AircraftLandEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AircraftLandEvent_Proto& USIM_AircraftLandEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AircraftLandEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AircraftLandEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AircraftLandEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AircraftLandEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uPlaneID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uplaneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uAirbaseID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uairbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AircraftLandEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AircraftLandEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uPlaneID = 2;
  if (this->uplaneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uplaneid(), target);
  }

  // uint32 uAirbaseID = 3;
  if (this->uairbaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uairbaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AircraftLandEvent_Proto)
  return target;
}

size_t USIM_AircraftLandEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AircraftLandEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlaneID = 2;
  if (this->uplaneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplaneid());
  }

  // uint32 uAirbaseID = 3;
  if (this->uairbaseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uairbaseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AircraftLandEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AircraftLandEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AircraftLandEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AircraftLandEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AircraftLandEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AircraftLandEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AircraftLandEvent_Proto::MergeFrom(const USIM_AircraftLandEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AircraftLandEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplaneid() != 0) {
    _internal_set_uplaneid(from._internal_uplaneid());
  }
  if (from.uairbaseid() != 0) {
    _internal_set_uairbaseid(from._internal_uairbaseid());
  }
}

void USIM_AircraftLandEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AircraftLandEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AircraftLandEvent_Proto::CopyFrom(const USIM_AircraftLandEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AircraftLandEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AircraftLandEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AircraftLandEvent_Proto::InternalSwap(USIM_AircraftLandEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AircraftLandEvent_Proto, uairbaseid_)
      + sizeof(USIM_AircraftLandEvent_Proto::uairbaseid_)
      - PROTOBUF_FIELD_OFFSET(USIM_AircraftLandEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AircraftLandEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AircraftReturnEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AircraftReturnEvent_Proto::_Internal {
 public:
};

USIM_AircraftReturnEvent_Proto::USIM_AircraftReturnEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AircraftReturnEvent_Proto)
}
USIM_AircraftReturnEvent_Proto::USIM_AircraftReturnEvent_Proto(const USIM_AircraftReturnEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uairbaseid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  // @@protoc_insertion_point(copy_constructor:USIM_AircraftReturnEvent_Proto)
}

void USIM_AircraftReturnEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
}

USIM_AircraftReturnEvent_Proto::~USIM_AircraftReturnEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AircraftReturnEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AircraftReturnEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_AircraftReturnEvent_Proto::ArenaDtor(void* object) {
  USIM_AircraftReturnEvent_Proto* _this = reinterpret_cast< USIM_AircraftReturnEvent_Proto* >(object);
  (void)_this;
}
void USIM_AircraftReturnEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AircraftReturnEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AircraftReturnEvent_Proto& USIM_AircraftReturnEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AircraftReturnEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AircraftReturnEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AircraftReturnEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uairbaseid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uairbaseid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AircraftReturnEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uPlaneID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uplaneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uAirbaseID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uairbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AircraftReturnEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AircraftReturnEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uPlaneID = 2;
  if (this->uplaneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uplaneid(), target);
  }

  // uint32 uAirbaseID = 3;
  if (this->uairbaseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uairbaseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AircraftReturnEvent_Proto)
  return target;
}

size_t USIM_AircraftReturnEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AircraftReturnEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uPlaneID = 2;
  if (this->uplaneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uplaneid());
  }

  // uint32 uAirbaseID = 3;
  if (this->uairbaseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uairbaseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AircraftReturnEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AircraftReturnEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AircraftReturnEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AircraftReturnEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AircraftReturnEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AircraftReturnEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AircraftReturnEvent_Proto::MergeFrom(const USIM_AircraftReturnEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AircraftReturnEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uplaneid() != 0) {
    _internal_set_uplaneid(from._internal_uplaneid());
  }
  if (from.uairbaseid() != 0) {
    _internal_set_uairbaseid(from._internal_uairbaseid());
  }
}

void USIM_AircraftReturnEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AircraftReturnEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AircraftReturnEvent_Proto::CopyFrom(const USIM_AircraftReturnEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AircraftReturnEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AircraftReturnEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AircraftReturnEvent_Proto::InternalSwap(USIM_AircraftReturnEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AircraftReturnEvent_Proto, uairbaseid_)
      + sizeof(USIM_AircraftReturnEvent_Proto::uairbaseid_)
      - PROTOBUF_FIELD_OFFSET(USIM_AircraftReturnEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AircraftReturnEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_BuoyReleaseEvent_Proto::InitAsDefaultInstance() {
}
class USIM_BuoyReleaseEvent_Proto::_Internal {
 public:
};

USIM_BuoyReleaseEvent_Proto::USIM_BuoyReleaseEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_BuoyReleaseEvent_Proto)
}
USIM_BuoyReleaseEvent_Proto::USIM_BuoyReleaseEvent_Proto(const USIM_BuoyReleaseEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sbuoy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sbuoy().empty()) {
    sbuoy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sbuoy(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ubuoyid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubuoyid_));
  // @@protoc_insertion_point(copy_constructor:USIM_BuoyReleaseEvent_Proto)
}

void USIM_BuoyReleaseEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto.base);
  sbuoy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubuoyid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubuoyid_));
}

USIM_BuoyReleaseEvent_Proto::~USIM_BuoyReleaseEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_BuoyReleaseEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_BuoyReleaseEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sbuoy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_BuoyReleaseEvent_Proto::ArenaDtor(void* object) {
  USIM_BuoyReleaseEvent_Proto* _this = reinterpret_cast< USIM_BuoyReleaseEvent_Proto* >(object);
  (void)_this;
}
void USIM_BuoyReleaseEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_BuoyReleaseEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_BuoyReleaseEvent_Proto& USIM_BuoyReleaseEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_BuoyReleaseEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_BuoyReleaseEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_BuoyReleaseEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sbuoy_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ubuoyid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ubuoyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_BuoyReleaseEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uBuoyID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ubuoyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sBuoy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sbuoy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_BuoyReleaseEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_BuoyReleaseEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uBuoyID = 3;
  if (this->ubuoyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ubuoyid(), target);
  }

  // bytes sBuoy = 4;
  if (this->sbuoy().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sbuoy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_BuoyReleaseEvent_Proto)
  return target;
}

size_t USIM_BuoyReleaseEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_BuoyReleaseEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sBuoy = 4;
  if (this->sbuoy().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sbuoy());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uBuoyID = 3;
  if (this->ubuoyid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ubuoyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_BuoyReleaseEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_BuoyReleaseEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_BuoyReleaseEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_BuoyReleaseEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_BuoyReleaseEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_BuoyReleaseEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_BuoyReleaseEvent_Proto::MergeFrom(const USIM_BuoyReleaseEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_BuoyReleaseEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sbuoy().size() > 0) {
    _internal_set_sbuoy(from._internal_sbuoy());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.ubuoyid() != 0) {
    _internal_set_ubuoyid(from._internal_ubuoyid());
  }
}

void USIM_BuoyReleaseEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_BuoyReleaseEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_BuoyReleaseEvent_Proto::CopyFrom(const USIM_BuoyReleaseEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_BuoyReleaseEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_BuoyReleaseEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_BuoyReleaseEvent_Proto::InternalSwap(USIM_BuoyReleaseEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sbuoy_.Swap(&other->sbuoy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_BuoyReleaseEvent_Proto, ubuoyid_)
      + sizeof(USIM_BuoyReleaseEvent_Proto::ubuoyid_)
      - PROTOBUF_FIELD_OFFSET(USIM_BuoyReleaseEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_BuoyReleaseEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_SonarDropReuseEvent_Proto::InitAsDefaultInstance() {
}
class USIM_SonarDropReuseEvent_Proto::_Internal {
 public:
};

USIM_SonarDropReuseEvent_Proto::USIM_SonarDropReuseEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_SonarDropReuseEvent_Proto)
}
USIM_SonarDropReuseEvent_Proto::USIM_SonarDropReuseEvent_Proto(const USIM_SonarDropReuseEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssonarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssonarname().empty()) {
    ssonarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssonarname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ueventtype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  // @@protoc_insertion_point(copy_constructor:USIM_SonarDropReuseEvent_Proto)
}

void USIM_SonarDropReuseEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto.base);
  ssonarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
}

USIM_SonarDropReuseEvent_Proto::~USIM_SonarDropReuseEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_SonarDropReuseEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_SonarDropReuseEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssonarname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_SonarDropReuseEvent_Proto::ArenaDtor(void* object) {
  USIM_SonarDropReuseEvent_Proto* _this = reinterpret_cast< USIM_SonarDropReuseEvent_Proto* >(object);
  (void)_this;
}
void USIM_SonarDropReuseEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_SonarDropReuseEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_SonarDropReuseEvent_Proto& USIM_SonarDropReuseEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_SonarDropReuseEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_SonarDropReuseEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_SonarDropReuseEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssonarname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ueventtype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ueventtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_SonarDropReuseEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uSonarID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usonarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sSonarName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ssonarname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uEventType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ueventtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_SonarDropReuseEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_SonarDropReuseEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uSonarID = 3;
  if (this->usonarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_usonarid(), target);
  }

  // bytes sSonarName = 4;
  if (this->ssonarname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ssonarname(), target);
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ueventtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_SonarDropReuseEvent_Proto)
  return target;
}

size_t USIM_SonarDropReuseEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_SonarDropReuseEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sSonarName = 4;
  if (this->ssonarname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ssonarname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uSonarID = 3;
  if (this->usonarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usonarid());
  }

  // uint32 uEventType = 5;
  if (this->ueventtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ueventtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_SonarDropReuseEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_SonarDropReuseEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_SonarDropReuseEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_SonarDropReuseEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_SonarDropReuseEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_SonarDropReuseEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_SonarDropReuseEvent_Proto::MergeFrom(const USIM_SonarDropReuseEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_SonarDropReuseEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssonarname().size() > 0) {
    _internal_set_ssonarname(from._internal_ssonarname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.usonarid() != 0) {
    _internal_set_usonarid(from._internal_usonarid());
  }
  if (from.ueventtype() != 0) {
    _internal_set_ueventtype(from._internal_ueventtype());
  }
}

void USIM_SonarDropReuseEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_SonarDropReuseEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_SonarDropReuseEvent_Proto::CopyFrom(const USIM_SonarDropReuseEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_SonarDropReuseEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_SonarDropReuseEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_SonarDropReuseEvent_Proto::InternalSwap(USIM_SonarDropReuseEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssonarname_.Swap(&other->ssonarname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_SonarDropReuseEvent_Proto, ueventtype_)
      + sizeof(USIM_SonarDropReuseEvent_Proto::ueventtype_)
      - PROTOBUF_FIELD_OFFSET(USIM_SonarDropReuseEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_SonarDropReuseEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_ForceDeliveryEvent_Proto::InitAsDefaultInstance() {
}
class USIM_ForceDeliveryEvent_Proto::_Internal {
 public:
};

USIM_ForceDeliveryEvent_Proto::USIM_ForceDeliveryEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_ForceDeliveryEvent_Proto)
}
USIM_ForceDeliveryEvent_Proto::USIM_ForceDeliveryEvent_Proto(const USIM_ForceDeliveryEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cforcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cforcename().empty()) {
    cforcename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cforcename(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:USIM_ForceDeliveryEvent_Proto)
}

void USIM_ForceDeliveryEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto.base);
  cforcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
}

USIM_ForceDeliveryEvent_Proto::~USIM_ForceDeliveryEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_ForceDeliveryEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_ForceDeliveryEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cforcename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_ForceDeliveryEvent_Proto::ArenaDtor(void* object) {
  USIM_ForceDeliveryEvent_Proto* _this = reinterpret_cast< USIM_ForceDeliveryEvent_Proto* >(object);
  (void)_this;
}
void USIM_ForceDeliveryEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_ForceDeliveryEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_ForceDeliveryEvent_Proto& USIM_ForceDeliveryEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_ForceDeliveryEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_ForceDeliveryEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_ForceDeliveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cforcename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_ForceDeliveryEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cForceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cforcename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_ForceDeliveryEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_ForceDeliveryEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes cForceName = 3;
  if (this->cforcename().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cforcename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_ForceDeliveryEvent_Proto)
  return target;
}

size_t USIM_ForceDeliveryEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_ForceDeliveryEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cForceName = 3;
  if (this->cforcename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cforcename());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_ForceDeliveryEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_ForceDeliveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_ForceDeliveryEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_ForceDeliveryEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_ForceDeliveryEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_ForceDeliveryEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_ForceDeliveryEvent_Proto::MergeFrom(const USIM_ForceDeliveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_ForceDeliveryEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cforcename().size() > 0) {
    _internal_set_cforcename(from._internal_cforcename());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void USIM_ForceDeliveryEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_ForceDeliveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_ForceDeliveryEvent_Proto::CopyFrom(const USIM_ForceDeliveryEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_ForceDeliveryEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_ForceDeliveryEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_ForceDeliveryEvent_Proto::InternalSwap(USIM_ForceDeliveryEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cforcename_.Swap(&other->cforcename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_ForceDeliveryEvent_Proto, uid_)
      + sizeof(USIM_ForceDeliveryEvent_Proto::uid_)
      - PROTOBUF_FIELD_OFFSET(USIM_ForceDeliveryEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_ForceDeliveryEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_ForceReusingEvent_Proto::InitAsDefaultInstance() {
}
class USIM_ForceReusingEvent_Proto::_Internal {
 public:
};

USIM_ForceReusingEvent_Proto::USIM_ForceReusingEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_ForceReusingEvent_Proto)
}
USIM_ForceReusingEvent_Proto::USIM_ForceReusingEvent_Proto(const USIM_ForceReusingEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uforceid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uforceid_));
  // @@protoc_insertion_point(copy_constructor:USIM_ForceReusingEvent_Proto)
}

void USIM_ForceReusingEvent_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uforceid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uforceid_));
}

USIM_ForceReusingEvent_Proto::~USIM_ForceReusingEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_ForceReusingEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_ForceReusingEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_ForceReusingEvent_Proto::ArenaDtor(void* object) {
  USIM_ForceReusingEvent_Proto* _this = reinterpret_cast< USIM_ForceReusingEvent_Proto* >(object);
  (void)_this;
}
void USIM_ForceReusingEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_ForceReusingEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_ForceReusingEvent_Proto& USIM_ForceReusingEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_ForceReusingEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_ForceReusingEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_ForceReusingEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uforceid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uforceid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_ForceReusingEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uForceID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uforceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_ForceReusingEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_ForceReusingEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uForceID = 3;
  if (this->uforceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uforceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_ForceReusingEvent_Proto)
  return target;
}

size_t USIM_ForceReusingEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_ForceReusingEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uForceID = 3;
  if (this->uforceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uforceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_ForceReusingEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_ForceReusingEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_ForceReusingEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_ForceReusingEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_ForceReusingEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_ForceReusingEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_ForceReusingEvent_Proto::MergeFrom(const USIM_ForceReusingEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_ForceReusingEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.uforceid() != 0) {
    _internal_set_uforceid(from._internal_uforceid());
  }
}

void USIM_ForceReusingEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_ForceReusingEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_ForceReusingEvent_Proto::CopyFrom(const USIM_ForceReusingEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_ForceReusingEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_ForceReusingEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_ForceReusingEvent_Proto::InternalSwap(USIM_ForceReusingEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_ForceReusingEvent_Proto, uforceid_)
      + sizeof(USIM_ForceReusingEvent_Proto::uforceid_)
      - PROTOBUF_FIELD_OFFSET(USIM_ForceReusingEvent_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_ForceReusingEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_IssuingTaskAssignment_Proto::InitAsDefaultInstance() {
}
class USIM_IssuingTaskAssignment_Proto::_Internal {
 public:
};

USIM_IssuingTaskAssignment_Proto::USIM_IssuingTaskAssignment_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_IssuingTaskAssignment_Proto)
}
USIM_IssuingTaskAssignment_Proto::USIM_IssuingTaskAssignment_Proto(const USIM_IssuingTaskAssignment_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thewarfarecommander_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thewarfarecommander().empty()) {
    thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thewarfarecommander(),
      GetArena());
  }
  commanderorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commanderorderid().empty()) {
    commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_commanderorderid(),
      GetArena());
  }
  taskedasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskedasset().empty()) {
    taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_taskedasset(),
      GetArena());
  }
  targetoperatingmedium_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetoperatingmedium().empty()) {
    targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetoperatingmedium(),
      GetArena());
  }
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetid().empty()) {
    targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetid(),
      GetArena());
  }
  targetclassification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetclassification().empty()) {
    targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetclassification(),
      GetArena());
  }
  ordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordertype().empty()) {
    ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordertype(),
      GetArena());
  }
  motiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_motiontype().empty()) {
    motiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_motiontype(),
      GetArena());
  }
  actualtarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actualtarget().empty()) {
    actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actualtarget(),
      GetArena());
  }
  commandertacticstable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commandertacticstable().empty()) {
    commandertacticstable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_commandertacticstable(),
      GetArena());
  }
  triggeredtactic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_triggeredtactic().empty()) {
    triggeredtactic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_triggeredtactic(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&grouptrackcomponentcount_) -
    reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
  // @@protoc_insertion_point(copy_constructor:USIM_IssuingTaskAssignment_Proto)
}

void USIM_IssuingTaskAssignment_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto.base);
  thewarfarecommander_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commanderorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskedasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetoperatingmedium_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetclassification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  motiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualtarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commandertacticstable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  triggeredtactic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grouptrackcomponentcount_) -
      reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
}

USIM_IssuingTaskAssignment_Proto::~USIM_IssuingTaskAssignment_Proto() {
  // @@protoc_insertion_point(destructor:USIM_IssuingTaskAssignment_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_IssuingTaskAssignment_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  thewarfarecommander_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commanderorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskedasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetoperatingmedium_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetclassification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  motiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualtarget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commandertacticstable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  triggeredtactic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_IssuingTaskAssignment_Proto::ArenaDtor(void* object) {
  USIM_IssuingTaskAssignment_Proto* _this = reinterpret_cast< USIM_IssuingTaskAssignment_Proto* >(object);
  (void)_this;
}
void USIM_IssuingTaskAssignment_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_IssuingTaskAssignment_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_IssuingTaskAssignment_Proto& USIM_IssuingTaskAssignment_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_IssuingTaskAssignment_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_IssuingTaskAssignment_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_IssuingTaskAssignment_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thewarfarecommander_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commanderorderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskedasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetoperatingmedium_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetclassification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordertype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  motiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actualtarget_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commandertacticstable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  triggeredtactic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grouptrackcomponentcount_) -
      reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_IssuingTaskAssignment_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 GroupTrack_p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grouptrack_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TheWarfareCommander = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_thewarfarecommander();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CommanderTrackID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commandertrackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes CommanderOrderID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_commanderorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TaskedAsset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_taskedasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetOperatingMedium = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_targetoperatingmedium();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_targetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetClassification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_targetclassification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 GroupTrackComponentCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          grouptrackcomponentcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OrderType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ordertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes MotionType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_motiontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ActualTarget = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_actualtarget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes CommanderTacticsTable = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_commandertacticstable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TriggeredTactic = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_triggeredtactic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_IssuingTaskAssignment_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_IssuingTaskAssignment_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // uint32 GroupTrack_p = 2;
  if (this->grouptrack_p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grouptrack_p(), target);
  }

  // bytes TheWarfareCommander = 3;
  if (this->thewarfarecommander().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_thewarfarecommander(), target);
  }

  // uint32 CommanderTrackID = 4;
  if (this->commandertrackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_commandertrackid(), target);
  }

  // bytes CommanderOrderID = 5;
  if (this->commanderorderid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_commanderorderid(), target);
  }

  // bytes TaskedAsset = 6;
  if (this->taskedasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_taskedasset(), target);
  }

  // bytes TargetOperatingMedium = 7;
  if (this->targetoperatingmedium().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_targetoperatingmedium(), target);
  }

  // bytes TargetID = 8;
  if (this->targetid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_targetid(), target);
  }

  // bytes TargetClassification = 9;
  if (this->targetclassification().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_targetclassification(), target);
  }

  // uint32 GroupTrackComponentCount = 10;
  if (this->grouptrackcomponentcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_grouptrackcomponentcount(), target);
  }

  // bytes OrderType = 11;
  if (this->ordertype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_ordertype(), target);
  }

  // bytes MotionType = 12;
  if (this->motiontype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_motiontype(), target);
  }

  // bytes ActualTarget = 13;
  if (this->actualtarget().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_actualtarget(), target);
  }

  // bytes CommanderTacticsTable = 14;
  if (this->commandertacticstable().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_commandertacticstable(), target);
  }

  // bytes TriggeredTactic = 15;
  if (this->triggeredtactic().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_triggeredtactic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_IssuingTaskAssignment_Proto)
  return target;
}

size_t USIM_IssuingTaskAssignment_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_IssuingTaskAssignment_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TheWarfareCommander = 3;
  if (this->thewarfarecommander().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thewarfarecommander());
  }

  // bytes CommanderOrderID = 5;
  if (this->commanderorderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commanderorderid());
  }

  // bytes TaskedAsset = 6;
  if (this->taskedasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_taskedasset());
  }

  // bytes TargetOperatingMedium = 7;
  if (this->targetoperatingmedium().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetoperatingmedium());
  }

  // bytes TargetID = 8;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetid());
  }

  // bytes TargetClassification = 9;
  if (this->targetclassification().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetclassification());
  }

  // bytes OrderType = 11;
  if (this->ordertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ordertype());
  }

  // bytes MotionType = 12;
  if (this->motiontype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_motiontype());
  }

  // bytes ActualTarget = 13;
  if (this->actualtarget().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actualtarget());
  }

  // bytes CommanderTacticsTable = 14;
  if (this->commandertacticstable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commandertacticstable());
  }

  // bytes TriggeredTactic = 15;
  if (this->triggeredtactic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_triggeredtactic());
  }

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 GroupTrack_p = 2;
  if (this->grouptrack_p() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grouptrack_p());
  }

  // uint32 CommanderTrackID = 4;
  if (this->commandertrackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_commandertrackid());
  }

  // uint32 GroupTrackComponentCount = 10;
  if (this->grouptrackcomponentcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grouptrackcomponentcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_IssuingTaskAssignment_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_IssuingTaskAssignment_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_IssuingTaskAssignment_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_IssuingTaskAssignment_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_IssuingTaskAssignment_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_IssuingTaskAssignment_Proto)
    MergeFrom(*source);
  }
}

void USIM_IssuingTaskAssignment_Proto::MergeFrom(const USIM_IssuingTaskAssignment_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_IssuingTaskAssignment_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thewarfarecommander().size() > 0) {
    _internal_set_thewarfarecommander(from._internal_thewarfarecommander());
  }
  if (from.commanderorderid().size() > 0) {
    _internal_set_commanderorderid(from._internal_commanderorderid());
  }
  if (from.taskedasset().size() > 0) {
    _internal_set_taskedasset(from._internal_taskedasset());
  }
  if (from.targetoperatingmedium().size() > 0) {
    _internal_set_targetoperatingmedium(from._internal_targetoperatingmedium());
  }
  if (from.targetid().size() > 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.targetclassification().size() > 0) {
    _internal_set_targetclassification(from._internal_targetclassification());
  }
  if (from.ordertype().size() > 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.motiontype().size() > 0) {
    _internal_set_motiontype(from._internal_motiontype());
  }
  if (from.actualtarget().size() > 0) {
    _internal_set_actualtarget(from._internal_actualtarget());
  }
  if (from.commandertacticstable().size() > 0) {
    _internal_set_commandertacticstable(from._internal_commandertacticstable());
  }
  if (from.triggeredtactic().size() > 0) {
    _internal_set_triggeredtactic(from._internal_triggeredtactic());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.grouptrack_p() != 0) {
    _internal_set_grouptrack_p(from._internal_grouptrack_p());
  }
  if (from.commandertrackid() != 0) {
    _internal_set_commandertrackid(from._internal_commandertrackid());
  }
  if (from.grouptrackcomponentcount() != 0) {
    _internal_set_grouptrackcomponentcount(from._internal_grouptrackcomponentcount());
  }
}

void USIM_IssuingTaskAssignment_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_IssuingTaskAssignment_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_IssuingTaskAssignment_Proto::CopyFrom(const USIM_IssuingTaskAssignment_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_IssuingTaskAssignment_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_IssuingTaskAssignment_Proto::IsInitialized() const {
  return true;
}

void USIM_IssuingTaskAssignment_Proto::InternalSwap(USIM_IssuingTaskAssignment_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  thewarfarecommander_.Swap(&other->thewarfarecommander_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commanderorderid_.Swap(&other->commanderorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskedasset_.Swap(&other->taskedasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetoperatingmedium_.Swap(&other->targetoperatingmedium_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.Swap(&other->targetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetclassification_.Swap(&other->targetclassification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordertype_.Swap(&other->ordertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  motiontype_.Swap(&other->motiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actualtarget_.Swap(&other->actualtarget_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commandertacticstable_.Swap(&other->commandertacticstable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  triggeredtactic_.Swap(&other->triggeredtactic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_IssuingTaskAssignment_Proto, grouptrackcomponentcount_)
      + sizeof(USIM_IssuingTaskAssignment_Proto::grouptrackcomponentcount_)
      - PROTOBUF_FIELD_OFFSET(USIM_IssuingTaskAssignment_Proto, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_IssuingTaskAssignment_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CommandTaskCompleted_Proto::InitAsDefaultInstance() {
}
class USIM_CommandTaskCompleted_Proto::_Internal {
 public:
};

USIM_CommandTaskCompleted_Proto::USIM_CommandTaskCompleted_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CommandTaskCompleted_Proto)
}
USIM_CommandTaskCompleted_Proto::USIM_CommandTaskCompleted_Proto(const USIM_CommandTaskCompleted_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thewarfarecommander_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_thewarfarecommander().empty()) {
    thewarfarecommander_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_thewarfarecommander(),
      GetArena());
  }
  commanderorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commanderorderid().empty()) {
    commanderorderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_commanderorderid(),
      GetArena());
  }
  taskedasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_taskedasset().empty()) {
    taskedasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_taskedasset(),
      GetArena());
  }
  targetoperatingmedium_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetoperatingmedium().empty()) {
    targetoperatingmedium_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetoperatingmedium(),
      GetArena());
  }
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetid().empty()) {
    targetid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetid(),
      GetArena());
  }
  targetclassification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetclassification().empty()) {
    targetclassification_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_targetclassification(),
      GetArena());
  }
  ordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordertype().empty()) {
    ordertype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordertype(),
      GetArena());
  }
  actualtarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_actualtarget().empty()) {
    actualtarget_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_actualtarget(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&grouptrackcomponentcount_) -
    reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
  // @@protoc_insertion_point(copy_constructor:USIM_CommandTaskCompleted_Proto)
}

void USIM_CommandTaskCompleted_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto.base);
  thewarfarecommander_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commanderorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskedasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetoperatingmedium_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetclassification_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualtarget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grouptrackcomponentcount_) -
      reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
}

USIM_CommandTaskCompleted_Proto::~USIM_CommandTaskCompleted_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CommandTaskCompleted_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CommandTaskCompleted_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  thewarfarecommander_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commanderorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskedasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetoperatingmedium_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetclassification_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordertype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actualtarget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_CommandTaskCompleted_Proto::ArenaDtor(void* object) {
  USIM_CommandTaskCompleted_Proto* _this = reinterpret_cast< USIM_CommandTaskCompleted_Proto* >(object);
  (void)_this;
}
void USIM_CommandTaskCompleted_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CommandTaskCompleted_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CommandTaskCompleted_Proto& USIM_CommandTaskCompleted_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CommandTaskCompleted_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CommandTaskCompleted_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CommandTaskCompleted_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thewarfarecommander_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commanderorderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskedasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetoperatingmedium_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetclassification_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordertype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actualtarget_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grouptrackcomponentcount_) -
      reinterpret_cast<char*>(&time_)) + sizeof(grouptrackcomponentcount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CommandTaskCompleted_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 GroupTrack_p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          grouptrack_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TheWarfareCommander = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_thewarfarecommander();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CommanderTrackID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commandertrackid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes CommanderOrderID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_commanderorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TaskedAsset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_taskedasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetOperatingMedium = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_targetoperatingmedium();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_targetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TargetClassification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_targetclassification();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 GroupTrackComponentCount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          grouptrackcomponentcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OrderType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ordertype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ActualTarget = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_actualtarget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CommandTaskCompleted_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CommandTaskCompleted_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // uint32 GroupTrack_p = 2;
  if (this->grouptrack_p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grouptrack_p(), target);
  }

  // bytes TheWarfareCommander = 3;
  if (this->thewarfarecommander().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_thewarfarecommander(), target);
  }

  // uint32 CommanderTrackID = 4;
  if (this->commandertrackid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_commandertrackid(), target);
  }

  // bytes CommanderOrderID = 5;
  if (this->commanderorderid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_commanderorderid(), target);
  }

  // bytes TaskedAsset = 6;
  if (this->taskedasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_taskedasset(), target);
  }

  // bytes TargetOperatingMedium = 7;
  if (this->targetoperatingmedium().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_targetoperatingmedium(), target);
  }

  // bytes TargetID = 8;
  if (this->targetid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_targetid(), target);
  }

  // bytes TargetClassification = 9;
  if (this->targetclassification().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_targetclassification(), target);
  }

  // uint32 GroupTrackComponentCount = 10;
  if (this->grouptrackcomponentcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_grouptrackcomponentcount(), target);
  }

  // bytes OrderType = 11;
  if (this->ordertype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_ordertype(), target);
  }

  // bytes ActualTarget = 12;
  if (this->actualtarget().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_actualtarget(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CommandTaskCompleted_Proto)
  return target;
}

size_t USIM_CommandTaskCompleted_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CommandTaskCompleted_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes TheWarfareCommander = 3;
  if (this->thewarfarecommander().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_thewarfarecommander());
  }

  // bytes CommanderOrderID = 5;
  if (this->commanderorderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commanderorderid());
  }

  // bytes TaskedAsset = 6;
  if (this->taskedasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_taskedasset());
  }

  // bytes TargetOperatingMedium = 7;
  if (this->targetoperatingmedium().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetoperatingmedium());
  }

  // bytes TargetID = 8;
  if (this->targetid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetid());
  }

  // bytes TargetClassification = 9;
  if (this->targetclassification().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_targetclassification());
  }

  // bytes OrderType = 11;
  if (this->ordertype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ordertype());
  }

  // bytes ActualTarget = 12;
  if (this->actualtarget().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_actualtarget());
  }

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 GroupTrack_p = 2;
  if (this->grouptrack_p() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grouptrack_p());
  }

  // uint32 CommanderTrackID = 4;
  if (this->commandertrackid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_commandertrackid());
  }

  // uint32 GroupTrackComponentCount = 10;
  if (this->grouptrackcomponentcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grouptrackcomponentcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CommandTaskCompleted_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CommandTaskCompleted_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CommandTaskCompleted_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CommandTaskCompleted_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CommandTaskCompleted_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CommandTaskCompleted_Proto)
    MergeFrom(*source);
  }
}

void USIM_CommandTaskCompleted_Proto::MergeFrom(const USIM_CommandTaskCompleted_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CommandTaskCompleted_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.thewarfarecommander().size() > 0) {
    _internal_set_thewarfarecommander(from._internal_thewarfarecommander());
  }
  if (from.commanderorderid().size() > 0) {
    _internal_set_commanderorderid(from._internal_commanderorderid());
  }
  if (from.taskedasset().size() > 0) {
    _internal_set_taskedasset(from._internal_taskedasset());
  }
  if (from.targetoperatingmedium().size() > 0) {
    _internal_set_targetoperatingmedium(from._internal_targetoperatingmedium());
  }
  if (from.targetid().size() > 0) {
    _internal_set_targetid(from._internal_targetid());
  }
  if (from.targetclassification().size() > 0) {
    _internal_set_targetclassification(from._internal_targetclassification());
  }
  if (from.ordertype().size() > 0) {
    _internal_set_ordertype(from._internal_ordertype());
  }
  if (from.actualtarget().size() > 0) {
    _internal_set_actualtarget(from._internal_actualtarget());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (from.grouptrack_p() != 0) {
    _internal_set_grouptrack_p(from._internal_grouptrack_p());
  }
  if (from.commandertrackid() != 0) {
    _internal_set_commandertrackid(from._internal_commandertrackid());
  }
  if (from.grouptrackcomponentcount() != 0) {
    _internal_set_grouptrackcomponentcount(from._internal_grouptrackcomponentcount());
  }
}

void USIM_CommandTaskCompleted_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CommandTaskCompleted_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CommandTaskCompleted_Proto::CopyFrom(const USIM_CommandTaskCompleted_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CommandTaskCompleted_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CommandTaskCompleted_Proto::IsInitialized() const {
  return true;
}

void USIM_CommandTaskCompleted_Proto::InternalSwap(USIM_CommandTaskCompleted_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  thewarfarecommander_.Swap(&other->thewarfarecommander_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  commanderorderid_.Swap(&other->commanderorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  taskedasset_.Swap(&other->taskedasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetoperatingmedium_.Swap(&other->targetoperatingmedium_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetid_.Swap(&other->targetid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  targetclassification_.Swap(&other->targetclassification_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordertype_.Swap(&other->ordertype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  actualtarget_.Swap(&other->actualtarget_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CommandTaskCompleted_Proto, grouptrackcomponentcount_)
      + sizeof(USIM_CommandTaskCompleted_Proto::grouptrackcomponentcount_)
      - PROTOBUF_FIELD_OFFSET(USIM_CommandTaskCompleted_Proto, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CommandTaskCompleted_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AircraftDeckAbortEvent_Proto::InitAsDefaultInstance() {
}
class USIM_AircraftDeckAbortEvent_Proto::_Internal {
 public:
};

USIM_AircraftDeckAbortEvent_Proto::USIM_AircraftDeckAbortEvent_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AircraftDeckAbortEvent_Proto)
}
USIM_AircraftDeckAbortEvent_Proto::USIM_AircraftDeckAbortEvent_Proto(const USIM_AircraftDeckAbortEvent_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  airbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_airbase().empty()) {
    airbase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_airbase(),
      GetArena());
  }
  aircraft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_aircraft().empty()) {
    aircraft_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aircraft(),
      GetArena());
  }
  sortietype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sortietype().empty()) {
    sortietype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sortietype(),
      GetArena());
  }
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_callsign().empty()) {
    callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_callsign(),
      GetArena());
  }
  warfarecommandername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_warfarecommandername().empty()) {
    warfarecommandername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_warfarecommandername(),
      GetArena());
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_orderid(),
      GetArena());
  }
  missiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_missiontype().empty()) {
    missiontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_missiontype(),
      GetArena());
  }
  missionplanname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_missionplanname().empty()) {
    missionplanname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_missionplanname(),
      GetArena());
  }
  intentions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_intentions().empty()) {
    intentions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_intentions(),
      GetArena());
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&major_p_) -
    reinterpret_cast<char*>(&time_)) + sizeof(major_p_));
  // @@protoc_insertion_point(copy_constructor:USIM_AircraftDeckAbortEvent_Proto)
}

void USIM_AircraftDeckAbortEvent_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto.base);
  airbase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sortietype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  warfarecommandername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  missiontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  missionplanname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intentions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&major_p_) -
      reinterpret_cast<char*>(&time_)) + sizeof(major_p_));
}

USIM_AircraftDeckAbortEvent_Proto::~USIM_AircraftDeckAbortEvent_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AircraftDeckAbortEvent_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AircraftDeckAbortEvent_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  airbase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aircraft_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sortietype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  warfarecommandername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  missiontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  missionplanname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  intentions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AircraftDeckAbortEvent_Proto::ArenaDtor(void* object) {
  USIM_AircraftDeckAbortEvent_Proto* _this = reinterpret_cast< USIM_AircraftDeckAbortEvent_Proto* >(object);
  (void)_this;
}
void USIM_AircraftDeckAbortEvent_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AircraftDeckAbortEvent_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AircraftDeckAbortEvent_Proto& USIM_AircraftDeckAbortEvent_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AircraftDeckAbortEvent_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AircraftDeckAbortEvent_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AircraftDeckAbortEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  airbase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sortietype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  callsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  warfarecommandername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  missiontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  missionplanname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intentions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&major_p_) -
      reinterpret_cast<char*>(&time_)) + sizeof(major_p_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AircraftDeckAbortEvent_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes Airbase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_airbase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Aircraft = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_aircraft();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SortieType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sortietype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes CallSign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes WarfareCommanderName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_warfarecommandername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OrderId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes MissionType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_missiontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes MissionPlanname = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_missionplanname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Intentions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_intentions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Major_p = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          major_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double MaintainDelay = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          maintaindelay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double MaintainTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          maintaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double TurnarundTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          turnarundtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double AvailableTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          availabletime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AircraftDeckAbortEvent_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AircraftDeckAbortEvent_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // bytes Airbase = 2;
  if (this->airbase().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_airbase(), target);
  }

  // bytes Aircraft = 3;
  if (this->aircraft().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_aircraft(), target);
  }

  // bytes SortieType = 4;
  if (this->sortietype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_sortietype(), target);
  }

  // bytes CallSign = 5;
  if (this->callsign().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_callsign(), target);
  }

  // bytes WarfareCommanderName = 6;
  if (this->warfarecommandername().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_warfarecommandername(), target);
  }

  // bytes OrderId = 7;
  if (this->orderid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_orderid(), target);
  }

  // bytes MissionType = 8;
  if (this->missiontype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_missiontype(), target);
  }

  // bytes MissionPlanname = 9;
  if (this->missionplanname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_missionplanname(), target);
  }

  // bytes Intentions = 10;
  if (this->intentions().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_intentions(), target);
  }

  // uint32 Major_p = 11;
  if (this->major_p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_major_p(), target);
  }

  // double MaintainDelay = 12;
  if (!(this->maintaindelay() <= 0 && this->maintaindelay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_maintaindelay(), target);
  }

  // double MaintainTime = 13;
  if (!(this->maintaintime() <= 0 && this->maintaintime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_maintaintime(), target);
  }

  // double TurnarundTime = 14;
  if (!(this->turnarundtime() <= 0 && this->turnarundtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_turnarundtime(), target);
  }

  // double AvailableTime = 15;
  if (!(this->availabletime() <= 0 && this->availabletime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_availabletime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AircraftDeckAbortEvent_Proto)
  return target;
}

size_t USIM_AircraftDeckAbortEvent_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AircraftDeckAbortEvent_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Airbase = 2;
  if (this->airbase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_airbase());
  }

  // bytes Aircraft = 3;
  if (this->aircraft().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_aircraft());
  }

  // bytes SortieType = 4;
  if (this->sortietype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sortietype());
  }

  // bytes CallSign = 5;
  if (this->callsign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_callsign());
  }

  // bytes WarfareCommanderName = 6;
  if (this->warfarecommandername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_warfarecommandername());
  }

  // bytes OrderId = 7;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_orderid());
  }

  // bytes MissionType = 8;
  if (this->missiontype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_missiontype());
  }

  // bytes MissionPlanname = 9;
  if (this->missionplanname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_missionplanname());
  }

  // bytes Intentions = 10;
  if (this->intentions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_intentions());
  }

  // double time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaintainDelay = 12;
  if (!(this->maintaindelay() <= 0 && this->maintaindelay() >= 0)) {
    total_size += 1 + 8;
  }

  // double MaintainTime = 13;
  if (!(this->maintaintime() <= 0 && this->maintaintime() >= 0)) {
    total_size += 1 + 8;
  }

  // double TurnarundTime = 14;
  if (!(this->turnarundtime() <= 0 && this->turnarundtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double AvailableTime = 15;
  if (!(this->availabletime() <= 0 && this->availabletime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 Major_p = 11;
  if (this->major_p() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major_p());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AircraftDeckAbortEvent_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AircraftDeckAbortEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AircraftDeckAbortEvent_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AircraftDeckAbortEvent_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AircraftDeckAbortEvent_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AircraftDeckAbortEvent_Proto)
    MergeFrom(*source);
  }
}

void USIM_AircraftDeckAbortEvent_Proto::MergeFrom(const USIM_AircraftDeckAbortEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AircraftDeckAbortEvent_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.airbase().size() > 0) {
    _internal_set_airbase(from._internal_airbase());
  }
  if (from.aircraft().size() > 0) {
    _internal_set_aircraft(from._internal_aircraft());
  }
  if (from.sortietype().size() > 0) {
    _internal_set_sortietype(from._internal_sortietype());
  }
  if (from.callsign().size() > 0) {
    _internal_set_callsign(from._internal_callsign());
  }
  if (from.warfarecommandername().size() > 0) {
    _internal_set_warfarecommandername(from._internal_warfarecommandername());
  }
  if (from.orderid().size() > 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.missiontype().size() > 0) {
    _internal_set_missiontype(from._internal_missiontype());
  }
  if (from.missionplanname().size() > 0) {
    _internal_set_missionplanname(from._internal_missionplanname());
  }
  if (from.intentions().size() > 0) {
    _internal_set_intentions(from._internal_intentions());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
  if (!(from.maintaindelay() <= 0 && from.maintaindelay() >= 0)) {
    _internal_set_maintaindelay(from._internal_maintaindelay());
  }
  if (!(from.maintaintime() <= 0 && from.maintaintime() >= 0)) {
    _internal_set_maintaintime(from._internal_maintaintime());
  }
  if (!(from.turnarundtime() <= 0 && from.turnarundtime() >= 0)) {
    _internal_set_turnarundtime(from._internal_turnarundtime());
  }
  if (!(from.availabletime() <= 0 && from.availabletime() >= 0)) {
    _internal_set_availabletime(from._internal_availabletime());
  }
  if (from.major_p() != 0) {
    _internal_set_major_p(from._internal_major_p());
  }
}

void USIM_AircraftDeckAbortEvent_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AircraftDeckAbortEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AircraftDeckAbortEvent_Proto::CopyFrom(const USIM_AircraftDeckAbortEvent_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AircraftDeckAbortEvent_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AircraftDeckAbortEvent_Proto::IsInitialized() const {
  return true;
}

void USIM_AircraftDeckAbortEvent_Proto::InternalSwap(USIM_AircraftDeckAbortEvent_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  airbase_.Swap(&other->airbase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aircraft_.Swap(&other->aircraft_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sortietype_.Swap(&other->sortietype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  warfarecommandername_.Swap(&other->warfarecommandername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  missiontype_.Swap(&other->missiontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  missionplanname_.Swap(&other->missionplanname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  intentions_.Swap(&other->intentions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AircraftDeckAbortEvent_Proto, major_p_)
      + sizeof(USIM_AircraftDeckAbortEvent_Proto::major_p_)
      - PROTOBUF_FIELD_OFFSET(USIM_AircraftDeckAbortEvent_Proto, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AircraftDeckAbortEvent_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_DyamicCycle_Proto::InitAsDefaultInstance() {
}
class USIM_DyamicCycle_Proto::_Internal {
 public:
};

USIM_DyamicCycle_Proto::USIM_DyamicCycle_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_DyamicCycle_Proto)
}
USIM_DyamicCycle_Proto::USIM_DyamicCycle_Proto(const USIM_DyamicCycle_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ucolor_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ucolor_));
  // @@protoc_insertion_point(copy_constructor:USIM_DyamicCycle_Proto)
}

void USIM_DyamicCycle_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ucolor_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ucolor_));
}

USIM_DyamicCycle_Proto::~USIM_DyamicCycle_Proto() {
  // @@protoc_insertion_point(destructor:USIM_DyamicCycle_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_DyamicCycle_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_DyamicCycle_Proto::ArenaDtor(void* object) {
  USIM_DyamicCycle_Proto* _this = reinterpret_cast< USIM_DyamicCycle_Proto* >(object);
  (void)_this;
}
void USIM_DyamicCycle_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_DyamicCycle_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_DyamicCycle_Proto& USIM_DyamicCycle_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_DyamicCycle_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_DyamicCycle_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_DyamicCycle_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ucolor_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ucolor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_DyamicCycle_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utargetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_DyamicCycle_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_DyamicCycle_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_utargetid(), target);
  }

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_suuid(), target);
  }

  // uint64 uColor = 5;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ucolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_DyamicCycle_Proto)
  return target;
}

size_t USIM_DyamicCycle_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_DyamicCycle_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTargetID = 3;
  if (this->utargetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utargetid());
  }

  // uint64 uColor = 5;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_DyamicCycle_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_DyamicCycle_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_DyamicCycle_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_DyamicCycle_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_DyamicCycle_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_DyamicCycle_Proto)
    MergeFrom(*source);
  }
}

void USIM_DyamicCycle_Proto::MergeFrom(const USIM_DyamicCycle_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_DyamicCycle_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utargetid() != 0) {
    _internal_set_utargetid(from._internal_utargetid());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
}

void USIM_DyamicCycle_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_DyamicCycle_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_DyamicCycle_Proto::CopyFrom(const USIM_DyamicCycle_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_DyamicCycle_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_DyamicCycle_Proto::IsInitialized() const {
  return true;
}

void USIM_DyamicCycle_Proto::InternalSwap(USIM_DyamicCycle_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_DyamicCycle_Proto, ucolor_)
      + sizeof(USIM_DyamicCycle_Proto::ucolor_)
      - PROTOBUF_FIELD_OFFSET(USIM_DyamicCycle_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_DyamicCycle_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_WedgeBeam_Proto::InitAsDefaultInstance() {
}
class USIM_WedgeBeam_Proto::_Internal {
 public:
};

USIM_WedgeBeam_Proto::USIM_WedgeBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_WedgeBeam_Proto)
}
USIM_WedgeBeam_Proto::USIM_WedgeBeam_Proto(const USIM_WedgeBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dflength_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dflength_));
  // @@protoc_insertion_point(copy_constructor:USIM_WedgeBeam_Proto)
}

void USIM_WedgeBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dflength_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dflength_));
}

USIM_WedgeBeam_Proto::~USIM_WedgeBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIM_WedgeBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_WedgeBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_WedgeBeam_Proto::ArenaDtor(void* object) {
  USIM_WedgeBeam_Proto* _this = reinterpret_cast< USIM_WedgeBeam_Proto* >(object);
  (void)_this;
}
void USIM_WedgeBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_WedgeBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_WedgeBeam_Proto& USIM_WedgeBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_WedgeBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_WedgeBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_WedgeBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dflength_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dflength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_WedgeBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bFiled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bfiled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDisplayType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          udisplaytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dfAzimuthAngle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          dfazimuthangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfPitchAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          dfpitchangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfLROpeningAngle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          dflropeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dfUDOpeningAngle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          dfudopeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double dfCloseCutDistance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          dfclosecutdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLength = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          dflength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_WedgeBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_WedgeBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_suuid(), target);
  }

  // uint32 uType = 4;
  if (this->utype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_utype(), target);
  }

  // bool bFiled = 5;
  if (this->bfiled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bfiled(), target);
  }

  // uint64 uColor = 6;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ucolor(), target);
  }

  // uint32 uDisplayType = 7;
  if (this->udisplaytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_udisplaytype(), target);
  }

  // float dfAzimuthAngle = 8;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_dfazimuthangle(), target);
  }

  // float dfPitchAngle = 9;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_dfpitchangle(), target);
  }

  // float dfLROpeningAngle = 10;
  if (!(this->dflropeningangle() <= 0 && this->dflropeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_dflropeningangle(), target);
  }

  // float dfUDOpeningAngle = 11;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_dfudopeningangle(), target);
  }

  // double dfCloseCutDistance = 12;
  if (!(this->dfclosecutdistance() <= 0 && this->dfclosecutdistance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dfclosecutdistance(), target);
  }

  // double dfLength = 13;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_dflength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_WedgeBeam_Proto)
  return target;
}

size_t USIM_WedgeBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_WedgeBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uType = 4;
  if (this->utype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utype());
  }

  // uint64 uColor = 6;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  // bool bFiled = 5;
  if (this->bfiled() != 0) {
    total_size += 1 + 1;
  }

  // uint32 uDisplayType = 7;
  if (this->udisplaytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udisplaytype());
  }

  // float dfAzimuthAngle = 8;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float dfPitchAngle = 9;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float dfLROpeningAngle = 10;
  if (!(this->dflropeningangle() <= 0 && this->dflropeningangle() >= 0)) {
    total_size += 1 + 4;
  }

  // float dfUDOpeningAngle = 11;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    total_size += 1 + 4;
  }

  // double dfCloseCutDistance = 12;
  if (!(this->dfclosecutdistance() <= 0 && this->dfclosecutdistance() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLength = 13;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_WedgeBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_WedgeBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_WedgeBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_WedgeBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_WedgeBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_WedgeBeam_Proto)
    MergeFrom(*source);
  }
}

void USIM_WedgeBeam_Proto::MergeFrom(const USIM_WedgeBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_WedgeBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.utype() != 0) {
    _internal_set_utype(from._internal_utype());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
  if (from.bfiled() != 0) {
    _internal_set_bfiled(from._internal_bfiled());
  }
  if (from.udisplaytype() != 0) {
    _internal_set_udisplaytype(from._internal_udisplaytype());
  }
  if (!(from.dfazimuthangle() <= 0 && from.dfazimuthangle() >= 0)) {
    _internal_set_dfazimuthangle(from._internal_dfazimuthangle());
  }
  if (!(from.dfpitchangle() <= 0 && from.dfpitchangle() >= 0)) {
    _internal_set_dfpitchangle(from._internal_dfpitchangle());
  }
  if (!(from.dflropeningangle() <= 0 && from.dflropeningangle() >= 0)) {
    _internal_set_dflropeningangle(from._internal_dflropeningangle());
  }
  if (!(from.dfudopeningangle() <= 0 && from.dfudopeningangle() >= 0)) {
    _internal_set_dfudopeningangle(from._internal_dfudopeningangle());
  }
  if (!(from.dfclosecutdistance() <= 0 && from.dfclosecutdistance() >= 0)) {
    _internal_set_dfclosecutdistance(from._internal_dfclosecutdistance());
  }
  if (!(from.dflength() <= 0 && from.dflength() >= 0)) {
    _internal_set_dflength(from._internal_dflength());
  }
}

void USIM_WedgeBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_WedgeBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_WedgeBeam_Proto::CopyFrom(const USIM_WedgeBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_WedgeBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_WedgeBeam_Proto::IsInitialized() const {
  return true;
}

void USIM_WedgeBeam_Proto::InternalSwap(USIM_WedgeBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_WedgeBeam_Proto, dflength_)
      + sizeof(USIM_WedgeBeam_Proto::dflength_)
      - PROTOBUF_FIELD_OFFSET(USIM_WedgeBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_WedgeBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIN_SphereBeam_Proto::InitAsDefaultInstance() {
}
class USIN_SphereBeam_Proto::_Internal {
 public:
};

USIN_SphereBeam_Proto::USIN_SphereBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIN_SphereBeam_Proto)
}
USIN_SphereBeam_Proto::USIN_SphereBeam_Proto(const USIN_SphereBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dfradius_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfradius_));
  // @@protoc_insertion_point(copy_constructor:USIN_SphereBeam_Proto)
}

void USIN_SphereBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfradius_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfradius_));
}

USIN_SphereBeam_Proto::~USIN_SphereBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIN_SphereBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIN_SphereBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIN_SphereBeam_Proto::ArenaDtor(void* object) {
  USIN_SphereBeam_Proto* _this = reinterpret_cast< USIN_SphereBeam_Proto* >(object);
  (void)_this;
}
void USIN_SphereBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIN_SphereBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIN_SphereBeam_Proto& USIN_SphereBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIN_SphereBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIN_SphereBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIN_SphereBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfradius_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfradius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIN_SphereBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfradius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          dfradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIN_SphereBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIN_SphereBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_suuid(), target);
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // double dfradius = 5;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dfradius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIN_SphereBeam_Proto)
  return target;
}

size_t USIN_SphereBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIN_SphereBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // double dfradius = 5;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIN_SphereBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIN_SphereBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIN_SphereBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIN_SphereBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIN_SphereBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIN_SphereBeam_Proto)
    MergeFrom(*source);
  }
}

void USIN_SphereBeam_Proto::MergeFrom(const USIN_SphereBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIN_SphereBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from.dfradius() <= 0 && from.dfradius() >= 0)) {
    _internal_set_dfradius(from._internal_dfradius());
  }
}

void USIN_SphereBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIN_SphereBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIN_SphereBeam_Proto::CopyFrom(const USIN_SphereBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIN_SphereBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIN_SphereBeam_Proto::IsInitialized() const {
  return true;
}

void USIN_SphereBeam_Proto::InternalSwap(USIN_SphereBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIN_SphereBeam_Proto, dfradius_)
      + sizeof(USIN_SphereBeam_Proto::dfradius_)
      - PROTOBUF_FIELD_OFFSET(USIN_SphereBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIN_SphereBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CircleBeam_Proto::InitAsDefaultInstance() {
}
class USIM_CircleBeam_Proto::_Internal {
 public:
};

USIM_CircleBeam_Proto::USIM_CircleBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CircleBeam_Proto)
}
USIM_CircleBeam_Proto::USIM_CircleBeam_Proto(const USIM_CircleBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:USIM_CircleBeam_Proto)
}

void USIM_CircleBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
}

USIM_CircleBeam_Proto::~USIM_CircleBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CircleBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CircleBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_CircleBeam_Proto::ArenaDtor(void* object) {
  USIM_CircleBeam_Proto* _this = reinterpret_cast< USIM_CircleBeam_Proto* >(object);
  (void)_this;
}
void USIM_CircleBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CircleBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CircleBeam_Proto& USIM_CircleBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CircleBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CircleBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CircleBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CircleBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfUDOpeningAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dfudopeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          dflength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CircleBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CircleBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_suuid(), target);
  }

  // double dfUDOpeningAngle = 4;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_dfudopeningangle(), target);
  }

  // double dfLength = 5;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dflength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CircleBeam_Proto)
  return target;
}

size_t USIM_CircleBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CircleBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfUDOpeningAngle = 4;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLength = 5;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CircleBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CircleBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CircleBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CircleBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CircleBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CircleBeam_Proto)
    MergeFrom(*source);
  }
}

void USIM_CircleBeam_Proto::MergeFrom(const USIM_CircleBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CircleBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (!(from.dfudopeningangle() <= 0 && from.dfudopeningangle() >= 0)) {
    _internal_set_dfudopeningangle(from._internal_dfudopeningangle());
  }
  if (!(from.dflength() <= 0 && from.dflength() >= 0)) {
    _internal_set_dflength(from._internal_dflength());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void USIM_CircleBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CircleBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CircleBeam_Proto::CopyFrom(const USIM_CircleBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CircleBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CircleBeam_Proto::IsInitialized() const {
  return true;
}

void USIM_CircleBeam_Proto::InternalSwap(USIM_CircleBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CircleBeam_Proto, uid_)
      + sizeof(USIM_CircleBeam_Proto::uid_)
      - PROTOBUF_FIELD_OFFSET(USIM_CircleBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CircleBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_ConeBeam_Proto::InitAsDefaultInstance() {
}
class USIM_ConeBeam_Proto::_Internal {
 public:
};

USIM_ConeBeam_Proto::USIM_ConeBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_ConeBeam_Proto)
}
USIM_ConeBeam_Proto::USIM_ConeBeam_Proto(const USIM_ConeBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dfopeningangle_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfopeningangle_));
  // @@protoc_insertion_point(copy_constructor:USIM_ConeBeam_Proto)
}

void USIM_ConeBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfopeningangle_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfopeningangle_));
}

USIM_ConeBeam_Proto::~USIM_ConeBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIM_ConeBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_ConeBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_ConeBeam_Proto::ArenaDtor(void* object) {
  USIM_ConeBeam_Proto* _this = reinterpret_cast< USIM_ConeBeam_Proto* >(object);
  (void)_this;
}
void USIM_ConeBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_ConeBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_ConeBeam_Proto& USIM_ConeBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_ConeBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_ConeBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_ConeBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfopeningangle_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfopeningangle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_ConeBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTerminalID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uterminalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfradius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          dfradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfAzimuthAngle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          dfazimuthangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfPitchAngle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dfpitchangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfOpeningAngle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dfopeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_ConeBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_ConeBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uterminalid(), target);
  }

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_suuid(), target);
  }

  // double dfradius = 5;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_dfradius(), target);
  }

  // double dfAzimuthAngle = 6;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_dfazimuthangle(), target);
  }

  // double dfPitchAngle = 7;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dfpitchangle(), target);
  }

  // double dfOpeningAngle = 8;
  if (!(this->dfopeningangle() <= 0 && this->dfopeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_dfopeningangle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_ConeBeam_Proto)
  return target;
}

size_t USIM_ConeBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_ConeBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uterminalid());
  }

  // double dfradius = 5;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfAzimuthAngle = 6;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfPitchAngle = 7;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfOpeningAngle = 8;
  if (!(this->dfopeningangle() <= 0 && this->dfopeningangle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_ConeBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_ConeBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_ConeBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_ConeBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_ConeBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_ConeBeam_Proto)
    MergeFrom(*source);
  }
}

void USIM_ConeBeam_Proto::MergeFrom(const USIM_ConeBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_ConeBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.uterminalid() != 0) {
    _internal_set_uterminalid(from._internal_uterminalid());
  }
  if (!(from.dfradius() <= 0 && from.dfradius() >= 0)) {
    _internal_set_dfradius(from._internal_dfradius());
  }
  if (!(from.dfazimuthangle() <= 0 && from.dfazimuthangle() >= 0)) {
    _internal_set_dfazimuthangle(from._internal_dfazimuthangle());
  }
  if (!(from.dfpitchangle() <= 0 && from.dfpitchangle() >= 0)) {
    _internal_set_dfpitchangle(from._internal_dfpitchangle());
  }
  if (!(from.dfopeningangle() <= 0 && from.dfopeningangle() >= 0)) {
    _internal_set_dfopeningangle(from._internal_dfopeningangle());
  }
}

void USIM_ConeBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_ConeBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_ConeBeam_Proto::CopyFrom(const USIM_ConeBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_ConeBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_ConeBeam_Proto::IsInitialized() const {
  return true;
}

void USIM_ConeBeam_Proto::InternalSwap(USIM_ConeBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_ConeBeam_Proto, dfopeningangle_)
      + sizeof(USIM_ConeBeam_Proto::dfopeningangle_)
      - PROTOBUF_FIELD_OFFSET(USIM_ConeBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_ConeBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_PyramidBeam_Proto::InitAsDefaultInstance() {
}
class USIM_PyramidBeam_Proto::_Internal {
 public:
};

USIM_PyramidBeam_Proto::USIM_PyramidBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_PyramidBeam_Proto)
}
USIM_PyramidBeam_Proto::USIM_PyramidBeam_Proto(const USIM_PyramidBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&udisplaytype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
  // @@protoc_insertion_point(copy_constructor:USIM_PyramidBeam_Proto)
}

void USIM_PyramidBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udisplaytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
}

USIM_PyramidBeam_Proto::~USIM_PyramidBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIM_PyramidBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_PyramidBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_PyramidBeam_Proto::ArenaDtor(void* object) {
  USIM_PyramidBeam_Proto* _this = reinterpret_cast< USIM_PyramidBeam_Proto* >(object);
  (void)_this;
}
void USIM_PyramidBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_PyramidBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_PyramidBeam_Proto& USIM_PyramidBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_PyramidBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_PyramidBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_PyramidBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udisplaytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_PyramidBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTerminalID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uterminalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          utype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bFiled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bfiled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDisplayType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          udisplaytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfAzimuthAngle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dfazimuthangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfPitchAngle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dfpitchangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLROpeningAngle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          dflropeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfUDOpeningAngle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          dfudopeningangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfradius = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          dfradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLength = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          dflength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_PyramidBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_PyramidBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uterminalid(), target);
  }

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_suuid(), target);
  }

  // uint32 uType = 5;
  if (this->utype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_utype(), target);
  }

  // bool bFiled = 6;
  if (this->bfiled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bfiled(), target);
  }

  // uint64 uColor = 7;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_ucolor(), target);
  }

  // uint32 uDisplayType = 8;
  if (this->udisplaytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_udisplaytype(), target);
  }

  // double dfAzimuthAngle = 9;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dfazimuthangle(), target);
  }

  // double dfPitchAngle = 10;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dfpitchangle(), target);
  }

  // double dfLROpeningAngle = 11;
  if (!(this->dflropeningangle() <= 0 && this->dflropeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_dflropeningangle(), target);
  }

  // double dfUDOpeningAngle = 12;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_dfudopeningangle(), target);
  }

  // double dfradius = 13;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_dfradius(), target);
  }

  // double dfLength = 14;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_dflength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_PyramidBeam_Proto)
  return target;
}

size_t USIM_PyramidBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_PyramidBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uterminalid());
  }

  // uint32 uType = 5;
  if (this->utype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_utype());
  }

  // bool bFiled = 6;
  if (this->bfiled() != 0) {
    total_size += 1 + 1;
  }

  // uint64 uColor = 7;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  // double dfAzimuthAngle = 9;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfPitchAngle = 10;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLROpeningAngle = 11;
  if (!(this->dflropeningangle() <= 0 && this->dflropeningangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfUDOpeningAngle = 12;
  if (!(this->dfudopeningangle() <= 0 && this->dfudopeningangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfradius = 13;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLength = 14;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uDisplayType = 8;
  if (this->udisplaytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udisplaytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_PyramidBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_PyramidBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_PyramidBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_PyramidBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_PyramidBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_PyramidBeam_Proto)
    MergeFrom(*source);
  }
}

void USIM_PyramidBeam_Proto::MergeFrom(const USIM_PyramidBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_PyramidBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.uterminalid() != 0) {
    _internal_set_uterminalid(from._internal_uterminalid());
  }
  if (from.utype() != 0) {
    _internal_set_utype(from._internal_utype());
  }
  if (from.bfiled() != 0) {
    _internal_set_bfiled(from._internal_bfiled());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
  if (!(from.dfazimuthangle() <= 0 && from.dfazimuthangle() >= 0)) {
    _internal_set_dfazimuthangle(from._internal_dfazimuthangle());
  }
  if (!(from.dfpitchangle() <= 0 && from.dfpitchangle() >= 0)) {
    _internal_set_dfpitchangle(from._internal_dfpitchangle());
  }
  if (!(from.dflropeningangle() <= 0 && from.dflropeningangle() >= 0)) {
    _internal_set_dflropeningangle(from._internal_dflropeningangle());
  }
  if (!(from.dfudopeningangle() <= 0 && from.dfudopeningangle() >= 0)) {
    _internal_set_dfudopeningangle(from._internal_dfudopeningangle());
  }
  if (!(from.dfradius() <= 0 && from.dfradius() >= 0)) {
    _internal_set_dfradius(from._internal_dfradius());
  }
  if (!(from.dflength() <= 0 && from.dflength() >= 0)) {
    _internal_set_dflength(from._internal_dflength());
  }
  if (from.udisplaytype() != 0) {
    _internal_set_udisplaytype(from._internal_udisplaytype());
  }
}

void USIM_PyramidBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_PyramidBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_PyramidBeam_Proto::CopyFrom(const USIM_PyramidBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_PyramidBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_PyramidBeam_Proto::IsInitialized() const {
  return true;
}

void USIM_PyramidBeam_Proto::InternalSwap(USIM_PyramidBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_PyramidBeam_Proto, udisplaytype_)
      + sizeof(USIM_PyramidBeam_Proto::udisplaytype_)
      - PROTOBUF_FIELD_OFFSET(USIM_PyramidBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_PyramidBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_CylinderBeam_Proto::InitAsDefaultInstance() {
}
class USIM_CylinderBeam_Proto::_Internal {
 public:
};

USIM_CylinderBeam_Proto::USIM_CylinderBeam_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_CylinderBeam_Proto)
}
USIM_CylinderBeam_Proto::USIM_CylinderBeam_Proto(const USIM_CylinderBeam_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&udisplaytype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
  // @@protoc_insertion_point(copy_constructor:USIM_CylinderBeam_Proto)
}

void USIM_CylinderBeam_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udisplaytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
}

USIM_CylinderBeam_Proto::~USIM_CylinderBeam_Proto() {
  // @@protoc_insertion_point(destructor:USIM_CylinderBeam_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_CylinderBeam_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_CylinderBeam_Proto::ArenaDtor(void* object) {
  USIM_CylinderBeam_Proto* _this = reinterpret_cast< USIM_CylinderBeam_Proto* >(object);
  (void)_this;
}
void USIM_CylinderBeam_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_CylinderBeam_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_CylinderBeam_Proto& USIM_CylinderBeam_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_CylinderBeam_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_CylinderBeam_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_CylinderBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udisplaytype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(udisplaytype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_CylinderBeam_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bFiled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bfiled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uDisplayType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          udisplaytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dfAzimuthAngle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          dfazimuthangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfPitchAngle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dfpitchangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfradius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dfradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLength = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dflength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_CylinderBeam_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_CylinderBeam_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_suuid(), target);
  }

  // bool bFiled = 4;
  if (this->bfiled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bfiled(), target);
  }

  // uint64 uColor = 5;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ucolor(), target);
  }

  // uint32 uDisplayType = 6;
  if (this->udisplaytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_udisplaytype(), target);
  }

  // double dfAzimuthAngle = 7;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_dfazimuthangle(), target);
  }

  // double dfPitchAngle = 8;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_dfpitchangle(), target);
  }

  // double dfradius = 9;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_dfradius(), target);
  }

  // double dfLength = 10;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_dflength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_CylinderBeam_Proto)
  return target;
}

size_t USIM_CylinderBeam_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_CylinderBeam_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // bool bFiled = 4;
  if (this->bfiled() != 0) {
    total_size += 1 + 1;
  }

  // uint64 uColor = 5;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  // double dfAzimuthAngle = 7;
  if (!(this->dfazimuthangle() <= 0 && this->dfazimuthangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfPitchAngle = 8;
  if (!(this->dfpitchangle() <= 0 && this->dfpitchangle() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfradius = 9;
  if (!(this->dfradius() <= 0 && this->dfradius() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLength = 10;
  if (!(this->dflength() <= 0 && this->dflength() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uDisplayType = 6;
  if (this->udisplaytype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_udisplaytype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_CylinderBeam_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_CylinderBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_CylinderBeam_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_CylinderBeam_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_CylinderBeam_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_CylinderBeam_Proto)
    MergeFrom(*source);
  }
}

void USIM_CylinderBeam_Proto::MergeFrom(const USIM_CylinderBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_CylinderBeam_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.bfiled() != 0) {
    _internal_set_bfiled(from._internal_bfiled());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
  if (!(from.dfazimuthangle() <= 0 && from.dfazimuthangle() >= 0)) {
    _internal_set_dfazimuthangle(from._internal_dfazimuthangle());
  }
  if (!(from.dfpitchangle() <= 0 && from.dfpitchangle() >= 0)) {
    _internal_set_dfpitchangle(from._internal_dfpitchangle());
  }
  if (!(from.dfradius() <= 0 && from.dfradius() >= 0)) {
    _internal_set_dfradius(from._internal_dfradius());
  }
  if (!(from.dflength() <= 0 && from.dflength() >= 0)) {
    _internal_set_dflength(from._internal_dflength());
  }
  if (from.udisplaytype() != 0) {
    _internal_set_udisplaytype(from._internal_udisplaytype());
  }
}

void USIM_CylinderBeam_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_CylinderBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_CylinderBeam_Proto::CopyFrom(const USIM_CylinderBeam_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_CylinderBeam_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_CylinderBeam_Proto::IsInitialized() const {
  return true;
}

void USIM_CylinderBeam_Proto::InternalSwap(USIM_CylinderBeam_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_CylinderBeam_Proto, udisplaytype_)
      + sizeof(USIM_CylinderBeam_Proto::udisplaytype_)
      - PROTOBUF_FIELD_OFFSET(USIM_CylinderBeam_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_CylinderBeam_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_Line_Proto::InitAsDefaultInstance() {
}
class USIM_Line_Proto::_Internal {
 public:
};

USIM_Line_Proto::USIM_Line_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_Line_Proto)
}
USIM_Line_Proto::USIM_Line_Proto(const USIM_Line_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&ulinetype_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ulinetype_));
  // @@protoc_insertion_point(copy_constructor:USIM_Line_Proto)
}

void USIM_Line_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_Line_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulinetype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ulinetype_));
}

USIM_Line_Proto::~USIM_Line_Proto() {
  // @@protoc_insertion_point(destructor:USIM_Line_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_Line_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_Line_Proto::ArenaDtor(void* object) {
  USIM_Line_Proto* _this = reinterpret_cast< USIM_Line_Proto* >(object);
  (void)_this;
}
void USIM_Line_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_Line_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_Line_Proto& USIM_Line_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_Line_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_Line_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_Line_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulinetype_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(ulinetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_Line_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uTerminalID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uterminalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uLineType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ulinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uColor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ucolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_Line_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_Line_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uterminalid(), target);
  }

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_suuid(), target);
  }

  // uint32 uLineType = 5;
  if (this->ulinetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ulinetype(), target);
  }

  // uint64 uColor = 6;
  if (this->ucolor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ucolor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_Line_Proto)
  return target;
}

size_t USIM_Line_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_Line_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 4;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // uint32 uTerminalID = 3;
  if (this->uterminalid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uterminalid());
  }

  // uint64 uColor = 6;
  if (this->ucolor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ucolor());
  }

  // uint32 uLineType = 5;
  if (this->ulinetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ulinetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_Line_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_Line_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_Line_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_Line_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_Line_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_Line_Proto)
    MergeFrom(*source);
  }
}

void USIM_Line_Proto::MergeFrom(const USIM_Line_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_Line_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.uterminalid() != 0) {
    _internal_set_uterminalid(from._internal_uterminalid());
  }
  if (from.ucolor() != 0) {
    _internal_set_ucolor(from._internal_ucolor());
  }
  if (from.ulinetype() != 0) {
    _internal_set_ulinetype(from._internal_ulinetype());
  }
}

void USIM_Line_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_Line_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_Line_Proto::CopyFrom(const USIM_Line_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_Line_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_Line_Proto::IsInitialized() const {
  return true;
}

void USIM_Line_Proto::InternalSwap(USIM_Line_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_Line_Proto, ulinetype_)
      + sizeof(USIM_Line_Proto::ulinetype_)
      - PROTOBUF_FIELD_OFFSET(USIM_Line_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_Line_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_GraphOnoff_Proto::InitAsDefaultInstance() {
}
class USIM_GraphOnoff_Proto::_Internal {
 public:
};

USIM_GraphOnoff_Proto::USIM_GraphOnoff_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_GraphOnoff_Proto)
}
USIM_GraphOnoff_Proto::USIM_GraphOnoff_Proto(const USIM_GraphOnoff_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suuid().empty()) {
    suuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suuid(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:USIM_GraphOnoff_Proto)
}

void USIM_GraphOnoff_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto.base);
  suuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
}

USIM_GraphOnoff_Proto::~USIM_GraphOnoff_Proto() {
  // @@protoc_insertion_point(destructor:USIM_GraphOnoff_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_GraphOnoff_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  suuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_GraphOnoff_Proto::ArenaDtor(void* object) {
  USIM_GraphOnoff_Proto* _this = reinterpret_cast< USIM_GraphOnoff_Proto* >(object);
  (void)_this;
}
void USIM_GraphOnoff_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_GraphOnoff_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_GraphOnoff_Proto& USIM_GraphOnoff_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_GraphOnoff_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_GraphOnoff_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_GraphOnoff_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_GraphOnoff_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sUuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_suuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_GraphOnoff_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_GraphOnoff_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_suuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_GraphOnoff_Proto)
  return target;
}

size_t USIM_GraphOnoff_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_GraphOnoff_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sUuid = 3;
  if (this->suuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_suuid());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_GraphOnoff_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_GraphOnoff_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_GraphOnoff_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_GraphOnoff_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_GraphOnoff_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_GraphOnoff_Proto)
    MergeFrom(*source);
  }
}

void USIM_GraphOnoff_Proto::MergeFrom(const USIM_GraphOnoff_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_GraphOnoff_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.suuid().size() > 0) {
    _internal_set_suuid(from._internal_suuid());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void USIM_GraphOnoff_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_GraphOnoff_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_GraphOnoff_Proto::CopyFrom(const USIM_GraphOnoff_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_GraphOnoff_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_GraphOnoff_Proto::IsInitialized() const {
  return true;
}

void USIM_GraphOnoff_Proto::InternalSwap(USIM_GraphOnoff_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suuid_.Swap(&other->suuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_GraphOnoff_Proto, uid_)
      + sizeof(USIM_GraphOnoff_Proto::uid_)
      - PROTOBUF_FIELD_OFFSET(USIM_GraphOnoff_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_GraphOnoff_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_SonarDetectInfo_Proto::InitAsDefaultInstance() {
}
class USIM_SonarDetectInfo_Proto::_Internal {
 public:
};

USIM_SonarDetectInfo_Proto::USIM_SonarDetectInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  para_targetid_(arena),
  para_rsl_passive_(arena),
  para_rsl_active_(arena),
  para_ts_(arena),
  para_rnr_(arena),
  para_gain_(arena),
  para_pd_(arena),
  para_tlt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_SonarDetectInfo_Proto)
}
USIM_SonarDetectInfo_Proto::USIM_SonarDetectInfo_Proto(const USIM_SonarDetectInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      para_targetid_(from.para_targetid_),
      para_rsl_passive_(from.para_rsl_passive_),
      para_rsl_active_(from.para_rsl_active_),
      para_ts_(from.para_ts_),
      para_rnr_(from.para_rnr_),
      para_gain_(from.para_gain_),
      para_pd_(from.para_pd_),
      para_tlt_(from.para_tlt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platname().empty()) {
    platname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platname(),
      GetArena());
  }
  detector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detector().empty()) {
    detector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_detector(),
      GetArena());
  }
  plat_id_ = from.plat_id_;
  // @@protoc_insertion_point(copy_constructor:USIM_SonarDetectInfo_Proto)
}

void USIM_SonarDetectInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto.base);
  platname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plat_id_ = 0u;
}

USIM_SonarDetectInfo_Proto::~USIM_SonarDetectInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_SonarDetectInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_SonarDetectInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  platname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_SonarDetectInfo_Proto::ArenaDtor(void* object) {
  USIM_SonarDetectInfo_Proto* _this = reinterpret_cast< USIM_SonarDetectInfo_Proto* >(object);
  (void)_this;
}
void USIM_SonarDetectInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_SonarDetectInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_SonarDetectInfo_Proto& USIM_SonarDetectInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_SonarDetectInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_SonarDetectInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_SonarDetectInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  para_targetid_.Clear();
  para_rsl_passive_.Clear();
  para_rsl_active_.Clear();
  para_ts_.Clear();
  para_rnr_.Clear();
  para_gain_.Clear();
  para_pd_.Clear();
  para_tlt_.Clear();
  platname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  plat_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_SonarDetectInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 plat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes platname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes detector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_detector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 para_targetID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_para_targetid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_para_targetid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double para_RSL_passive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_rsl_passive(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_para_rsl_passive(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_RSL_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_rsl_active(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_para_rsl_active(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_TS = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_ts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_para_ts(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_RNR = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_rnr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_para_rnr(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_gain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73) {
          _internal_add_para_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_pd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_pd(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81) {
          _internal_add_para_pd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double para_tlt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_para_tlt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89) {
          _internal_add_para_tlt(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_SonarDetectInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_SonarDetectInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 plat_id = 1;
  if (this->plat_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plat_id(), target);
  }

  // bytes platname = 2;
  if (this->platname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_platname(), target);
  }

  // bytes detector = 3;
  if (this->detector().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_detector(), target);
  }

  // repeated uint32 para_targetID = 4;
  {
    int byte_size = _para_targetid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_para_targetid(), byte_size, target);
    }
  }

  // repeated double para_RSL_passive = 5;
  if (this->_internal_para_rsl_passive_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_para_rsl_passive(), target);
  }

  // repeated double para_RSL_active = 6;
  if (this->_internal_para_rsl_active_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_para_rsl_active(), target);
  }

  // repeated double para_TS = 7;
  if (this->_internal_para_ts_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_para_ts(), target);
  }

  // repeated double para_RNR = 8;
  if (this->_internal_para_rnr_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_para_rnr(), target);
  }

  // repeated double para_gain = 9;
  if (this->_internal_para_gain_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_para_gain(), target);
  }

  // repeated double para_pd = 10;
  if (this->_internal_para_pd_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_para_pd(), target);
  }

  // repeated double para_tlt = 11;
  if (this->_internal_para_tlt_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_para_tlt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_SonarDetectInfo_Proto)
  return target;
}

size_t USIM_SonarDetectInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_SonarDetectInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 para_targetID = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->para_targetid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_targetid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_RSL_passive = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_rsl_passive_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_rsl_passive_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_RSL_active = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_rsl_active_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_rsl_active_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_TS = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_ts_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_ts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_RNR = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_rnr_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_rnr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_gain = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_gain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_pd = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_pd_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_pd_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double para_tlt = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_para_tlt_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _para_tlt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes platname = 2;
  if (this->platname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platname());
  }

  // bytes detector = 3;
  if (this->detector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_detector());
  }

  // uint32 plat_id = 1;
  if (this->plat_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plat_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_SonarDetectInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_SonarDetectInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_SonarDetectInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_SonarDetectInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_SonarDetectInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_SonarDetectInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_SonarDetectInfo_Proto::MergeFrom(const USIM_SonarDetectInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_SonarDetectInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  para_targetid_.MergeFrom(from.para_targetid_);
  para_rsl_passive_.MergeFrom(from.para_rsl_passive_);
  para_rsl_active_.MergeFrom(from.para_rsl_active_);
  para_ts_.MergeFrom(from.para_ts_);
  para_rnr_.MergeFrom(from.para_rnr_);
  para_gain_.MergeFrom(from.para_gain_);
  para_pd_.MergeFrom(from.para_pd_);
  para_tlt_.MergeFrom(from.para_tlt_);
  if (from.platname().size() > 0) {
    _internal_set_platname(from._internal_platname());
  }
  if (from.detector().size() > 0) {
    _internal_set_detector(from._internal_detector());
  }
  if (from.plat_id() != 0) {
    _internal_set_plat_id(from._internal_plat_id());
  }
}

void USIM_SonarDetectInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_SonarDetectInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_SonarDetectInfo_Proto::CopyFrom(const USIM_SonarDetectInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_SonarDetectInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_SonarDetectInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_SonarDetectInfo_Proto::InternalSwap(USIM_SonarDetectInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  para_targetid_.InternalSwap(&other->para_targetid_);
  para_rsl_passive_.InternalSwap(&other->para_rsl_passive_);
  para_rsl_active_.InternalSwap(&other->para_rsl_active_);
  para_ts_.InternalSwap(&other->para_ts_);
  para_rnr_.InternalSwap(&other->para_rnr_);
  para_gain_.InternalSwap(&other->para_gain_);
  para_pd_.InternalSwap(&other->para_pd_);
  para_tlt_.InternalSwap(&other->para_tlt_);
  platname_.Swap(&other->platname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detector_.Swap(&other->detector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(plat_id_, other->plat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_SonarDetectInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_SonobouyDetectInfo_Proto::InitAsDefaultInstance() {
}
class USIM_SonobouyDetectInfo_Proto::_Internal {
 public:
};

USIM_SonobouyDetectInfo_Proto::USIM_SonobouyDetectInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  para_detectinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_SonobouyDetectInfo_Proto)
}
USIM_SonobouyDetectInfo_Proto::USIM_SonobouyDetectInfo_Proto(const USIM_SonobouyDetectInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      para_detectinfo_(from.para_detectinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:USIM_SonobouyDetectInfo_Proto)
}

void USIM_SonobouyDetectInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto.base);
}

USIM_SonobouyDetectInfo_Proto::~USIM_SonobouyDetectInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_SonobouyDetectInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_SonobouyDetectInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_SonobouyDetectInfo_Proto::ArenaDtor(void* object) {
  USIM_SonobouyDetectInfo_Proto* _this = reinterpret_cast< USIM_SonobouyDetectInfo_Proto* >(object);
  (void)_this;
}
void USIM_SonobouyDetectInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_SonobouyDetectInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_SonobouyDetectInfo_Proto& USIM_SonobouyDetectInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_SonobouyDetectInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_SonobouyDetectInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_SonobouyDetectInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  para_detectinfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_SonobouyDetectInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .USIM_SonarDetectInfo_Proto para_DetectInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_para_detectinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_SonobouyDetectInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_SonobouyDetectInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .USIM_SonarDetectInfo_Proto para_DetectInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_para_detectinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_para_detectinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_SonobouyDetectInfo_Proto)
  return target;
}

size_t USIM_SonobouyDetectInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_SonobouyDetectInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_SonarDetectInfo_Proto para_DetectInfo = 1;
  total_size += 1UL * this->_internal_para_detectinfo_size();
  for (const auto& msg : this->para_detectinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_SonobouyDetectInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_SonobouyDetectInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_SonobouyDetectInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_SonobouyDetectInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_SonobouyDetectInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_SonobouyDetectInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_SonobouyDetectInfo_Proto::MergeFrom(const USIM_SonobouyDetectInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_SonobouyDetectInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  para_detectinfo_.MergeFrom(from.para_detectinfo_);
}

void USIM_SonobouyDetectInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_SonobouyDetectInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_SonobouyDetectInfo_Proto::CopyFrom(const USIM_SonobouyDetectInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_SonobouyDetectInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_SonobouyDetectInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_SonobouyDetectInfo_Proto::InternalSwap(USIM_SonobouyDetectInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  para_detectinfo_.InternalSwap(&other->para_detectinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_SonobouyDetectInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_ChargeInfo_Proto::InitAsDefaultInstance() {
}
class USIM_ChargeInfo_Proto::_Internal {
 public:
};

USIM_ChargeInfo_Proto::USIM_ChargeInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_ChargeInfo_Proto)
}
USIM_ChargeInfo_Proto::USIM_ChargeInfo_Proto(const USIM_ChargeInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utargetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_utargetname().empty()) {
    utargetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_utargetname(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dfcharge_percent_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfcharge_percent_));
  // @@protoc_insertion_point(copy_constructor:USIM_ChargeInfo_Proto)
}

void USIM_ChargeInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto.base);
  utargetname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfcharge_percent_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfcharge_percent_));
}

USIM_ChargeInfo_Proto::~USIM_ChargeInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_ChargeInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_ChargeInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  utargetname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_ChargeInfo_Proto::ArenaDtor(void* object) {
  USIM_ChargeInfo_Proto* _this = reinterpret_cast< USIM_ChargeInfo_Proto* >(object);
  (void)_this;
}
void USIM_ChargeInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_ChargeInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_ChargeInfo_Proto& USIM_ChargeInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_ChargeInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_ChargeInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_ChargeInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utargetname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dfcharge_percent_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(dfcharge_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_ChargeInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 uID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes uTargetName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_utargetname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dfcharge_Percent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          dfcharge_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_ChargeInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_ChargeInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uid(), target);
  }

  // bytes uTargetName = 3;
  if (this->utargetname().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_utargetname(), target);
  }

  // float dfcharge_Percent = 4;
  if (!(this->dfcharge_percent() <= 0 && this->dfcharge_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_dfcharge_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_ChargeInfo_Proto)
  return target;
}

size_t USIM_ChargeInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_ChargeInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes uTargetName = 3;
  if (this->utargetname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_utargetname());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 uID = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uid());
  }

  // float dfcharge_Percent = 4;
  if (!(this->dfcharge_percent() <= 0 && this->dfcharge_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_ChargeInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_ChargeInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_ChargeInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_ChargeInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_ChargeInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_ChargeInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_ChargeInfo_Proto::MergeFrom(const USIM_ChargeInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_ChargeInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utargetname().size() > 0) {
    _internal_set_utargetname(from._internal_utargetname());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (!(from.dfcharge_percent() <= 0 && from.dfcharge_percent() >= 0)) {
    _internal_set_dfcharge_percent(from._internal_dfcharge_percent());
  }
}

void USIM_ChargeInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_ChargeInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_ChargeInfo_Proto::CopyFrom(const USIM_ChargeInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_ChargeInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_ChargeInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_ChargeInfo_Proto::InternalSwap(USIM_ChargeInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  utargetname_.Swap(&other->utargetname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_ChargeInfo_Proto, dfcharge_percent_)
      + sizeof(USIM_ChargeInfo_Proto::dfcharge_percent_)
      - PROTOBUF_FIELD_OFFSET(USIM_ChargeInfo_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_ChargeInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_MSLng_Lat_Proto::InitAsDefaultInstance() {
}
class USIM_MSLng_Lat_Proto::_Internal {
 public:
};

USIM_MSLng_Lat_Proto::USIM_MSLng_Lat_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_MSLng_Lat_Proto)
}
USIM_MSLng_Lat_Proto::USIM_MSLng_Lat_Proto(const USIM_MSLng_Lat_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dflon_, &from.dflon_,
    static_cast<size_t>(reinterpret_cast<char*>(&fpause_) -
    reinterpret_cast<char*>(&dflon_)) + sizeof(fpause_));
  // @@protoc_insertion_point(copy_constructor:USIM_MSLng_Lat_Proto)
}

void USIM_MSLng_Lat_Proto::SharedCtor() {
  ::memset(&dflon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fpause_) -
      reinterpret_cast<char*>(&dflon_)) + sizeof(fpause_));
}

USIM_MSLng_Lat_Proto::~USIM_MSLng_Lat_Proto() {
  // @@protoc_insertion_point(destructor:USIM_MSLng_Lat_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_MSLng_Lat_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_MSLng_Lat_Proto::ArenaDtor(void* object) {
  USIM_MSLng_Lat_Proto* _this = reinterpret_cast< USIM_MSLng_Lat_Proto* >(object);
  (void)_this;
}
void USIM_MSLng_Lat_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_MSLng_Lat_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_MSLng_Lat_Proto& USIM_MSLng_Lat_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_MSLng_Lat_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_MSLng_Lat_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_MSLng_Lat_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dflon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fpause_) -
      reinterpret_cast<char*>(&dflon_)) + sizeof(fpause_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_MSLng_Lat_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfLon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dflon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfLat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dflat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dfAlt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dfalt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float fSpeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fPause = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fpause_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_MSLng_Lat_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_MSLng_Lat_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfLon = 1;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dflon(), target);
  }

  // double dfLat = 2;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_dflat(), target);
  }

  // double dfAlt = 3;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_dfalt(), target);
  }

  // float fSpeed = 4;
  if (!(this->fspeed() <= 0 && this->fspeed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fspeed(), target);
  }

  // float fPause = 5;
  if (!(this->fpause() <= 0 && this->fpause() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fpause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_MSLng_Lat_Proto)
  return target;
}

size_t USIM_MSLng_Lat_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_MSLng_Lat_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfLon = 1;
  if (!(this->dflon() <= 0 && this->dflon() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfLat = 2;
  if (!(this->dflat() <= 0 && this->dflat() >= 0)) {
    total_size += 1 + 8;
  }

  // double dfAlt = 3;
  if (!(this->dfalt() <= 0 && this->dfalt() >= 0)) {
    total_size += 1 + 8;
  }

  // float fSpeed = 4;
  if (!(this->fspeed() <= 0 && this->fspeed() >= 0)) {
    total_size += 1 + 4;
  }

  // float fPause = 5;
  if (!(this->fpause() <= 0 && this->fpause() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_MSLng_Lat_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_MSLng_Lat_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_MSLng_Lat_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_MSLng_Lat_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_MSLng_Lat_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_MSLng_Lat_Proto)
    MergeFrom(*source);
  }
}

void USIM_MSLng_Lat_Proto::MergeFrom(const USIM_MSLng_Lat_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_MSLng_Lat_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dflon() <= 0 && from.dflon() >= 0)) {
    _internal_set_dflon(from._internal_dflon());
  }
  if (!(from.dflat() <= 0 && from.dflat() >= 0)) {
    _internal_set_dflat(from._internal_dflat());
  }
  if (!(from.dfalt() <= 0 && from.dfalt() >= 0)) {
    _internal_set_dfalt(from._internal_dfalt());
  }
  if (!(from.fspeed() <= 0 && from.fspeed() >= 0)) {
    _internal_set_fspeed(from._internal_fspeed());
  }
  if (!(from.fpause() <= 0 && from.fpause() >= 0)) {
    _internal_set_fpause(from._internal_fpause());
  }
}

void USIM_MSLng_Lat_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_MSLng_Lat_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_MSLng_Lat_Proto::CopyFrom(const USIM_MSLng_Lat_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_MSLng_Lat_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_MSLng_Lat_Proto::IsInitialized() const {
  return true;
}

void USIM_MSLng_Lat_Proto::InternalSwap(USIM_MSLng_Lat_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_MSLng_Lat_Proto, fpause_)
      + sizeof(USIM_MSLng_Lat_Proto::fpause_)
      - PROTOBUF_FIELD_OFFSET(USIM_MSLng_Lat_Proto, dflon_)>(
          reinterpret_cast<char*>(&dflon_),
          reinterpret_cast<char*>(&other->dflon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_MSLng_Lat_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_TrackAreaInfo_Proto::InitAsDefaultInstance() {
}
class USIM_TrackAreaInfo_Proto::_Internal {
 public:
};

USIM_TrackAreaInfo_Proto::USIM_TrackAreaInfo_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vecspointlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_TrackAreaInfo_Proto)
}
USIM_TrackAreaInfo_Proto::USIM_TrackAreaInfo_Proto(const USIM_TrackAreaInfo_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecspointlist_(from.vecspointlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&itype_, &from.itype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ialliance_) -
    reinterpret_cast<char*>(&itype_)) + sizeof(ialliance_));
  // @@protoc_insertion_point(copy_constructor:USIM_TrackAreaInfo_Proto)
}

void USIM_TrackAreaInfo_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&itype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ialliance_) -
      reinterpret_cast<char*>(&itype_)) + sizeof(ialliance_));
}

USIM_TrackAreaInfo_Proto::~USIM_TrackAreaInfo_Proto() {
  // @@protoc_insertion_point(destructor:USIM_TrackAreaInfo_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_TrackAreaInfo_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_TrackAreaInfo_Proto::ArenaDtor(void* object) {
  USIM_TrackAreaInfo_Proto* _this = reinterpret_cast< USIM_TrackAreaInfo_Proto* >(object);
  (void)_this;
}
void USIM_TrackAreaInfo_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_TrackAreaInfo_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_TrackAreaInfo_Proto& USIM_TrackAreaInfo_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_TrackAreaInfo_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_TrackAreaInfo_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_TrackAreaInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecspointlist_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&itype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ialliance_) -
      reinterpret_cast<char*>(&itype_)) + sizeof(ialliance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_TrackAreaInfo_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          itype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iAlliance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ialliance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_MSLng_Lat_Proto vecSPointList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecspointlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_TrackAreaInfo_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_TrackAreaInfo_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 iType = 2;
  if (this->itype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itype(), target);
  }

  // uint32 iAlliance = 3;
  if (this->ialliance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ialliance(), target);
  }

  // repeated .USIM_MSLng_Lat_Proto vecSPointList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vecspointlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_vecspointlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_TrackAreaInfo_Proto)
  return target;
}

size_t USIM_TrackAreaInfo_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_TrackAreaInfo_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_MSLng_Lat_Proto vecSPointList = 4;
  total_size += 1UL * this->_internal_vecspointlist_size();
  for (const auto& msg : this->vecspointlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 iType = 2;
  if (this->itype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_itype());
  }

  // uint32 iAlliance = 3;
  if (this->ialliance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ialliance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_TrackAreaInfo_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_TrackAreaInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_TrackAreaInfo_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_TrackAreaInfo_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_TrackAreaInfo_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_TrackAreaInfo_Proto)
    MergeFrom(*source);
  }
}

void USIM_TrackAreaInfo_Proto::MergeFrom(const USIM_TrackAreaInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_TrackAreaInfo_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vecspointlist_.MergeFrom(from.vecspointlist_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.itype() != 0) {
    _internal_set_itype(from._internal_itype());
  }
  if (from.ialliance() != 0) {
    _internal_set_ialliance(from._internal_ialliance());
  }
}

void USIM_TrackAreaInfo_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_TrackAreaInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_TrackAreaInfo_Proto::CopyFrom(const USIM_TrackAreaInfo_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_TrackAreaInfo_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_TrackAreaInfo_Proto::IsInitialized() const {
  return true;
}

void USIM_TrackAreaInfo_Proto::InternalSwap(USIM_TrackAreaInfo_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vecspointlist_.InternalSwap(&other->vecspointlist_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_TrackAreaInfo_Proto, ialliance_)
      + sizeof(USIM_TrackAreaInfo_Proto::ialliance_)
      - PROTOBUF_FIELD_OFFSET(USIM_TrackAreaInfo_Proto, itype_)>(
          reinterpret_cast<char*>(&itype_),
          reinterpret_cast<char*>(&other->itype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_TrackAreaInfo_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_UUVStateMessage_Proto::InitAsDefaultInstance() {
}
class USIM_UUVStateMessage_Proto::_Internal {
 public:
};

USIM_UUVStateMessage_Proto::USIM_UUVStateMessage_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_UUVStateMessage_Proto)
}
USIM_UUVStateMessage_Proto::USIM_UUVStateMessage_Proto(const USIM_UUVStateMessage_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:USIM_UUVStateMessage_Proto)
}

void USIM_UUVStateMessage_Proto::SharedCtor() {
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(state_));
}

USIM_UUVStateMessage_Proto::~USIM_UUVStateMessage_Proto() {
  // @@protoc_insertion_point(destructor:USIM_UUVStateMessage_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_UUVStateMessage_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USIM_UUVStateMessage_Proto::ArenaDtor(void* object) {
  USIM_UUVStateMessage_Proto* _this = reinterpret_cast< USIM_UUVStateMessage_Proto* >(object);
  (void)_this;
}
void USIM_UUVStateMessage_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_UUVStateMessage_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_UUVStateMessage_Proto& USIM_UUVStateMessage_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_UUVStateMessage_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_UUVStateMessage_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_UUVStateMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_UUVStateMessage_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 UUVID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uuvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_UUVStateMessage_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_UUVStateMessage_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // uint32 UUVID = 2;
  if (this->uuvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uuvid(), target);
  }

  // uint32 state = 3;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_UUVStateMessage_Proto)
  return target;
}

size_t USIM_UUVStateMessage_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_UUVStateMessage_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 UUVID = 2;
  if (this->uuvid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uuvid());
  }

  // uint32 state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_UUVStateMessage_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_UUVStateMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_UUVStateMessage_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_UUVStateMessage_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_UUVStateMessage_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_UUVStateMessage_Proto)
    MergeFrom(*source);
  }
}

void USIM_UUVStateMessage_Proto::MergeFrom(const USIM_UUVStateMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_UUVStateMessage_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.uuvid() != 0) {
    _internal_set_uuvid(from._internal_uuvid());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void USIM_UUVStateMessage_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_UUVStateMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_UUVStateMessage_Proto::CopyFrom(const USIM_UUVStateMessage_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_UUVStateMessage_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_UUVStateMessage_Proto::IsInitialized() const {
  return true;
}

void USIM_UUVStateMessage_Proto::InternalSwap(USIM_UUVStateMessage_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_UUVStateMessage_Proto, state_)
      + sizeof(USIM_UUVStateMessage_Proto::state_)
      - PROTOBUF_FIELD_OFFSET(USIM_UUVStateMessage_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_UUVStateMessage_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_TransferEquip_Proto::InitAsDefaultInstance() {
}
class USIM_TransferEquip_Proto::_Internal {
 public:
};

USIM_TransferEquip_Proto::USIM_TransferEquip_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_TransferEquip_Proto)
}
USIM_TransferEquip_Proto::USIM_TransferEquip_Proto(const USIM_TransferEquip_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  equiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_equiptype().empty()) {
    equiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_equiptype(),
      GetArena());
  }
  equipnum_ = from.equipnum_;
  // @@protoc_insertion_point(copy_constructor:USIM_TransferEquip_Proto)
}

void USIM_TransferEquip_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base);
  equiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  equipnum_ = 0u;
}

USIM_TransferEquip_Proto::~USIM_TransferEquip_Proto() {
  // @@protoc_insertion_point(destructor:USIM_TransferEquip_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_TransferEquip_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  equiptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_TransferEquip_Proto::ArenaDtor(void* object) {
  USIM_TransferEquip_Proto* _this = reinterpret_cast< USIM_TransferEquip_Proto* >(object);
  (void)_this;
}
void USIM_TransferEquip_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_TransferEquip_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_TransferEquip_Proto& USIM_TransferEquip_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_TransferEquip_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_TransferEquip_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_TransferEquip_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiptype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  equipnum_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_TransferEquip_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes EquipType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_equiptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EquipNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          equipnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_TransferEquip_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_TransferEquip_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes EquipType = 1;
  if (this->equiptype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_equiptype(), target);
  }

  // uint32 EquipNum = 2;
  if (this->equipnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_equipnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_TransferEquip_Proto)
  return target;
}

size_t USIM_TransferEquip_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_TransferEquip_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EquipType = 1;
  if (this->equiptype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_equiptype());
  }

  // uint32 EquipNum = 2;
  if (this->equipnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_equipnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_TransferEquip_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_TransferEquip_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_TransferEquip_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_TransferEquip_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_TransferEquip_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_TransferEquip_Proto)
    MergeFrom(*source);
  }
}

void USIM_TransferEquip_Proto::MergeFrom(const USIM_TransferEquip_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_TransferEquip_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.equiptype().size() > 0) {
    _internal_set_equiptype(from._internal_equiptype());
  }
  if (from.equipnum() != 0) {
    _internal_set_equipnum(from._internal_equipnum());
  }
}

void USIM_TransferEquip_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_TransferEquip_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_TransferEquip_Proto::CopyFrom(const USIM_TransferEquip_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_TransferEquip_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_TransferEquip_Proto::IsInitialized() const {
  return true;
}

void USIM_TransferEquip_Proto::InternalSwap(USIM_TransferEquip_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiptype_.Swap(&other->equiptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(equipnum_, other->equipnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_TransferEquip_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AMPHELITRANSFER_Proto::InitAsDefaultInstance() {
}
class USIM_AMPHELITRANSFER_Proto::_Internal {
 public:
};

USIM_AMPHELITRANSFER_Proto::USIM_AMPHELITRANSFER_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equiplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AMPHELITRANSFER_Proto)
}
USIM_AMPHELITRANSFER_Proto::USIM_AMPHELITRANSFER_Proto(const USIM_AMPHELITRANSFER_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equiplist_(from.equiplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportasset().empty()) {
    transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportasset(),
      GetArena());
  }
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportassettype().empty()) {
    transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportassettype(),
      GetArena());
  }
  heliasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_heliasset().empty()) {
    heliasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_heliasset(),
      GetArena());
  }
  heliassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_heliassettype().empty()) {
    heliassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_heliassettype(),
      GetArena());
  }
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetflag().empty()) {
    assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assetflag(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&istaffnum_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(istaffnum_));
  // @@protoc_insertion_point(copy_constructor:USIM_AMPHELITRANSFER_Proto)
}

void USIM_AMPHELITRANSFER_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto.base);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heliasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heliassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(istaffnum_));
}

USIM_AMPHELITRANSFER_Proto::~USIM_AMPHELITRANSFER_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AMPHELITRANSFER_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AMPHELITRANSFER_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transportasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heliasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heliassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AMPHELITRANSFER_Proto::ArenaDtor(void* object) {
  USIM_AMPHELITRANSFER_Proto* _this = reinterpret_cast< USIM_AMPHELITRANSFER_Proto* >(object);
  (void)_this;
}
void USIM_AMPHELITRANSFER_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AMPHELITRANSFER_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AMPHELITRANSFER_Proto& USIM_AMPHELITRANSFER_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AMPHELITRANSFER_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AMPHELITRANSFER_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AMPHELITRANSFER_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiplist_.Clear();
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heliasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heliassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(istaffnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AMPHELITRANSFER_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes transportAsset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transportasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transportAssetType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transportassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes heliAsset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_heliasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes heliAssetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_heliassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes assetFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_assetflag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iStaffNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          istaffnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_TransferEquip_Proto EquipList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // double fDamageLevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          fdamagelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AMPHELITRANSFER_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AMPHELITRANSFER_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes transportAsset = 2;
  if (this->transportasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transportasset(), target);
  }

  // bytes transportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transportassettype(), target);
  }

  // bytes heliAsset = 4;
  if (this->heliasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_heliasset(), target);
  }

  // bytes heliAssetType = 5;
  if (this->heliassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_heliassettype(), target);
  }

  // bytes assetFlag = 6;
  if (this->assetflag().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_assetflag(), target);
  }

  // uint32 iStaffNum = 7;
  if (this->istaffnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_istaffnum(), target);
  }

  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_equiplist(i), target, stream);
  }

  // double fDamageLevel = 9;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_fdamagelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AMPHELITRANSFER_Proto)
  return target;
}

size_t USIM_AMPHELITRANSFER_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AMPHELITRANSFER_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes transportAsset = 2;
  if (this->transportasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportasset());
  }

  // bytes transportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportassettype());
  }

  // bytes heliAsset = 4;
  if (this->heliasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_heliasset());
  }

  // bytes heliAssetType = 5;
  if (this->heliassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_heliassettype());
  }

  // bytes assetFlag = 6;
  if (this->assetflag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assetflag());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double fDamageLevel = 9;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 iStaffNum = 7;
  if (this->istaffnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_istaffnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AMPHELITRANSFER_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AMPHELITRANSFER_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AMPHELITRANSFER_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AMPHELITRANSFER_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AMPHELITRANSFER_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AMPHELITRANSFER_Proto)
    MergeFrom(*source);
  }
}

void USIM_AMPHELITRANSFER_Proto::MergeFrom(const USIM_AMPHELITRANSFER_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AMPHELITRANSFER_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiplist_.MergeFrom(from.equiplist_);
  if (from.transportasset().size() > 0) {
    _internal_set_transportasset(from._internal_transportasset());
  }
  if (from.transportassettype().size() > 0) {
    _internal_set_transportassettype(from._internal_transportassettype());
  }
  if (from.heliasset().size() > 0) {
    _internal_set_heliasset(from._internal_heliasset());
  }
  if (from.heliassettype().size() > 0) {
    _internal_set_heliassettype(from._internal_heliassettype());
  }
  if (from.assetflag().size() > 0) {
    _internal_set_assetflag(from._internal_assetflag());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (!(from.fdamagelevel() <= 0 && from.fdamagelevel() >= 0)) {
    _internal_set_fdamagelevel(from._internal_fdamagelevel());
  }
  if (from.istaffnum() != 0) {
    _internal_set_istaffnum(from._internal_istaffnum());
  }
}

void USIM_AMPHELITRANSFER_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AMPHELITRANSFER_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AMPHELITRANSFER_Proto::CopyFrom(const USIM_AMPHELITRANSFER_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AMPHELITRANSFER_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AMPHELITRANSFER_Proto::IsInitialized() const {
  return true;
}

void USIM_AMPHELITRANSFER_Proto::InternalSwap(USIM_AMPHELITRANSFER_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiplist_.InternalSwap(&other->equiplist_);
  transportasset_.Swap(&other->transportasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.Swap(&other->transportassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heliasset_.Swap(&other->heliasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heliassettype_.Swap(&other->heliassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.Swap(&other->assetflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AMPHELITRANSFER_Proto, istaffnum_)
      + sizeof(USIM_AMPHELITRANSFER_Proto::istaffnum_)
      - PROTOBUF_FIELD_OFFSET(USIM_AMPHELITRANSFER_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AMPHELITRANSFER_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AMPLANDINGUNLOAD_Proto::InitAsDefaultInstance() {
}
class USIM_AMPLANDINGUNLOAD_Proto::_Internal {
 public:
};

USIM_AMPLANDINGUNLOAD_Proto::USIM_AMPLANDINGUNLOAD_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equiplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AMPLANDINGUNLOAD_Proto)
}
USIM_AMPLANDINGUNLOAD_Proto::USIM_AMPLANDINGUNLOAD_Proto(const USIM_AMPLANDINGUNLOAD_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equiplist_(from.equiplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unloadasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unloadasset().empty()) {
    unloadasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unloadasset(),
      GetArena());
  }
  unloadassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unloadassettype().empty()) {
    unloadassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unloadassettype(),
      GetArena());
  }
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetflag().empty()) {
    assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assetflag(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&inloadstaffnum_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(inloadstaffnum_));
  // @@protoc_insertion_point(copy_constructor:USIM_AMPLANDINGUNLOAD_Proto)
}

void USIM_AMPLANDINGUNLOAD_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto.base);
  unloadasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unloadassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inloadstaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(inloadstaffnum_));
}

USIM_AMPLANDINGUNLOAD_Proto::~USIM_AMPLANDINGUNLOAD_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AMPLANDINGUNLOAD_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AMPLANDINGUNLOAD_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unloadasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unloadassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AMPLANDINGUNLOAD_Proto::ArenaDtor(void* object) {
  USIM_AMPLANDINGUNLOAD_Proto* _this = reinterpret_cast< USIM_AMPLANDINGUNLOAD_Proto* >(object);
  (void)_this;
}
void USIM_AMPLANDINGUNLOAD_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AMPLANDINGUNLOAD_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AMPLANDINGUNLOAD_Proto& USIM_AMPLANDINGUNLOAD_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AMPLANDINGUNLOAD_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AMPLANDINGUNLOAD_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AMPLANDINGUNLOAD_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiplist_.Clear();
  unloadasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unloadassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inloadstaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(inloadstaffnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AMPLANDINGUNLOAD_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes unloadAsset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unloadasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes unloadAssetType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unloadassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes assetFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_assetflag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 inloadStaffNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          inloadstaffnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_TransferEquip_Proto EquipList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // double fDamageLevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          fdamagelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AMPLANDINGUNLOAD_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AMPLANDINGUNLOAD_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes unloadAsset = 2;
  if (this->unloadasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_unloadasset(), target);
  }

  // bytes unloadAssetType = 3;
  if (this->unloadassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_unloadassettype(), target);
  }

  // bytes assetFlag = 4;
  if (this->assetflag().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_assetflag(), target);
  }

  // uint32 inloadStaffNum = 5;
  if (this->inloadstaffnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_inloadstaffnum(), target);
  }

  // repeated .USIM_TransferEquip_Proto EquipList = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_equiplist(i), target, stream);
  }

  // double fDamageLevel = 7;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_fdamagelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AMPLANDINGUNLOAD_Proto)
  return target;
}

size_t USIM_AMPLANDINGUNLOAD_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AMPLANDINGUNLOAD_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_TransferEquip_Proto EquipList = 6;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes unloadAsset = 2;
  if (this->unloadasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_unloadasset());
  }

  // bytes unloadAssetType = 3;
  if (this->unloadassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_unloadassettype());
  }

  // bytes assetFlag = 4;
  if (this->assetflag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assetflag());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // double fDamageLevel = 7;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 inloadStaffNum = 5;
  if (this->inloadstaffnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inloadstaffnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AMPLANDINGUNLOAD_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AMPLANDINGUNLOAD_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AMPLANDINGUNLOAD_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AMPLANDINGUNLOAD_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AMPLANDINGUNLOAD_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AMPLANDINGUNLOAD_Proto)
    MergeFrom(*source);
  }
}

void USIM_AMPLANDINGUNLOAD_Proto::MergeFrom(const USIM_AMPLANDINGUNLOAD_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AMPLANDINGUNLOAD_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiplist_.MergeFrom(from.equiplist_);
  if (from.unloadasset().size() > 0) {
    _internal_set_unloadasset(from._internal_unloadasset());
  }
  if (from.unloadassettype().size() > 0) {
    _internal_set_unloadassettype(from._internal_unloadassettype());
  }
  if (from.assetflag().size() > 0) {
    _internal_set_assetflag(from._internal_assetflag());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (!(from.fdamagelevel() <= 0 && from.fdamagelevel() >= 0)) {
    _internal_set_fdamagelevel(from._internal_fdamagelevel());
  }
  if (from.inloadstaffnum() != 0) {
    _internal_set_inloadstaffnum(from._internal_inloadstaffnum());
  }
}

void USIM_AMPLANDINGUNLOAD_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AMPLANDINGUNLOAD_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AMPLANDINGUNLOAD_Proto::CopyFrom(const USIM_AMPLANDINGUNLOAD_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AMPLANDINGUNLOAD_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AMPLANDINGUNLOAD_Proto::IsInitialized() const {
  return true;
}

void USIM_AMPLANDINGUNLOAD_Proto::InternalSwap(USIM_AMPLANDINGUNLOAD_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiplist_.InternalSwap(&other->equiplist_);
  unloadasset_.Swap(&other->unloadasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unloadassettype_.Swap(&other->unloadassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.Swap(&other->assetflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AMPLANDINGUNLOAD_Proto, inloadstaffnum_)
      + sizeof(USIM_AMPLANDINGUNLOAD_Proto::inloadstaffnum_)
      - PROTOBUF_FIELD_OFFSET(USIM_AMPLANDINGUNLOAD_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AMPLANDINGUNLOAD_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AMPTRANSFER_Proto::InitAsDefaultInstance() {
}
class USIM_AMPTRANSFER_Proto::_Internal {
 public:
};

USIM_AMPTRANSFER_Proto::USIM_AMPTRANSFER_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equiplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AMPTRANSFER_Proto)
}
USIM_AMPTRANSFER_Proto::USIM_AMPTRANSFER_Proto(const USIM_AMPTRANSFER_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equiplist_(from.equiplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportasset().empty()) {
    transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportasset(),
      GetArena());
  }
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportassettype().empty()) {
    transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportassettype(),
      GetArena());
  }
  subasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subasset().empty()) {
    subasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subasset(),
      GetArena());
  }
  subassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subassettype().empty()) {
    subassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subassettype(),
      GetArena());
  }
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetflag().empty()) {
    assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assetflag(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&transferstaffnum_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(transferstaffnum_));
  // @@protoc_insertion_point(copy_constructor:USIM_AMPTRANSFER_Proto)
}

void USIM_AMPTRANSFER_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto.base);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transferstaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(transferstaffnum_));
}

USIM_AMPTRANSFER_Proto::~USIM_AMPTRANSFER_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AMPTRANSFER_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AMPTRANSFER_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transportasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AMPTRANSFER_Proto::ArenaDtor(void* object) {
  USIM_AMPTRANSFER_Proto* _this = reinterpret_cast< USIM_AMPTRANSFER_Proto* >(object);
  (void)_this;
}
void USIM_AMPTRANSFER_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AMPTRANSFER_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AMPTRANSFER_Proto& USIM_AMPTRANSFER_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AMPTRANSFER_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AMPTRANSFER_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AMPTRANSFER_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiplist_.Clear();
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transferstaffnum_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(transferstaffnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AMPTRANSFER_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes TransportAsset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transportasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TransportAssetType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transportassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SubAsset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_subasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SubAssetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_subassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes AssetFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_assetflag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TransferStaffNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          transferstaffnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_TransferEquip_Proto EquipList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AMPTRANSFER_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AMPTRANSFER_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes TransportAsset = 2;
  if (this->transportasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transportasset(), target);
  }

  // bytes TransportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transportassettype(), target);
  }

  // bytes SubAsset = 4;
  if (this->subasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_subasset(), target);
  }

  // bytes SubAssetType = 5;
  if (this->subassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_subassettype(), target);
  }

  // bytes AssetFlag = 6;
  if (this->assetflag().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_assetflag(), target);
  }

  // uint32 TransferStaffNum = 7;
  if (this->transferstaffnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_transferstaffnum(), target);
  }

  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_equiplist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AMPTRANSFER_Proto)
  return target;
}

size_t USIM_AMPTRANSFER_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AMPTRANSFER_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_TransferEquip_Proto EquipList = 8;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes TransportAsset = 2;
  if (this->transportasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportasset());
  }

  // bytes TransportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportassettype());
  }

  // bytes SubAsset = 4;
  if (this->subasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subasset());
  }

  // bytes SubAssetType = 5;
  if (this->subassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_subassettype());
  }

  // bytes AssetFlag = 6;
  if (this->assetflag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assetflag());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 TransferStaffNum = 7;
  if (this->transferstaffnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transferstaffnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AMPTRANSFER_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AMPTRANSFER_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AMPTRANSFER_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AMPTRANSFER_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AMPTRANSFER_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AMPTRANSFER_Proto)
    MergeFrom(*source);
  }
}

void USIM_AMPTRANSFER_Proto::MergeFrom(const USIM_AMPTRANSFER_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AMPTRANSFER_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiplist_.MergeFrom(from.equiplist_);
  if (from.transportasset().size() > 0) {
    _internal_set_transportasset(from._internal_transportasset());
  }
  if (from.transportassettype().size() > 0) {
    _internal_set_transportassettype(from._internal_transportassettype());
  }
  if (from.subasset().size() > 0) {
    _internal_set_subasset(from._internal_subasset());
  }
  if (from.subassettype().size() > 0) {
    _internal_set_subassettype(from._internal_subassettype());
  }
  if (from.assetflag().size() > 0) {
    _internal_set_assetflag(from._internal_assetflag());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.transferstaffnum() != 0) {
    _internal_set_transferstaffnum(from._internal_transferstaffnum());
  }
}

void USIM_AMPTRANSFER_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AMPTRANSFER_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AMPTRANSFER_Proto::CopyFrom(const USIM_AMPTRANSFER_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AMPTRANSFER_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AMPTRANSFER_Proto::IsInitialized() const {
  return true;
}

void USIM_AMPTRANSFER_Proto::InternalSwap(USIM_AMPTRANSFER_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiplist_.InternalSwap(&other->equiplist_);
  transportasset_.Swap(&other->transportasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.Swap(&other->transportassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subasset_.Swap(&other->subasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subassettype_.Swap(&other->subassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.Swap(&other->assetflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AMPTRANSFER_Proto, transferstaffnum_)
      + sizeof(USIM_AMPTRANSFER_Proto::transferstaffnum_)
      - PROTOBUF_FIELD_OFFSET(USIM_AMPTRANSFER_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AMPTRANSFER_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USIM_AMPFLASHING_Proto::InitAsDefaultInstance() {
}
class USIM_AMPFLASHING_Proto::_Internal {
 public:
};

USIM_AMPFLASHING_Proto::USIM_AMPFLASHING_Proto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equiplist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:USIM_AMPFLASHING_Proto)
}
USIM_AMPFLASHING_Proto::USIM_AMPFLASHING_Proto(const USIM_AMPFLASHING_Proto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equiplist_(from.equiplist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportasset().empty()) {
    transportasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportasset(),
      GetArena());
  }
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transportassettype().empty()) {
    transportassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transportassettype(),
      GetArena());
  }
  flashingasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flashingasset().empty()) {
    flashingasset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flashingasset(),
      GetArena());
  }
  flashingassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flashingassettype().empty()) {
    flashingassettype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_flashingassettype(),
      GetArena());
  }
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetflag().empty()) {
    assetflag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_assetflag(),
      GetArena());
  }
  ::memcpy(&dfsimtime_, &from.dfsimtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&fdamagelevel_) -
    reinterpret_cast<char*>(&dfsimtime_)) + sizeof(fdamagelevel_));
  // @@protoc_insertion_point(copy_constructor:USIM_AMPFLASHING_Proto)
}

void USIM_AMPFLASHING_Proto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto.base);
  transportasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flashingasset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flashingassettype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fdamagelevel_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(fdamagelevel_));
}

USIM_AMPFLASHING_Proto::~USIM_AMPFLASHING_Proto() {
  // @@protoc_insertion_point(destructor:USIM_AMPFLASHING_Proto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USIM_AMPFLASHING_Proto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transportasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transportassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flashingasset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flashingassettype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetflag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USIM_AMPFLASHING_Proto::ArenaDtor(void* object) {
  USIM_AMPFLASHING_Proto* _this = reinterpret_cast< USIM_AMPFLASHING_Proto* >(object);
  (void)_this;
}
void USIM_AMPFLASHING_Proto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USIM_AMPFLASHING_Proto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USIM_AMPFLASHING_Proto& USIM_AMPFLASHING_Proto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USIM_AMPFLASHING_Proto_USimDataStructm_2eproto.base);
  return *internal_default_instance();
}


void USIM_AMPFLASHING_Proto::Clear() {
// @@protoc_insertion_point(message_clear_start:USIM_AMPFLASHING_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equiplist_.Clear();
  transportasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flashingasset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flashingassettype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dfsimtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fdamagelevel_) -
      reinterpret_cast<char*>(&dfsimtime_)) + sizeof(fdamagelevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USIM_AMPFLASHING_Proto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dfSimTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dfsimtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes TransportAsset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transportasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes TransportAssetType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transportassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes FlashingAsset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_flashingasset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes FlashingAssetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_flashingassettype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes AssetFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_assetflag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 FlashType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flashtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 StaffNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          staffnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .USIM_TransferEquip_Proto EquipList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // double fDamageLevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          fdamagelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USIM_AMPFLASHING_Proto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:USIM_AMPFLASHING_Proto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dfsimtime(), target);
  }

  // bytes TransportAsset = 2;
  if (this->transportasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transportasset(), target);
  }

  // bytes TransportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transportassettype(), target);
  }

  // bytes FlashingAsset = 4;
  if (this->flashingasset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_flashingasset(), target);
  }

  // bytes FlashingAssetType = 5;
  if (this->flashingassettype().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_flashingassettype(), target);
  }

  // bytes AssetFlag = 6;
  if (this->assetflag().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_assetflag(), target);
  }

  // uint32 FlashType = 7;
  if (this->flashtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flashtype(), target);
  }

  // uint32 StaffNum = 8;
  if (this->staffnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_staffnum(), target);
  }

  // repeated .USIM_TransferEquip_Proto EquipList = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equiplist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_equiplist(i), target, stream);
  }

  // double fDamageLevel = 10;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_fdamagelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:USIM_AMPFLASHING_Proto)
  return target;
}

size_t USIM_AMPFLASHING_Proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:USIM_AMPFLASHING_Proto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .USIM_TransferEquip_Proto EquipList = 9;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes TransportAsset = 2;
  if (this->transportasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportasset());
  }

  // bytes TransportAssetType = 3;
  if (this->transportassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transportassettype());
  }

  // bytes FlashingAsset = 4;
  if (this->flashingasset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flashingasset());
  }

  // bytes FlashingAssetType = 5;
  if (this->flashingassettype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_flashingassettype());
  }

  // bytes AssetFlag = 6;
  if (this->assetflag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_assetflag());
  }

  // double dfSimTime = 1;
  if (!(this->dfsimtime() <= 0 && this->dfsimtime() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 FlashType = 7;
  if (this->flashtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flashtype());
  }

  // uint32 StaffNum = 8;
  if (this->staffnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_staffnum());
  }

  // double fDamageLevel = 10;
  if (!(this->fdamagelevel() <= 0 && this->fdamagelevel() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USIM_AMPFLASHING_Proto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:USIM_AMPFLASHING_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  const USIM_AMPFLASHING_Proto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USIM_AMPFLASHING_Proto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:USIM_AMPFLASHING_Proto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:USIM_AMPFLASHING_Proto)
    MergeFrom(*source);
  }
}

void USIM_AMPFLASHING_Proto::MergeFrom(const USIM_AMPFLASHING_Proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:USIM_AMPFLASHING_Proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equiplist_.MergeFrom(from.equiplist_);
  if (from.transportasset().size() > 0) {
    _internal_set_transportasset(from._internal_transportasset());
  }
  if (from.transportassettype().size() > 0) {
    _internal_set_transportassettype(from._internal_transportassettype());
  }
  if (from.flashingasset().size() > 0) {
    _internal_set_flashingasset(from._internal_flashingasset());
  }
  if (from.flashingassettype().size() > 0) {
    _internal_set_flashingassettype(from._internal_flashingassettype());
  }
  if (from.assetflag().size() > 0) {
    _internal_set_assetflag(from._internal_assetflag());
  }
  if (!(from.dfsimtime() <= 0 && from.dfsimtime() >= 0)) {
    _internal_set_dfsimtime(from._internal_dfsimtime());
  }
  if (from.flashtype() != 0) {
    _internal_set_flashtype(from._internal_flashtype());
  }
  if (from.staffnum() != 0) {
    _internal_set_staffnum(from._internal_staffnum());
  }
  if (!(from.fdamagelevel() <= 0 && from.fdamagelevel() >= 0)) {
    _internal_set_fdamagelevel(from._internal_fdamagelevel());
  }
}

void USIM_AMPFLASHING_Proto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:USIM_AMPFLASHING_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USIM_AMPFLASHING_Proto::CopyFrom(const USIM_AMPFLASHING_Proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:USIM_AMPFLASHING_Proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USIM_AMPFLASHING_Proto::IsInitialized() const {
  return true;
}

void USIM_AMPFLASHING_Proto::InternalSwap(USIM_AMPFLASHING_Proto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equiplist_.InternalSwap(&other->equiplist_);
  transportasset_.Swap(&other->transportasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transportassettype_.Swap(&other->transportassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flashingasset_.Swap(&other->flashingasset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flashingassettype_.Swap(&other->flashingassettype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  assetflag_.Swap(&other->assetflag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USIM_AMPFLASHING_Proto, fdamagelevel_)
      + sizeof(USIM_AMPFLASHING_Proto::fdamagelevel_)
      - PROTOBUF_FIELD_OFFSET(USIM_AMPFLASHING_Proto, dfsimtime_)>(
          reinterpret_cast<char*>(&dfsimtime_),
          reinterpret_cast<char*>(&other->dfsimtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USIM_AMPFLASHING_Proto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::USIM_TimeStepMessage_Proto* Arena::CreateMaybeMessage< ::USIM_TimeStepMessage_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_TimeStepMessage_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_SIMINFO_Proto* Arena::CreateMaybeMessage< ::USIM_SIMINFO_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_SIMINFO_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CommandStructInfo_Proto* Arena::CreateMaybeMessage< ::USIM_CommandStructInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CommandStructInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_PlatInfoMessage_Proto* Arena::CreateMaybeMessage< ::USIM_PlatInfoMessage_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_PlatInfoMessage_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_EquipmentInfo_Proto* Arena::CreateMaybeMessage< ::USIM_EquipmentInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_EquipmentInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_EquipmentLoadInfo_Proto* Arena::CreateMaybeMessage< ::USIM_EquipmentLoadInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_EquipmentLoadInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_Detection_Proto* Arena::CreateMaybeMessage< ::USIM_Detection_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_Detection_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_Fusion_Proto* Arena::CreateMaybeMessage< ::USIM_Fusion_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_Fusion_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_DetectionEvent_Proto* Arena::CreateMaybeMessage< ::USIM_DetectionEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_DetectionEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_FusionEvent_Proto* Arena::CreateMaybeMessage< ::USIM_FusionEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_FusionEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CommunicationEvent_Proto* Arena::CreateMaybeMessage< ::USIM_CommunicationEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CommunicationEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CommandControlEvent_Proto* Arena::CreateMaybeMessage< ::USIM_CommandControlEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CommandControlEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_WeaponSystemEvent_Proto* Arena::CreateMaybeMessage< ::USIM_WeaponSystemEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_WeaponSystemEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_WeaponLaunchEvent_Proto* Arena::CreateMaybeMessage< ::USIM_WeaponLaunchEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_WeaponLaunchEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_DecoyLaunchEvent_Proto* Arena::CreateMaybeMessage< ::USIM_DecoyLaunchEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_DecoyLaunchEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_ElectronicWarEvent_Proto* Arena::CreateMaybeMessage< ::USIM_ElectronicWarEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_ElectronicWarEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_SensorStateEvent_Proto* Arena::CreateMaybeMessage< ::USIM_SensorStateEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_SensorStateEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_BattleResultEvent_Proto* Arena::CreateMaybeMessage< ::USIM_BattleResultEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_BattleResultEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_DamageEvent_Proto* Arena::CreateMaybeMessage< ::USIM_DamageEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_DamageEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_LodisticsEvent_Protp* Arena::CreateMaybeMessage< ::USIM_LodisticsEvent_Protp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_LodisticsEvent_Protp >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AssociEntityLaunchEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AssociEntityLaunchEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AssociEntityLaunchEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AssociEntityRecoveryEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AssociEntityRecoveryEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AssociEntityRecoveryEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_StartAssetRecoveryEvent_Proto* Arena::CreateMaybeMessage< ::USIM_StartAssetRecoveryEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_StartAssetRecoveryEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AircraftTakeoffEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AircraftTakeoffEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AircraftTakeoffEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AircraftLandEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AircraftLandEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AircraftLandEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AircraftReturnEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AircraftReturnEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AircraftReturnEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_BuoyReleaseEvent_Proto* Arena::CreateMaybeMessage< ::USIM_BuoyReleaseEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_BuoyReleaseEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_SonarDropReuseEvent_Proto* Arena::CreateMaybeMessage< ::USIM_SonarDropReuseEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_SonarDropReuseEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_ForceDeliveryEvent_Proto* Arena::CreateMaybeMessage< ::USIM_ForceDeliveryEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_ForceDeliveryEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_ForceReusingEvent_Proto* Arena::CreateMaybeMessage< ::USIM_ForceReusingEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_ForceReusingEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_IssuingTaskAssignment_Proto* Arena::CreateMaybeMessage< ::USIM_IssuingTaskAssignment_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_IssuingTaskAssignment_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CommandTaskCompleted_Proto* Arena::CreateMaybeMessage< ::USIM_CommandTaskCompleted_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CommandTaskCompleted_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AircraftDeckAbortEvent_Proto* Arena::CreateMaybeMessage< ::USIM_AircraftDeckAbortEvent_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AircraftDeckAbortEvent_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_DyamicCycle_Proto* Arena::CreateMaybeMessage< ::USIM_DyamicCycle_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_DyamicCycle_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_WedgeBeam_Proto* Arena::CreateMaybeMessage< ::USIM_WedgeBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_WedgeBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIN_SphereBeam_Proto* Arena::CreateMaybeMessage< ::USIN_SphereBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIN_SphereBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CircleBeam_Proto* Arena::CreateMaybeMessage< ::USIM_CircleBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CircleBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_ConeBeam_Proto* Arena::CreateMaybeMessage< ::USIM_ConeBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_ConeBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_PyramidBeam_Proto* Arena::CreateMaybeMessage< ::USIM_PyramidBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_PyramidBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_CylinderBeam_Proto* Arena::CreateMaybeMessage< ::USIM_CylinderBeam_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_CylinderBeam_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_Line_Proto* Arena::CreateMaybeMessage< ::USIM_Line_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_Line_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_GraphOnoff_Proto* Arena::CreateMaybeMessage< ::USIM_GraphOnoff_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_GraphOnoff_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_SonarDetectInfo_Proto* Arena::CreateMaybeMessage< ::USIM_SonarDetectInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_SonarDetectInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_SonobouyDetectInfo_Proto* Arena::CreateMaybeMessage< ::USIM_SonobouyDetectInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_SonobouyDetectInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_ChargeInfo_Proto* Arena::CreateMaybeMessage< ::USIM_ChargeInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_ChargeInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_MSLng_Lat_Proto* Arena::CreateMaybeMessage< ::USIM_MSLng_Lat_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_MSLng_Lat_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_TrackAreaInfo_Proto* Arena::CreateMaybeMessage< ::USIM_TrackAreaInfo_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_TrackAreaInfo_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_UUVStateMessage_Proto* Arena::CreateMaybeMessage< ::USIM_UUVStateMessage_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_UUVStateMessage_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_TransferEquip_Proto* Arena::CreateMaybeMessage< ::USIM_TransferEquip_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_TransferEquip_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AMPHELITRANSFER_Proto* Arena::CreateMaybeMessage< ::USIM_AMPHELITRANSFER_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AMPHELITRANSFER_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AMPLANDINGUNLOAD_Proto* Arena::CreateMaybeMessage< ::USIM_AMPLANDINGUNLOAD_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AMPLANDINGUNLOAD_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AMPTRANSFER_Proto* Arena::CreateMaybeMessage< ::USIM_AMPTRANSFER_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AMPTRANSFER_Proto >(arena);
}
template<> PROTOBUF_NOINLINE ::USIM_AMPFLASHING_Proto* Arena::CreateMaybeMessage< ::USIM_AMPFLASHING_Proto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::USIM_AMPFLASHING_Proto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
